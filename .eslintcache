[{"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\index.js":"1","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Home_Page.js":"2","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\App.js":"3","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\MY_STUDY.js":"4","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\LINK.js":"5","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Link.js":"6","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\My_Study.js":"7","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Posting.js":"8","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\react_study\\index.js":"9","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\index.js":"10","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\listOfContents.js":"11","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\index.jsx":"12","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting2.jsx":"13","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting1.jsx":"14","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting1.jsx":"15","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting5.jsx":"16","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting6.jsx":"17","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting5.jsx":"18","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting7.jsx":"19","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting8.jsx":"20","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting9.jsx":"21","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting10.jsx":"22","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting11.jsx":"23","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting6.jsx":"24","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting12.jsx":"25","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting2.jsx":"26","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting3.jsx":"27","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting3.jsx":"28","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting4.jsx":"29","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting7.jsx":"30","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting13.jsx":"31","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\listOfContents.jsx":"32","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\index.jsx":"33","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting1.jsx":"34"},{"size":150,"mtime":1611304067765,"results":"35","hashOfConfig":"36"},{"size":1580,"mtime":1613456116289,"results":"37","hashOfConfig":"36"},{"size":2499,"mtime":1613451462159,"results":"38","hashOfConfig":"36"},{"size":559,"mtime":1611403198707,"results":"39","hashOfConfig":"36"},{"size":543,"mtime":1611403105282,"results":"40","hashOfConfig":"36"},{"size":729,"mtime":1612687700904,"results":"41","hashOfConfig":"36"},{"size":1327,"mtime":1613455619765,"results":"42","hashOfConfig":"36"},{"size":1403,"mtime":1614838059950,"results":"43","hashOfConfig":"36"},{"size":195,"mtime":1611838566165,"results":"44","hashOfConfig":"36"},{"size":1138,"mtime":1614837572742,"results":"45","hashOfConfig":"36"},{"size":1374,"mtime":1614142239444,"results":"46","hashOfConfig":"36"},{"size":1038,"mtime":1614151351833,"results":"47","hashOfConfig":"36"},{"size":2392,"mtime":1612257019150,"results":"48","hashOfConfig":"36"},{"size":1708,"mtime":1613451098677,"results":"49","hashOfConfig":"36"},{"size":2154,"mtime":1613451406351,"results":"50","hashOfConfig":"36"},{"size":1661,"mtime":1613451409145,"results":"51","hashOfConfig":"36"},{"size":1652,"mtime":1613456520510,"results":"52","hashOfConfig":"36"},{"size":2921,"mtime":1613455185747,"results":"53","hashOfConfig":"36"},{"size":1644,"mtime":1614065159152,"results":"54","hashOfConfig":"36"},{"size":2870,"mtime":1614067704076,"results":"55","hashOfConfig":"36"},{"size":1815,"mtime":1614069467835,"results":"56","hashOfConfig":"36"},{"size":1870,"mtime":1614144194423,"results":"57","hashOfConfig":"36"},{"size":2497,"mtime":1614144188790,"results":"58","hashOfConfig":"36"},{"size":1070,"mtime":1613451255250,"results":"59","hashOfConfig":"36"},{"size":2986,"mtime":1614147858179,"results":"60","hashOfConfig":"36"},{"size":1539,"mtime":1613451113715,"results":"61","hashOfConfig":"36"},{"size":2954,"mtime":1613451123799,"results":"62","hashOfConfig":"36"},{"size":2108,"mtime":1613451231086,"results":"63","hashOfConfig":"36"},{"size":1485,"mtime":1613451408511,"results":"64","hashOfConfig":"36"},{"size":3004,"mtime":1614153793000,"results":"65","hashOfConfig":"36"},{"size":1840,"mtime":1614419496382,"results":"66","hashOfConfig":"36"},{"size":98,"mtime":1614844521243,"results":"67","hashOfConfig":"36"},{"size":1059,"mtime":1614837932164,"results":"68","hashOfConfig":"36"},{"size":6530,"mtime":1614844413503,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"151ouc9",{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"72"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"117"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"109"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"109"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"109"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"109"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"117"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"89"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"109"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\index.js",[],["161","162"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Home_Page.js",["163"],"import React, {Component} from 'react';\r\nimport './App.css'\r\nimport './bootstrap/css/bootstrap.css'\r\n\r\nclass Home_Page extends Component{\r\n  add_post=(title,text)=>{\r\n    if(this.props.state.title.indexOf(title)>=0){\r\n      alert(\"중복된 제목이 있습니다.\")\r\n    }else {\r\n      this.props.add_post(title,text)\r\n    }\r\n  }\r\n  render(){\r\n\r\n      return (\r\n        <div className=\"Home_Page\">\r\n          <p className=\"body\">\r\n            <br/>공부합시다....\r\n            <br/>이 블로그는 리액트와 깃허브를 공부하기 위해 만들었고 리액트만으로 만들어졌습니다.\r\n            <br/>페이지 이동없이 블로그를 구현할 계획입니다.\r\n            <br/>동시에 어떤 공부를 했는지 모여주는 블로그입니다.\r\n            <br/>공부했던 내용은 posting항목에서 확인 가능합니다.\r\n            <br/>아래는 리액트 공부내용을 시각적으로 보여주며 My_Study와 함께 웹공부를 할 것 입니다.\r\n            <br/>Link를 가시면 저의 기본 정보를 보실 수 있습니다.\r\n            <br/>\r\n            <input className='title_box' id='제목' placeholder=\"제목\"/><br/>\r\n            <div className='content_box' contentEditable=\"true\" id='content' placeholder=\"content\"></div>\r\n              <button className='button_box' onClick={()=>{{\r\n                this.add_post(document.getElementById('제목').value, document.getElementById('content').innerHTML);\r\n              }}}>등록</button>\r\n          </p>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home_Page;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\App.js",["164","165","166","167","168","169","170"],"import React, {Component} from 'react';\r\nimport './App.css'\r\nimport './bootstrap/css/bootstrap.css'\r\nimport My_Study from './My_Study';\r\nimport Posting from './Posting';\r\nimport Link from './Link';\r\nimport Home_Page from './Home_Page';\r\n\r\nclass App extends Component{\r\n  state={\r\n    site: 'Home_Page',\r\n    gotoSite: ['Home_Page','Posting','My_Study','Link'],\r\n    title:[\"App.js데이터입니다.\"],\r\n    text:[\"props를 이용하여 값을 보냅니다.\"],\r\n    img:[],\r\n  };\r\n  add_post = (title,text)=>{                      //상태를 변경함 백엔드 연동시 거기에 정보를 넣어야함\r\n    this.setState(\r\n      {\r\n        title: this.state.title.concat(title),\r\n        text: this.state.text.concat(text)\r\n      }\r\n    );\r\n  }\r\n  remove_post=(key)=>{                        //등록정보를 지울수있음\r\n    var index=this.state.title.indexOf(key)\r\n    this.setState({\r\n      title:this.state.title.slice(0,index).concat(this.state.title.slice(index+1, this.state.title.length)),\r\n      text:this.state.text.slice(0,index).concat(this.state.text.slice(index+1, this.state.text.length)),\r\n    });\r\n  }\r\n  Home_Page = (text) =>{\r\n    this.setState({\r\n      site: text\r\n    });\r\n  }\r\n  menu=this.state.gotoSite.map((site,key)=>{return <a className=\"button_css col-md-3\" onClick={()=>{this.Home_Page(site)}}>{site}</a>})\r\n\r\n  render(){\r\n    const htmlTitle = document.querySelector(\"title\"); // <title> 태그 찾기\r\n    htmlTitle.innerText = this.state.site;\r\n    \r\n    if(this.state.site=='Home_Page'){\r\n      return(\r\n        <div className=\"App\">\r\n          <nav className=\"main_header\">\r\n          {this.menu}\r\n          </nav>\r\n          <Home_Page add_post={this.add_post} state={this.state}/>\r\n        </div>\r\n      );\r\n    }\r\n    if(this.state.site=='Posting'){\r\n      return(\r\n        <div className=\"App\">\r\n          <nav className=\"main_header\">\r\n          {this.menu}\r\n          </nav>\r\n          <Posting/>\r\n        </div>\r\n      );\r\n    }\r\n    if(this.state.site=='My_Study'){\r\n      return (\r\n        <div className=\"App\">\r\n          <nav className=\"main_header\">\r\n          {this.menu}\r\n          </nav>\r\n          <My_Study remove_post={this.remove_post} state={this.state}/>\r\n        </div>\r\n      );\r\n    }\r\n    if(this.state.site=='Link'){\r\n      return(\r\n        <div className=\"App\">\r\n          <nav className=\"main_header\">\r\n          {this.menu}\r\n          </nav>\r\n          <Link/>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n",["171","172"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\MY_STUDY.js",["173"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\LINK.js",["174"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Link.js",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\My_Study.js",["175"],"import React, {Component} from 'react';\r\nimport './App.css'\r\nimport './bootstrap/css/bootstrap.css'\r\nclass My_Study extends Component{\r\n  remove_post=(title)=>{\r\n    this.props.remove_post(title.key)\r\n  }\r\n  change=(id,bid)=>{\r\n    if(document.getElementById(id).style.display ==\"block\"){\r\n      document.getElementById(id).style.display =\"none\";\r\n      document.getElementById(bid).innerText=\"보기\";\r\n    }\r\n    else{\r\n      document.getElementById(id).style.display =\"block\";\r\n      document.getElementById(bid).innerText=\"닫기\";\r\n    }\r\n  }\r\n\r\n  render(){\r\n      return (\r\n        <div className=\"My_Study\">\r\n          <p className=\"body\">\r\n          <div>웹페이지를 공부하는 메뉴입니다. 게시판을 만들 계획입니다.</div>\r\n          {this.props.state.title.map((key,index)=>{return (\r\n            <div className=\"list\">{key}\r\n              <button className=\"button_box\" id={key} onClick = {()=>{this.change(index,key)}}>보기</button>\r\n              <button className=\"button_box\" onClick={()=>{this.remove_post({key})}}>제거</button>\r\n              <div id={index} style={{display:\"none\"}}dangerouslySetInnerHTML={ {__html: this.props.state.text[index]} }>\r\n              </div>\r\n            </div>\r\n          )})}\r\n          </p>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default My_Study;\r\n",["176","177"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Posting.js",["178","179"],"import React, {Component} from 'react';\r\nimport './App.css'\r\nimport './bootstrap/css/bootstrap.css'\r\nimport React_study from './React_study'\r\nimport Algorithm from './algorithm/index'\r\nimport Ml from './ML/index'\r\nclass Posting extends Component{\r\n  change=(id,bid)=>{\r\n    if(document.getElementById(id).style.display ==\"block\"){\r\n      document.getElementById(id).style.display =\"none\";\r\n    }\r\n    else{\r\n      document.getElementById(id).style.display =\"block\";\r\n    }\r\n  }\r\n  render(){\r\n      return (\r\n        <div className=\"Posting\">\r\n          <button className=\"post_body\" id=\"test\" onClick = {()=>{this.change(\"study3\",\"test\")}}>알고리즘 공부</button>\r\n          <div id=\"study3\" className=\"post_menu\"><Algorithm/></div>\r\n\r\n          <button className=\"post_body\" id=\"react_button\" onClick = {()=>{this.change(\"study1\",\"react_button\")}}>리액트 공부</button>\r\n          <div id=\"study1\" className=\"post_menu\"><React_study/></div>\r\n\r\n          <button className=\"post_body\" id=\"test\" onClick = {()=>{this.change(\"study4\",\"test\")}}>ML 공부</button>\r\n          <div id=\"study4\" className=\"post_menu\"><Ml/></div>\r\n\r\n          <button className=\"post_body\" id=\"django_button\" onClick = {()=>{this.change(\"study2\",\"django_button\")}}>장고 공부</button>\r\n          <div id=\"study2\" className=\"post_menu\">nothing</div>\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\react_study\\index.js",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\index.js",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\listOfContents.js",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\index.jsx",["180"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport { List } from './listOfContents';\r\n\r\nclass App extends Component{\r\n  change=(id,bid)=>{\r\n    if(document.getElementById(id).style.display ==\"block\"){\r\n      document.getElementById(id).style.display =\"none\";\r\n      document.getElementById(bid).innerText=\"보기\";\r\n    }\r\n    else{\r\n      document.getElementById(id).style.display =\"block\";\r\n      document.getElementById(bid).innerText=\"닫기\";\r\n    }\r\n  }\r\n    render(){\r\n      return(\r\n        <div>\r\n            {List.map((i,idx)=>{return(\r\n              <div>\r\n                <li className=\"list\">\r\n                  {i.title}\r\n                  <button className=\"button_box\" id={i.title} onClick = {()=>{this.change(`algorithm${idx}`, i.title)}}>\r\n                    보기\r\n                  </button>\r\n                </li>\r\n                <div id={`algorithm${idx}`} className=\"post_list\">{i.content}</div>\r\n              </div>\r\n            )})}\r\n        </div>\r\n      );\r\n    }\r\n}\r\nexport default App;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting2.jsx",["181","182"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting1.jsx",["183","184","185","186","187","188"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting1.jsx",["189"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport Img from './img/4344.PNG'\r\n\r\nclass Posting1 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>평균은 넘겠지<h3>(정답률 : 37.470%)</h3></h1>\r\n      <h4>\r\n      백준 4344번 문제로 평균을 넘는 학생의 수를 구하는 것이다.<br/><br/>\r\n      이 문제는 배열로 간단히 풀 수 있지만 C++에서 사용하는 vector기능을 이용하여 풀어 보았다.<br/><br/>\r\n      코드는 다음과 같다.\r\n      <br/><br/>\r\n      <img src={Img} className='code'/>\r\n      <br/><br/>\r\n      vector는\r\n      <div className=\"code\">#include &lt;vector&gt;</div>\r\n      <br/><br/>\r\n      이렇게 불러와야 사용할 수 있고\r\n      <div className=\"code\">\r\n      std::vector&lt;vector&gt; v(number);\r\n      </div>\r\n      <br/><br/>\r\n      이렇게 선언했을 때, v는 변수명, number은 백터의 사이즈 int는 자료형에 해당한다.<br/><br/>\r\n      가장 많이 쓰이는 함수 위주로 정리를 하자면<br/><br/>\r\n      <div className=\"code\">\r\n      v.front();<br/><br/>\r\n      v.back();<br/><br/>\r\n      v.push_back(number);<br/><br/>\r\n      v.pop_back();<br/><br/>\r\n      v.begin();<br/><br/>\r\n      v.end();<br/><br/>\r\n      v.size();<br/><br/>\r\n      </div><br/><br/>\r\n      위주로 사용하고, 각각 벡터의 맨처음, 마지막 잠초, 마지막 원소뒤에 number삽입, 마지막 원소 제거,\r\n      벡터 처음과 마지막 가르키기(iterater), 벡터의 사이즈반환이다.<br/><br/>\r\n      <div className=\"code\">std::accumulate(start,end,0);</div><br/><br/>\r\n      의 경우에는 벡터의 평균을 구할 때, 총합을 구하기 위해서 사용하는 코드로\r\n      <div className=\"code\">#include&lt;numeric&gt;</div><br/><br/>\r\n      에서 불러와 사용하며, 백터의 시작, 끝, 자료형으로 생각하여 사용하면 된다.\r\n      이상 벡터에 대해 알아보았다.<br/><br/>이 문제의 경우 알고리즘적으로 어려운 것은 없으니 풀이는 생략한다.\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting1;\r\n",["190","191"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting5.jsx",["192"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1051.PNG'\r\n\r\nclass Posting5 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>숫자 정사각형<h3>(정답률 : 37.492%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 주어진 직사각형(N*M)안에 입력받은 정수가 모든 칸을 차지하고 있다.<br/><br/>\r\n      이 직사각형 안에서는 정사각형이 존재하는데, 이 정사각형의 꼭짓점에 숫자 4개가 모두 같은 정사각형 중에 가장 큰 정사각형의 크기를 구하면된다.<br/><br/>\r\n      예를 들어 다음과 같이 입력이 되었을 때, 9라는 값이 출력되어야 한다.<br/><br/>\r\n      <div className='code'>3 5<br/>42101<br/>22100<br/>22101</div>\r\n      이때 생각한 알고리즘은 이미지프로세싱에서 사용하는 필터의 개념을 생각 하였다.<br/><br/>\r\n      핵심 알고리즘의 코드는 다음과 같다.\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      N과 M 중 작은 숫자를 정사각형의 최대 크기로 잡고, 직사각형안을 순회한다.<br/><br/>\r\n      순회 후 조건에 맞는 정사각형이 없을 경우 변의 길이를 1씩 감소시키면서 처음부터 반복한다.<br/><br/>\r\n      이렇게 찾게되면 변의 길이를 제곱하여 반환을 하면, 원하는 값이 나온다.<br/><br/>\r\n      이번 문제는 어렵지는 않지만, 정사각형이 직사각형 안을 돌아 다닐때, 인덱스를 주의해야한다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting5;\r\n",["193","194"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting6.jsx",["195","196","197"],"import React,{Component} from 'react'\r\nimport Img1 from './img/study4_1.PNG'\r\nimport Img2 from './img/study4_2.PNG'\r\nimport Img3 from './img/study5_1.PNG'\r\n\r\nclass Posting6 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>블로그 만들기3</h1>\r\n      <h3>Posting 페이지 만들기</h3>\r\n      <h4>\r\n      이번에는 Posting페이지를 만들어본다. posting 페이지는 이전에 홈페이지와 My_Study페이지를 만들때 사용했던 코드들을 활용하여 쉽게 만들었다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      이렇게 각 항목에 대한 버튼들을 생성하고 버튼을 누르면 컴포넌트를 보여준다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      알고리즘 항목은 다음과같은 파일 구조를 갖고있다. index.jsx에서 컴포넌트를 export하고 그 값을 받아서 posting페이지에서 보여준다.<br/><br/>\r\n      알고리즘 폴더의 index.jsx는 다음과 같은 코드를 가지고 있다.<br/><br/>\r\n      이렇게 다시한번 컴포넌트들을 항목으로 만들어 보기/닫기 버튼을 이용해 포스팅한 것들을 보여준다.<br/><br/>\r\n      <img src={Img3} className=\"code\"/><br/><br/>\r\n      posting페이지는 이렇게 새로운 내용없이 기존에 공부했던 내용으로 만들 수 있었다.<br/><br/>\r\n      다음 포스팅때는 메뉴가 여러개로 늘어났을 경우, 코드 관리를 위한 모듈화를 포스팅할 것이다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Posting6;\r\n",["198","199"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting5.jsx",["200","201","202"],"import React,{Component} from 'react'\r\nimport Img1 from './img/study3_1.PNG'\r\nimport Img2 from './img/study5_2.PNG'\r\nimport Img3 from './img/study3_2.PNG'\r\n\r\nclass Posting6 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>블로그 만들기3</h1>\r\n      <h3>My_Study 페이지 만들기</h3>\r\n      <h4>\r\n      이번에는 저번 시간에 이어서 My_Study페이지를 생성해본다. 이전에 props로 My_Study에 state를 전달했었다.<br/><br/>\r\n      이 데이터를 활용해보기 위해 게시판처럼 만들었고 return 하는 코드는 다음과 같다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      <div className=\"code\">&lt;Parent data=&#123;this.state&#125;/&gt;</div>\r\n      만약 부모 컴포넌트에서 위와 같이 값을 전달했을 경우<br/><br/>\r\n      <div className=\"code\">this.props.data</div>\r\n      이런 식으로 데이터 사용이 가능하다.<br/><br/>\r\n      이렇게 전달 받은 state와 map함수를 통해서 title배열을 돌면서 전달 받은 값을 보여준다.<br/><br/>\r\n      key값은 제목을 this.state.state.text[index]로 내용을 보여준다. style은 display:\"none\"을 하여 보기 버튼을 누를때만 보이게 설정을 해둔다.<br/><br/>\r\n      보기와 제거 함수는 아래와 같다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      보기 함수의 경우 클릭마다 내용을 보여주고 가려주고를 하게 한다. 이는 id를 index나 key을 주어 그에 해당하는 div나 button이 반응하게 했다.<br/><br/>\r\n      remove함수의 경우 App.js에서 상태를 갖고있기 때문에 이벤트를 가져와서 사용한다. 코드는 다음과 같다.<br/><br/>\r\n      <img src={Img3} className=\"code\"/><br/><br/>\r\n      여기서는 데이터를 지울때 slice와 concat함수를 사용해 봤다.<br/><br/>\r\n      slice함수는 매개변수 2개를 사용하는데, 첫번째 인덱스에서 두번째 인덱스까지의 데이터를 가져오는 것이다.<br/><br/>\r\n      예를 들어 slice(0,10)일경우 배열 인덱스 0에서 9까지의 값을 가져온다.<br/><br/>\r\n      concat함수의 경우 뒤에 값을 붙혀주는 함수이다.<br/><br/>\r\n      이 두가지를 합쳐 slice(0,index)와 slice(index+1,array.length)를 concat으로 합쳐주면 index의 위치에 있는 값이 지워지게 되는것이다.<br/><br/>\r\n      indexOf 함수는 그 배열에 같은 값을 가진 위치의 인덱스를 반환한다.<br/><br/>\r\n      이렇게 My_Study페이지를 구현하였고, 이후에 추가적인 내용은 컴포넌트를 생성하여 import하는 식으로 진행할 계획이다.<br/><br/>\r\n      다음 포스팅은 Posting페이지를 만드는 과정을 설명해 본다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Posting6;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting7.jsx",["203"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting8.jsx",["204","205","206","207"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from \"./img/11729.PNG\"\r\nimport Img2 from \"./img/11729_1.PNG\"\r\nimport Img3 from \"./img/11729_2.PNG\"\r\nimport Img4 from \"./img/11729_3.PNG\"\r\nclass Posting8 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>하노이탑 이동 순서<h3>(정답률 : 48.601%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 재귀를 활용한 하노이탑 이동순서를 맞추는 문제이다.<br/><br/>\r\n      <h3>재귀함수란?</h3>\r\n      재귀함수란 자기 자신을 호출하는 함수의 형태로 그 중 대표적인 예제로 하노이탑이 사용되곤 한다.<br/><br/>\r\n      재귀로 문제를 풀때는 '큰 문제롤 작은 문제로 나눠서 푼다'는 개념을 갖고 풀게 된다.<br/><br/>\r\n      코드는 다음과 같다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      우선 vector를 통해 재귀함수를 들어가서 이동할 때 마다 이동순서를 저장하게 된다.<br/><br/>\r\n      함수에는 탑의 층수(num), 현재위치(from), 통로(by), 최종위치(to) 총 네가지 매개변수를 갖는다.<br/><br/>\r\n      탈출 조건으로는 num이 1이되었을 때, 마지막으로 이동한 후에 함수를 종료 시킨다.<br/><br/>\r\n      탈출 상황이 아닐 때 생각이 여기서 핵심인데, 만약 탑이 5층이 있다고 가정을 하자.<br/><br/>\r\n      그럼 가장 큰원반이 중앙으로 가야한다. 그럴려면 남은 4개의 원반이 오른쪽으로 가야할 것이다.<br/><br/>\r\n      그럼다시 4개의 원반이 오른쪽으로 가려면 어떻게 해야할까?<br/><br/>\r\n      답은 다시 3개의 원반이 중앙에가 있고 4개의 원반중 가장큰 원반이 오른쪽에 있어야 할 것이다.<br/><br/>\r\n      이것을 계속 반복하다보면 결국 탑이 몇층인 것 과는 상관없이 옮길 수 있다.<br/><br/>\r\n      위의 함수를 보면 첫번째 (n-1,from, by, to)는 n-1개를 가장 오른쪽에 옮기는 코드<br/><br/>\r\n      <img src={Img2} className='code'/><br/><br/>\r\n      두번때 출력문은 마지막 제일큰 원반을 다른 기둥에 옮기는 코드<br/><br/>\r\n      <img src={Img3} className='code'/><br/><br/>\r\n      이후 마지막 (n-1,by,to,from)은 다른 곳으로 옮겼던 n-1개의 원반을 가장큰 원반에 들어가있던 기둥으로 옮겨주는 코드이다.<br/><br/>\r\n      <img src={Img4} className='code'/><br/><br/>\r\n      이와 같은 형태가 된다.<br/><br/>\r\n      재귀는 이렇게 복잡한 문제를 큰 틀로 봐서 간단하게 풀수있어 아주 강력한 무기가 된다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      <a href=\"https://www.youtube.com/watch?v=aPYE0anPZqI\">사진 출처</a>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting8;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting9.jsx",["208","209"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/11047.PNG'\r\nimport Img2 from './img/1929.PNG'\r\nclass Posting9 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>동전 0<h3>(정답률 : 53.047%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 N개의 동전의 가치가 오름 차순으로 주어지고, K원이 주어진다.<br/><br/>\r\n      이때 최소 돈전 갯수를 구하는 알고리즘을 구하는 것이다. 코드는 다음과 같다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      알고리즘은 간단하다 vector에 값을 받아두고, 오름차순으로 값을 받기 때문에 뒤에서부터 값을 나눠서 카운트를 해준다.<br/><br/>\r\n      몫이 0으로 나오면 인덱스를 낮추어 카운트를 다시 시작한다.<br/><br/>\r\n      </h4>\r\n      <h1>소수 구하기<h3>(정답률 : 27.295%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 소수를 구하는 문제이다. 이 문제의 경우 모든 반복문을 통과하면서 모두 찾아주는 방식은 시간초과가 뜨도록 되어있다.<br/><br/>\r\n      이를 해결하기 위해서 에라토스테네스의 체를 사용하였다. 개념은 <a href=\"https://ko.wikipedia.org/wiki/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98_%EC%B2%B4\">여기</a>\r\n      들어가보면 알 수 있다.<br/><br/>\r\n      이에 맞춰서 2의 배수는 전부 체크를 해주고, 다음으로 넘어간다. 3의 배수를 소수로하고 모든 3의 배수를 체크한다.<br/><br/>\r\n      이런 식으로 반복하다보면 범위 내의 소수를 빠른 시간에 구할 수 있다.<br/><br/>\r\n      이상 포스팅 끝.<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting9;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting10.jsx",["210","211"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting11.jsx",["212","213"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1072.PNG'\r\nimport Img2 from './img/1072_1.PNG'\r\nclass Posting11 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>게임<h3>(정답률 : 21.094%)</h3></h1>\r\n      <h4>\r\n      이 문제는 이분탐색을 하는 문제이다. 문제는 간단한 예시로 50판중에 25판을 이겼다고 가정하자. 이때 승률이 1%가 오를려면 몇판을 최소 이겨야하는지 찾는 문제이다.<br/><br/>\r\n      처음에는 단순히 모든 반복문을 돌면서 계산을 했고 당연하게 시간초과가 나왔다.<br/><br/>\r\n      시간 초과가 계속해서 나와 시간을 줄이기 위해서 이분 탐색을 생각해냈다.<br/><br/>\r\n      <h2>이분 탐색이란?</h2>\r\n      이분 탐색이란 탐색 범위를 두부분으로 나눠서 찾는 방식이다. 이렇게 하면 전부 탐색하는 것보다 훨씬 짧은 시간으로 값을 찾을 수 있다.<br/><br/>\r\n      다음은 이분 탐색을 하는 방법이다.<br/><br/>\r\n      <div className=\"code\">\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      <a href=\"https://velog.io/@ming/%EC%9D%B4%EB%B6%84%ED%83%90%EC%83%89Binary-Search\">사진출처</a><br/><br/>\r\n      1. 찾고자 하는 데이터가 정렬되어 있어야한다.<br/><br/>\r\n      2. begin값과 end값을 정의해준다.<br/><br/>\r\n      3. begin과 end의 중간인 mid값을 잡아준다.<br/><br/>\r\n      4. mid값과 구하고자하는 값을 비교한다.<br/><br/>\r\n         &nbsp;&nbsp;&nbsp;(이때 비교하는 값은 조건으로 코드상으로 볼때 정답 값과 비교하는 것이 아닌 조건문으로 조건에 맞게 찾아가는것이다.)<br/><br/>\r\n      5. mid보다 크면 begin = mid + 1을 해준다. 반대로 값이 낮으면 end = mid - 1을 해준다.<br/><br/>\r\n      6. 이렇게 값을 찾을때까지 2~4를 반복해 준다.<br/><br/>\r\n      </div><br/><br/>\r\n      코드는 다음과 같다.<br/><br/>\r\n      mid값을 end값을 수정하는 부분에 둔 이유는 퍼센트값이 넘어가는 지점에서 정답이 나오기 때문에 begin부분의 조건문에서가 아닌 end에서 넣어준다.<br/><br/>\r\n      이렇게 O(n)시간이 걸리는 문제를 O(log n)으로 시간을 단축하여 풀었다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      이상 포스팅 끝\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting11;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting6.jsx",["214"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1037.PNG'\r\n\r\nclass Posting6 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>약수<h3>(정답률 : 49.574%)</h3></h1>\r\n      <h4>이번 문제는 양수 A가 N의 진짜 약수가 되려면, N이 A의 배수이고, A가 1과 N이 아니어야 한다.<br/><br/>\r\n      어떤 수 N의 진짜 약수가 모두 주어질 때, N을 구하는 프로그램을 작성하시오.라는 문제이다. 생각해보면 매우 간단한 문제이다.<br/><br/>\r\n      약수의 개수가 짝수개 나오면 중간의 2개를 곱한 값이 N이 될것이고, 홀수일 경우 중간의 값을 제곱하면 N이 될것이다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      코드는 위와 같다.<br/><br/>\r\n      이 문제는 조금만 생각하면 금방 풀 수 있는 문제 코드만 봐도 금방 이해할 수 있다.<br/><br/>\r\n      이상 포스팅 끝\r\n\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting6;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting12.jsx",["215","216","217","218","219"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1260.png'\r\nimport Img2 from './img/1260_1.png'\r\nimport Img3 from './img/1260_2.png'\r\nimport Img4 from './img/1260_3.png'\r\nimport Img5 from './img/1260_4.png'\r\nclass Posting12 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>DFS와 BFS<h3>(정답률 : 33.430%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 DFS와 BFS를 구현하는 문제이다.<br/><br/>\r\n      주어진 값에 숫자가 작은 순서로 탐색을 하면되는 조건으로 문제를 풀면된다.<br/><br/>\r\n      코드만 보면 DFS와 BFS는 다음과 같다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/><br/><br/>\r\n      <h3>DFS란?</h3>\r\n      DFS는 Depth First Search의 약자로 해석하면 깊이우선탐색이라고 볼 수 있다.<br/><br/>\r\n      그래프가 주어지면 가장 깊은곳으로 들어가 탐색을 하고, 그다음 깊은곳, 그다음 깊은곳 ... 이렇게 반복하여 찾는것이다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      첫번째 시작 지점을 루트노드로 지정하고 시작노드에서 가장 멀리 떨어진 구간의 노드를 리프노드로하면 트리구조로 쉽게 이해할 수 있다.<br/><br/>\r\n      위 그림과 같이 깊은곳부터 탐색을 하게된다.<br/><br/>\r\n      이렇게 탐색된 그래프는 stack구조를 이용해서 순회를 하게 된다.<br/><br/>\r\n      순회를 하면 stack에 들어가는 순서 자체는 1-5-2-4-3-6로 들어가게된다.<br/><br/>\r\n      하지만 stack을 pop할때 순회로 인정되기때문에 1-2-3-4-5-6순으로 순회하게 되는 것이다.<br/><br/>\r\n      이를 스택구조로 보게 된다면 다음과 같다.<br/><br/>\r\n      <img src={Img3} className=\"code\"/><br/><br/>\r\n      <h3>BFS란?</h3>\r\n      BFS는 Breadth-first search의 약자로 DFS와는 약간의 차이가 있는데, 해석하면 넓이우선탐색이다.<br/><br/>\r\n      <img src={Img4} className=\"code\"/><br/><br/>\r\n      트리 구조로 놓았을 때, 넓이 부분을 순차적으로 탐색하면서 깊이를 내려가는 탐색방법이다.<br/><br/>\r\n      DFS에서 Stack을 사용한다면 BFS에서는 Queue를 사용하는데, 재밌는점은 알고리즘은 완전 같지만 단지 큐를 사용한다는 점이다.<br/><br/>\r\n      큐는 선입선출이기떄문에 큐에 들어가는 순서와 pop의 순서가 1-5-2-4-6-3으로 같다.<br/><br/>\r\n      그림으로 보면 다음과 같다.<br/><br/>\r\n      <img src={Img5} className=\"code\"/><br/><br/>\r\n      DFS와 BFS에서 스택과 큐에 값이 남았음에도 순회로 인정되지 않는 이유는 이미 이전에 방문한적이 있기 때문이다.<br/><br/>\r\n      이점은 코드를 짤때도 유의해서 꼭 visit부분을 체크해줘야한다.<br/><br/>\r\n      이상 포스팅 끝\r\n\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting12;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting2.jsx",["220","221"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting3.jsx",["222","223","224"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting3.jsx",["225","226"],"import React,{Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1018_1.PNG'\r\nimport Img2 from './img/1018_2.PNG'\r\nclass Posting3 extends Component{\r\n\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n        <h1>체스판 다시 칠하기<h3>(정답률 : 46.526%)</h3></h1>\r\n        <h4>\r\n        이번 문제는 단순 알고리즘 문제이다. 입력받은 체스판에서 8*8모양으로 추출한 후 체스판의 규격에 맞게<br/><br/>\r\n        색칠을 다시 해주고, 이렇게 색칠된 횟수를 계산하여 가장 적게 색칠할 수 있는 횟수를 찾는게 풀이이다.<br/><br/>\r\n        처음 문제를 보고, python을 활용하여 문제를 풀면 쉽게 풀릴 것으로 생각이 되었다.<br/><br/>\r\n        하지만 C++을 이용하여 문제를 풀어보았다.<br/><br/>\r\n        가장 먼저 떠오른 아이디어는 이미지처리에서 사용하는 필터의 개념이었다. 입력받은 값을 이미지의 값으로<br/><br/>\r\n        생각을 하고 필터가 돌면서 색칠해야하는 경우(처음이 검은색, 처음이 흰색)중 작은 값을 선택하고, 이전의<br/><br/>\r\n        최소값과 비교해 값을 가져가는 방식으로 해보았다.<br/><br/>\r\n        먼저 흰색, 검은색 보드를 선언해 주었다.<br/><br/>\r\n        <img src={Img1} className=\"code\"/><br/><br/>\r\n        이렇게 필터(보드)를 만들어 주고 각 이미지를 돌면서 비교를 한다.<br/><br/>\r\n        아래는 핵심 알고리즘이다.<br/><br/>\r\n        <img src={Img2} className=\"code\"/><br/><br/>\r\n        두가지 필터를 돌면서 최소값을 찾아주고, 이전의 최소값과 비교하여 최종값을 반환한다.<br/><br/>\r\n        문제 차제는 난이도가 어렵지않지많, 시간을 줄이기를 신경쓴다면 어렵게 풀수 있을것 같다.<br/><br/>\r\n        또 문제를 처음에 잘못읽어 어렵게 풀었는데, 다음부터는 문제를 잘 읽어야겠다. 이상 포스팅 끝<br/><br/>\r\n\r\n        </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting3\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting4.jsx",["227"],"import React,{Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1010.PNG'\r\n\r\nclass Posting4 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>다리 놓기<h3>(정답률 : 48.517%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 다리놓기 문제로 양쪽에 목적지를 갖고, 다리가 겹치지 않게 놓을 때의 경우의 수를 구하는 문제이다.<br/><br/>\r\n      문제를 읽었을 때는 어려워 보이지만 조금만 생각해보면 순열공식을 이용한다면 금방 풀 수 있는 문제이다.<br/><br/>\r\n      문제 조건이 0 &lt; N &lt;=M &lt; 30 이므로 조합공식인 mPn을 이용한다.<br/><br/>\r\n      이를 간단하게 풀면 M!/(M-N)!N! 로 볼 수 있다.<br/><br/>\r\n      아래는 알고리즘이다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      단순히 M!, (M-N)!, N!를 각각 따로 계산하면 오버플로가 발생하기 때문에 반복문을 돌 때 값을 나누는 작업을 동시에 해줘야한다.<br/><br/>\r\n      반복문을 돌면서 1부터 M을 곱하는 동시에 1부터 N과 1부터 M-N을 나눠 주는 작업을 반복문 한번을 돌면서 실행한다.<br/><br/>\r\n      문제가 요구하는게 빠른 계산이기 때문에 재귀함수와 같이 시간이 오래 걸리는 알고리즘은 가급적 피해주었다. 이상 포스팅 끝 <br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting4;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting7.jsx",["228","229","230","231","232","233"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting13.jsx",["234","235"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1325.PNG'\r\nimport Img2 from './img/1325_1.PNG'\r\nclass Posting12 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>효율적인 해킹<h3>(정답률 : 20.637%)</h3></h1>\r\n      <h4>\r\n      이 문제는 컴퓨터가 단방향으로 연결이 되어있으며, 하나의 컴퓨터가 해킹될 경우 그 컴퓨터가 연결된 모든 컴퓨터가 해킹이 되게된다.<br/><br/>\r\n      하나의 컴퓨터를 해킹했을 때,가장 많은 컴퓨터를 해킹할 수 있는 컴퓨터의 번호는 몇 번인지 찾는것이다.<br/><br/>\r\n      처음 문제를 보면 바로 떠오르는 것이 DFS이다. 각 컴퓨터를 노드로 놓고 각 노드마다 깊이를 찾아서 체크할 수 있기 때문이다.<br/><br/>\r\n      이전 포스팅에서 DFS에 대한 개념을 설명해놨으며, 이 개념을 이용해서 문제를 풀었다.<br/><br/>\r\n      DFS를 1번부터 N번째 컴퓨터까지 각각 값을 찾으면서 카운트를 하고, 카운트가 가장 클 경우 스택에 저장해 맨 마지막에 출력해주는 형식을 사용했다.<br/><br/>\r\n      코드는 다음과 같다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      저장 공간을 최소화 하기위해서 중복되는 값이 있을 경우를 체크하는 것은 스택을 이용해서 해주었다.<br/><br/>\r\n      DFS의 코드는 이전 포스팅과 같으며, 개념을 참고하고 싶으면 12번째 포스팅을 보기 바란다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      특별한 생각없이 단순 알고리즘을 이해하면 풀 수 있는 문제였다.<br/><br/>\r\n      이상 포스팅 끝\r\n\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting12;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\listOfContents.jsx",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\index.jsx",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting1.jsx",["236","237","238","239","240","241","242","243"],{"ruleId":"244","replacedBy":"245"},{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","severity":1,"message":"249","line":28,"column":60,"nodeType":"250","messageId":"251","endLine":30,"endColumn":16},{"ruleId":"252","severity":1,"message":"253","line":37,"column":52,"nodeType":"254","endLine":37,"endColumn":124},{"ruleId":"255","severity":1,"message":"256","line":43,"column":23,"nodeType":"257","messageId":"258","endLine":43,"endColumn":25},{"ruleId":"259","severity":1,"message":"260","line":49,"column":11,"nodeType":"254","endLine":49,"endColumn":67},{"ruleId":"255","severity":1,"message":"256","line":53,"column":23,"nodeType":"257","messageId":"258","endLine":53,"endColumn":25},{"ruleId":"255","severity":1,"message":"256","line":63,"column":23,"nodeType":"257","messageId":"258","endLine":63,"endColumn":25},{"ruleId":"259","severity":1,"message":"261","line":69,"column":11,"nodeType":"254","endLine":69,"endColumn":72},{"ruleId":"255","severity":1,"message":"256","line":73,"column":23,"nodeType":"257","messageId":"258","endLine":73,"endColumn":25},{"ruleId":"244","replacedBy":"262"},{"ruleId":"246","replacedBy":"263"},{"ruleId":"252","severity":1,"message":"253","line":13,"column":58,"nodeType":"254","endLine":13,"endColumn":131},{"ruleId":"252","severity":1,"message":"253","line":13,"column":58,"nodeType":"254","endLine":13,"endColumn":131},{"ruleId":"255","severity":1,"message":"256","line":9,"column":50,"nodeType":"257","messageId":"258","endLine":9,"endColumn":52},{"ruleId":"244","replacedBy":"264"},{"ruleId":"246","replacedBy":"265"},{"ruleId":"255","severity":1,"message":"256","line":9,"column":50,"nodeType":"257","messageId":"258","endLine":9,"endColumn":52},{"ruleId":"259","severity":1,"message":"266","line":23,"column":50,"nodeType":"254","endLine":23,"endColumn":64},{"ruleId":"255","severity":1,"message":"256","line":7,"column":50,"nodeType":"257","messageId":"258","endLine":7,"endColumn":52},{"ruleId":"267","severity":1,"message":"268","line":13,"column":7,"nodeType":"254","endLine":13,"endColumn":40},{"ruleId":"267","severity":1,"message":"268","line":23,"column":7,"nodeType":"254","endLine":23,"endColumn":41},{"ruleId":"269","severity":1,"message":"270","line":6,"column":8,"nodeType":"271","messageId":"272","endLine":6,"endColumn":12},{"ruleId":"267","severity":1,"message":"268","line":19,"column":9,"nodeType":"254","endLine":19,"endColumn":26},{"ruleId":"267","severity":1,"message":"268","line":23,"column":9,"nodeType":"254","endLine":23,"endColumn":26},{"ruleId":"267","severity":1,"message":"268","line":27,"column":9,"nodeType":"254","endLine":27,"endColumn":26},{"ruleId":"267","severity":1,"message":"268","line":29,"column":9,"nodeType":"254","endLine":29,"endColumn":26},{"ruleId":"267","severity":1,"message":"268","line":30,"column":9,"nodeType":"254","endLine":30,"endColumn":26},{"ruleId":"267","severity":1,"message":"268","line":15,"column":7,"nodeType":"254","endLine":15,"endColumn":40},{"ruleId":"244","replacedBy":"273"},{"ruleId":"246","replacedBy":"274"},{"ruleId":"267","severity":1,"message":"268","line":17,"column":7,"nodeType":"254","endLine":17,"endColumn":41},{"ruleId":"244","replacedBy":"275"},{"ruleId":"246","replacedBy":"276"},{"ruleId":"267","severity":1,"message":"268","line":14,"column":7,"nodeType":"254","endLine":14,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":16,"column":7,"nodeType":"254","endLine":16,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":20,"column":7,"nodeType":"254","endLine":20,"endColumn":41},{"ruleId":"244","replacedBy":"277"},{"ruleId":"246","replacedBy":"278"},{"ruleId":"267","severity":1,"message":"268","line":15,"column":7,"nodeType":"254","endLine":15,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":23,"column":7,"nodeType":"254","endLine":23,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":26,"column":7,"nodeType":"254","endLine":26,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":12,"column":7,"nodeType":"254","endLine":12,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":18,"column":7,"nodeType":"254","endLine":18,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":28,"column":7,"nodeType":"254","endLine":28,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":30,"column":7,"nodeType":"254","endLine":30,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":32,"column":7,"nodeType":"254","endLine":32,"endColumn":41},{"ruleId":"269","severity":1,"message":"279","line":4,"column":8,"nodeType":"271","messageId":"272","endLine":4,"endColumn":12},{"ruleId":"267","severity":1,"message":"268","line":13,"column":7,"nodeType":"254","endLine":13,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":14,"column":7,"nodeType":"254","endLine":14,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":22,"column":8,"nodeType":"254","endLine":22,"endColumn":42},{"ruleId":"267","severity":1,"message":"268","line":18,"column":7,"nodeType":"254","endLine":18,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":31,"column":7,"nodeType":"254","endLine":31,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":13,"column":7,"nodeType":"254","endLine":13,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":17,"column":7,"nodeType":"254","endLine":17,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":21,"column":7,"nodeType":"254","endLine":21,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":28,"column":7,"nodeType":"254","endLine":28,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":31,"column":7,"nodeType":"254","endLine":31,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":36,"column":7,"nodeType":"254","endLine":36,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":11,"column":7,"nodeType":"254","endLine":11,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":13,"column":7,"nodeType":"254","endLine":13,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":17,"column":7,"nodeType":"254","endLine":17,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":24,"column":7,"nodeType":"254","endLine":24,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":32,"column":7,"nodeType":"254","endLine":32,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":21,"column":9,"nodeType":"254","endLine":21,"endColumn":43},{"ruleId":"267","severity":1,"message":"268","line":24,"column":9,"nodeType":"254","endLine":24,"endColumn":43},{"ruleId":"267","severity":1,"message":"268","line":16,"column":7,"nodeType":"254","endLine":16,"endColumn":41},{"ruleId":"269","severity":1,"message":"270","line":6,"column":8,"nodeType":"271","messageId":"272","endLine":6,"endColumn":12},{"ruleId":"267","severity":1,"message":"268","line":18,"column":9,"nodeType":"254","endLine":18,"endColumn":43},{"ruleId":"267","severity":1,"message":"268","line":20,"column":9,"nodeType":"254","endLine":20,"endColumn":43},{"ruleId":"267","severity":1,"message":"268","line":24,"column":9,"nodeType":"254","endLine":24,"endColumn":43},{"ruleId":"267","severity":1,"message":"268","line":30,"column":9,"nodeType":"254","endLine":30,"endColumn":43},{"ruleId":"267","severity":1,"message":"268","line":31,"column":9,"nodeType":"254","endLine":31,"endColumn":43},{"ruleId":"267","severity":1,"message":"268","line":17,"column":7,"nodeType":"254","endLine":17,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":20,"column":7,"nodeType":"254","endLine":20,"endColumn":41},{"ruleId":"267","severity":1,"message":"268","line":18,"column":9,"nodeType":"254","endLine":18,"endColumn":42},{"ruleId":"267","severity":1,"message":"268","line":22,"column":9,"nodeType":"254","endLine":22,"endColumn":42},{"ruleId":"267","severity":1,"message":"268","line":26,"column":9,"nodeType":"254","endLine":26,"endColumn":42},{"ruleId":"267","severity":1,"message":"268","line":40,"column":9,"nodeType":"254","endLine":40,"endColumn":42},{"ruleId":"267","severity":1,"message":"268","line":45,"column":9,"nodeType":"254","endLine":45,"endColumn":42},{"ruleId":"267","severity":1,"message":"268","line":47,"column":9,"nodeType":"254","endLine":47,"endColumn":42},{"ruleId":"267","severity":1,"message":"268","line":49,"column":9,"nodeType":"254","endLine":49,"endColumn":42},{"ruleId":"267","severity":1,"message":"268","line":51,"column":9,"nodeType":"254","endLine":51,"endColumn":42},"no-native-reassign",["280"],"no-negated-in-lhs",["281"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-pascal-case","Imported JSX component Home_Page must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component My_Study must be in PascalCase or SCREAMING_SNAKE_CASE",["280"],["281"],["280"],["281"],"Imported JSX component React_study must be in PascalCase or SCREAMING_SNAKE_CASE","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-unused-vars","'Img4' is defined but never used.","Identifier","unusedVar",["280"],["281"],["280"],["281"],["280"],["281"],"'Img2' is defined but never used.","no-global-assign","no-unsafe-negation"]