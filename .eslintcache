[{"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\index.js":"1","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\App.js":"2","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\react_study\\index.js":"3","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\index.js":"4","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\listOfContents.js":"5","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\index.jsx":"6","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting2.jsx":"7","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting1.jsx":"8","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting1.jsx":"9","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting5.jsx":"10","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting6.jsx":"11","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting5.jsx":"12","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting7.jsx":"13","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting8.jsx":"14","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting9.jsx":"15","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting10.jsx":"16","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting11.jsx":"17","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting6.jsx":"18","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting12.jsx":"19","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting2.jsx":"20","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting3.jsx":"21","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting3.jsx":"22","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting4.jsx":"23","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting7.jsx":"24","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting13.jsx":"25","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\listOfContents.jsx":"26","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\index.jsx":"27","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting1.jsx":"28","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\listOfContents.jsx":"29","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting4.jsx":"30","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting14.jsx":"31","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting3.jsx":"32","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting4.jsx":"33","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting2.jsx":"34","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting5.jsx":"35","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Home_Page.js":"36","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Posting.js":"37","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\My_Study.js":"38"},{"size":150,"mtime":1611304067765,"results":"39","hashOfConfig":"40"},{"size":2499,"mtime":1613451462159,"results":"41","hashOfConfig":"40"},{"size":195,"mtime":1611838566165,"results":"42","hashOfConfig":"40"},{"size":1138,"mtime":1614837572742,"results":"43","hashOfConfig":"40"},{"size":1559,"mtime":1615097859383,"results":"44","hashOfConfig":"40"},{"size":1038,"mtime":1614151351833,"results":"45","hashOfConfig":"40"},{"size":2402,"mtime":1613451407995,"results":"46","hashOfConfig":"40"},{"size":1708,"mtime":1613451098677,"results":"47","hashOfConfig":"40"},{"size":2154,"mtime":1613451406351,"results":"48","hashOfConfig":"40"},{"size":1661,"mtime":1613451409145,"results":"49","hashOfConfig":"40"},{"size":1615,"mtime":1615100618358,"results":"50","hashOfConfig":"40"},{"size":2884,"mtime":1615100606714,"results":"51","hashOfConfig":"40"},{"size":1644,"mtime":1614065159152,"results":"52","hashOfConfig":"40"},{"size":2870,"mtime":1614067704076,"results":"53","hashOfConfig":"40"},{"size":1815,"mtime":1614069467835,"results":"54","hashOfConfig":"40"},{"size":1870,"mtime":1614144194423,"results":"55","hashOfConfig":"40"},{"size":2497,"mtime":1614144188790,"results":"56","hashOfConfig":"40"},{"size":1070,"mtime":1613451255250,"results":"57","hashOfConfig":"40"},{"size":2986,"mtime":1614147858179,"results":"58","hashOfConfig":"40"},{"size":1539,"mtime":1613451113715,"results":"59","hashOfConfig":"40"},{"size":3315,"mtime":1615477113763,"results":"60","hashOfConfig":"40"},{"size":2108,"mtime":1613451231086,"results":"61","hashOfConfig":"40"},{"size":1485,"mtime":1613451408511,"results":"62","hashOfConfig":"40"},{"size":3002,"mtime":1615100633143,"results":"63","hashOfConfig":"40"},{"size":1840,"mtime":1614419496382,"results":"64","hashOfConfig":"40"},{"size":426,"mtime":1615303210598,"results":"65","hashOfConfig":"40"},{"size":1059,"mtime":1614837932164,"results":"66","hashOfConfig":"40"},{"size":5098,"mtime":1615303015092,"results":"67","hashOfConfig":"40"},{"size":654,"mtime":1614148354979,"results":"68","hashOfConfig":"40"},{"size":3824,"mtime":1613451136418,"results":"69","hashOfConfig":"40"},{"size":3870,"mtime":1615099723901,"results":"70","hashOfConfig":"40"},{"size":3591,"mtime":1615103001788,"results":"71","hashOfConfig":"40"},{"size":6134,"mtime":1615303082477,"results":"72","hashOfConfig":"40"},{"size":3159,"mtime":1615366385357,"results":"73","hashOfConfig":"40"},{"size":314,"mtime":1615303225710,"results":"74","hashOfConfig":"40"},{"size":1484,"mtime":1615477466152,"results":"75","hashOfConfig":"40"},{"size":1403,"mtime":1614838059950,"results":"76","hashOfConfig":"40"},{"size":1327,"mtime":1613455619765,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"151ouc9",{"filePath":"81","messages":"82","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"92"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"92"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"92"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"92"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"92"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"92"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"115"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"100"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"115"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"92"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"92"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"92"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"115"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"92"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"92"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"92"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\index.js",[],["189","190"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\App.js",["191","192","193","194","195","196","197"],"import React, {Component} from 'react';\r\nimport './App.css'\r\nimport './bootstrap/css/bootstrap.css'\r\nimport My_Study from './My_Study';\r\nimport Posting from './Posting';\r\nimport Link from './Link';\r\nimport Home_Page from './Home_Page';\r\n\r\nclass App extends Component{\r\n  state={\r\n    site: 'Home_Page',\r\n    gotoSite: ['Home_Page','Posting','My_Study','Link'],\r\n    title:[\"App.js데이터입니다.\"],\r\n    text:[\"props를 이용하여 값을 보냅니다.\"],\r\n    img:[],\r\n  };\r\n  add_post = (title,text)=>{                      //상태를 변경함 백엔드 연동시 거기에 정보를 넣어야함\r\n    this.setState(\r\n      {\r\n        title: this.state.title.concat(title),\r\n        text: this.state.text.concat(text)\r\n      }\r\n    );\r\n  }\r\n  remove_post=(key)=>{                        //등록정보를 지울수있음\r\n    var index=this.state.title.indexOf(key)\r\n    this.setState({\r\n      title:this.state.title.slice(0,index).concat(this.state.title.slice(index+1, this.state.title.length)),\r\n      text:this.state.text.slice(0,index).concat(this.state.text.slice(index+1, this.state.text.length)),\r\n    });\r\n  }\r\n  Home_Page = (text) =>{\r\n    this.setState({\r\n      site: text\r\n    });\r\n  }\r\n  menu=this.state.gotoSite.map((site,key)=>{return <a className=\"button_css col-md-3\" onClick={()=>{this.Home_Page(site)}}>{site}</a>})\r\n\r\n  render(){\r\n    const htmlTitle = document.querySelector(\"title\"); // <title> 태그 찾기\r\n    htmlTitle.innerText = this.state.site;\r\n    \r\n    if(this.state.site=='Home_Page'){\r\n      return(\r\n        <div className=\"App\">\r\n          <nav className=\"main_header\">\r\n          {this.menu}\r\n          </nav>\r\n          <Home_Page add_post={this.add_post} state={this.state}/>\r\n        </div>\r\n      );\r\n    }\r\n    if(this.state.site=='Posting'){\r\n      return(\r\n        <div className=\"App\">\r\n          <nav className=\"main_header\">\r\n          {this.menu}\r\n          </nav>\r\n          <Posting/>\r\n        </div>\r\n      );\r\n    }\r\n    if(this.state.site=='My_Study'){\r\n      return (\r\n        <div className=\"App\">\r\n          <nav className=\"main_header\">\r\n          {this.menu}\r\n          </nav>\r\n          <My_Study remove_post={this.remove_post} state={this.state}/>\r\n        </div>\r\n      );\r\n    }\r\n    if(this.state.site=='Link'){\r\n      return(\r\n        <div className=\"App\">\r\n          <nav className=\"main_header\">\r\n          {this.menu}\r\n          </nav>\r\n          <Link/>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n",["198","199"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\react_study\\index.js",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\index.js",[],["200","201"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\listOfContents.js",[],["202","203"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\index.jsx",["204"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport { List } from './listOfContents';\r\n\r\nclass App extends Component{\r\n  change=(id,bid)=>{\r\n    if(document.getElementById(id).style.display ==\"block\"){\r\n      document.getElementById(id).style.display =\"none\";\r\n      document.getElementById(bid).innerText=\"보기\";\r\n    }\r\n    else{\r\n      document.getElementById(id).style.display =\"block\";\r\n      document.getElementById(bid).innerText=\"닫기\";\r\n    }\r\n  }\r\n    render(){\r\n      return(\r\n        <div>\r\n            {List.map((i,idx)=>{return(\r\n              <div>\r\n                <li className=\"list\">\r\n                  {i.title}\r\n                  <button className=\"button_box\" id={i.title} onClick = {()=>{this.change(`algorithm${idx}`, i.title)}}>\r\n                    보기\r\n                  </button>\r\n                </li>\r\n                <div id={`algorithm${idx}`} className=\"post_list\">{i.content}</div>\r\n              </div>\r\n            )})}\r\n        </div>\r\n      );\r\n    }\r\n}\r\nexport default App;\r\n",["205","206"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting2.jsx",["207","208"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport Img1 from './img/11650.PNG'\r\nimport Img2 from './img/11650_1.PNG'\r\nclass Posting2 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>좌표 정렬하기<h3>(정답률 : 48.847%)</h3></h1>\r\n      <h4>백준 11650번 문제로 주어진 좌표를 정렬하는 문제이다. 이 문제는 여러 방법으로 풀 수 있지만<br/><br/>\r\n      c++언어에서 제공해주는 vector와 pair기능 그리고 sort기능을 이용하면 아주 간단하게 풀 수 있다.<br/><br/>\r\n      코드는 다음과 같다.<br/><br/>\r\n      <img src={Img1}className=\"code\"/><br/><br/>\r\n      여기서 vector는 저번 포스팅에서 이미한 상태로 no.4344를 참고하면 된다. 이번 포스팅은 pair를 위주로 포스팅을 한다.<br/><br/>\r\n      pair는 header 파일이 utility이며 서로다른 자료형을 묶어두는 구조체이다.<br/><br/>\r\n      <div className=\"code\">#include&lt;utility&gt;</div><br/><br/> 이렇게 호출하여 사용하며 선언은 아래와 같다.\r\n      <div className=\"code\">std::pair&lt;&lt;Class T&gt;,&lt;Class T&gt;&gt; name;</div>\r\n      pair의 경우는 좀 특이하게 std::make_pair()라는 함수를 사용하여 값을 넣어주는데, 사용법은 아래와 같다.\r\n      <div className=\"code\">name=std::make_pair(v1,v2);</div><br/><br/>\r\n      위의 알고리즘 문제에서는 벡터의 자료형을 pair 자체로 두어 좌표를 벡터의 하나의 저장공간에 넣는 것이다.<br/><br/>\r\n      여기서 벡터는 sort함수를 통해서 문제에서 원하는대로 정렬이 가능하다.<br/><br/> 이때 난 저번 포스팅에서는 알지 못했던 sort의 기능을 하나 알았다.<br/><br/>\r\n      그건 정렬하는 방법을 사용자가 직접 정해주는 방법이었는데, 함수를 새로 정의해서 sort의 세번째 parameter에 넣어주면 그 함수의 반환값에 <br/><br/>따라서 자동으로 정렬되는 기능이다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      이렇게 비교해주는 함수를 사용후에 다음과 같이 코드를 작성하면,\r\n      <div className=\"code\">std::sort(v.begin(),v.end(),cmp);</div>\r\n      문제에서 원하는 값이 나오게 된다. 이상 포스팅 끝.\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting2\r\n",["209","210"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting1.jsx",["211","212","213","214","215","216"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport Img1 from './img/react_start.PNG'\r\nimport Img2 from './img/react_start1.PNG'\r\nimport Img3 from './img/react_start2.PNG'\r\nimport Img4 from './img/react_start3.PNG'\r\nimport Img5 from './img/react_start4.PNG'\r\nimport Img6 from './img/react_start5.PNG'\r\n\r\nclass Posting1 extends Component{\r\n    render(){\r\n      return(\r\n        <div className=\"left\">\r\n        <h1>리액트 사용법</h1>\r\n        <h4><br/>\r\n        <div className=\"code\">npm install -g create-react-app<br/><br/>\r\n        create-react-app my-app</div>(my-app은 원하는 이름으로)<br/><br/>\r\n        위의 두 명령어를 실행하면 리액트 파일이 생성된다. 파일을 생성하면 다음과 구조가 같다.<br/><br/>\r\n        <img src={Img1}/>\r\n        <br/><br/>\r\n        리액트가 잘 작동하는지 확인하기 위해 리액트 폴더에서<br/>\r\n        <div className=\"code\">npm run start</div> 명령어를 실행해본다.<br/><br/>\r\n        <img src={Img2}/><br/><br/>\r\n        이와 같이 나오면 제대로 설치가 완료된것이다.<br/><br/>\r\n        이후 src에 들어가서 app.js와 index.js를 제외한 나머지 파일을 지워준다.<br/><br/>\r\n        index.js의 파일의 경우는 다음과 같이 만들어 주고<br/><br/>\r\n        <img src={Img3}/><br/><br/>\r\n        app.js의 파일의 경우는 다음과 같이 만들어 준다.<br/><br/>\r\n        <img src={Img6}/><br/><br/>\r\n        <img src={Img5}/><br/><br/>\r\n        이제 개발을 시작하면 된다. (배경색은 원래는 흰색으로 글자만 나옵니다.)<br/><br/>\r\n        </h4>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nexport default Posting1;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting1.jsx",["217"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport Img from './img/4344.PNG'\r\n\r\nclass Posting1 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>평균은 넘겠지<h3>(정답률 : 37.470%)</h3></h1>\r\n      <h4>\r\n      백준 4344번 문제로 평균을 넘는 학생의 수를 구하는 것이다.<br/><br/>\r\n      이 문제는 배열로 간단히 풀 수 있지만 C++에서 사용하는 vector기능을 이용하여 풀어 보았다.<br/><br/>\r\n      코드는 다음과 같다.\r\n      <br/><br/>\r\n      <img src={Img} className='code'/>\r\n      <br/><br/>\r\n      vector는\r\n      <div className=\"code\">#include &lt;vector&gt;</div>\r\n      <br/><br/>\r\n      이렇게 불러와야 사용할 수 있고\r\n      <div className=\"code\">\r\n      std::vector&lt;vector&gt; v(number);\r\n      </div>\r\n      <br/><br/>\r\n      이렇게 선언했을 때, v는 변수명, number은 백터의 사이즈 int는 자료형에 해당한다.<br/><br/>\r\n      가장 많이 쓰이는 함수 위주로 정리를 하자면<br/><br/>\r\n      <div className=\"code\">\r\n      v.front();<br/><br/>\r\n      v.back();<br/><br/>\r\n      v.push_back(number);<br/><br/>\r\n      v.pop_back();<br/><br/>\r\n      v.begin();<br/><br/>\r\n      v.end();<br/><br/>\r\n      v.size();<br/><br/>\r\n      </div><br/><br/>\r\n      위주로 사용하고, 각각 벡터의 맨처음, 마지막 잠초, 마지막 원소뒤에 number삽입, 마지막 원소 제거,\r\n      벡터 처음과 마지막 가르키기(iterater), 벡터의 사이즈반환이다.<br/><br/>\r\n      <div className=\"code\">std::accumulate(start,end,0);</div><br/><br/>\r\n      의 경우에는 벡터의 평균을 구할 때, 총합을 구하기 위해서 사용하는 코드로\r\n      <div className=\"code\">#include&lt;numeric&gt;</div><br/><br/>\r\n      에서 불러와 사용하며, 백터의 시작, 끝, 자료형으로 생각하여 사용하면 된다.\r\n      이상 벡터에 대해 알아보았다.<br/><br/>이 문제의 경우 알고리즘적으로 어려운 것은 없으니 풀이는 생략한다.\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting1;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting5.jsx",["218"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1051.PNG'\r\n\r\nclass Posting5 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>숫자 정사각형<h3>(정답률 : 37.492%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 주어진 직사각형(N*M)안에 입력받은 정수가 모든 칸을 차지하고 있다.<br/><br/>\r\n      이 직사각형 안에서는 정사각형이 존재하는데, 이 정사각형의 꼭짓점에 숫자 4개가 모두 같은 정사각형 중에 가장 큰 정사각형의 크기를 구하면된다.<br/><br/>\r\n      예를 들어 다음과 같이 입력이 되었을 때, 9라는 값이 출력되어야 한다.<br/><br/>\r\n      <div className='code'>3 5<br/>42101<br/>22100<br/>22101</div>\r\n      이때 생각한 알고리즘은 이미지프로세싱에서 사용하는 필터의 개념을 생각 하였다.<br/><br/>\r\n      핵심 알고리즘의 코드는 다음과 같다.\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      N과 M 중 작은 숫자를 정사각형의 최대 크기로 잡고, 직사각형안을 순회한다.<br/><br/>\r\n      순회 후 조건에 맞는 정사각형이 없을 경우 변의 길이를 1씩 감소시키면서 처음부터 반복한다.<br/><br/>\r\n      이렇게 찾게되면 변의 길이를 제곱하여 반환을 하면, 원하는 값이 나온다.<br/><br/>\r\n      이번 문제는 어렵지는 않지만, 정사각형이 직사각형 안을 돌아 다닐때, 인덱스를 주의해야한다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting5;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting6.jsx",["219","220","221"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting5.jsx",["222","223","224"],"import React,{Component} from 'react'\r\nimport Img1 from './img/study3_1.PNG'\r\nimport Img2 from './img/study5_2.PNG'\r\nimport Img3 from './img/study3_2.PNG'\r\n\r\nclass Posting6 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>My_Study 페이지 만들기</h1>\r\n      <h4>\r\n      이번에는 저번 시간에 이어서 My_Study페이지를 생성해본다. 이전에 props로 My_Study에 state를 전달했었다.<br/><br/>\r\n      이 데이터를 활용해보기 위해 게시판처럼 만들었고 return 하는 코드는 다음과 같다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      <div className=\"code\">&lt;Parent data=&#123;this.state&#125;/&gt;</div>\r\n      만약 부모 컴포넌트에서 위와 같이 값을 전달했을 경우<br/><br/>\r\n      <div className=\"code\">this.props.data</div>\r\n      이런 식으로 데이터 사용이 가능하다.<br/><br/>\r\n      이렇게 전달 받은 state와 map함수를 통해서 title배열을 돌면서 전달 받은 값을 보여준다.<br/><br/>\r\n      key값은 제목을 this.state.state.text[index]로 내용을 보여준다. style은 display:\"none\"을 하여 보기 버튼을 누를때만 보이게 설정을 해둔다.<br/><br/>\r\n      보기와 제거 함수는 아래와 같다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      보기 함수의 경우 클릭마다 내용을 보여주고 가려주고를 하게 한다. 이는 id를 index나 key을 주어 그에 해당하는 div나 button이 반응하게 했다.<br/><br/>\r\n      remove함수의 경우 App.js에서 상태를 갖고있기 때문에 이벤트를 가져와서 사용한다. 코드는 다음과 같다.<br/><br/>\r\n      <img src={Img3} className=\"code\"/><br/><br/>\r\n      여기서는 데이터를 지울때 slice와 concat함수를 사용해 봤다.<br/><br/>\r\n      slice함수는 매개변수 2개를 사용하는데, 첫번째 인덱스에서 두번째 인덱스까지의 데이터를 가져오는 것이다.<br/><br/>\r\n      예를 들어 slice(0,10)일경우 배열 인덱스 0에서 9까지의 값을 가져온다.<br/><br/>\r\n      concat함수의 경우 뒤에 값을 붙혀주는 함수이다.<br/><br/>\r\n      이 두가지를 합쳐 slice(0,index)와 slice(index+1,array.length)를 concat으로 합쳐주면 index의 위치에 있는 값이 지워지게 되는것이다.<br/><br/>\r\n      indexOf 함수는 그 배열에 같은 값을 가진 위치의 인덱스를 반환한다.<br/><br/>\r\n      이렇게 My_Study페이지를 구현하였고, 이후에 추가적인 내용은 컴포넌트를 생성하여 import하는 식으로 진행할 계획이다.<br/><br/>\r\n      다음 포스팅은 Posting페이지를 만드는 과정을 설명해 본다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Posting6;\r\n",["225","226"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting7.jsx",["227"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from \"./img/18258_1.PNG\"\r\nclass Posting7 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>큐 2<h3>(정답률 : 30.82%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 라이브러리 큐를 사용하는 문제이다. 제한 시간이 1초이기 때문에 구현으로 답을 맞추기에는 시간초과가 뜨기 때문이다.<br/><br/>\r\n      문제에서 사용하는 명령어는 \"push\", \"pop\", \"size\", \"empty\", \"empty\", \"front\", \"back\"이렇게 6가지로 구현이 된다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      여기서 문자를 전부 비교해서 하는것은 속도를 느리게 하기때문에 문자열을 입력받으면 특정문자열의 문자를 비교하여 이런 식으로 명령어를 실행한다.<br/><br/>\r\n      이 문제에 사용된 queue의 명령어는 다음과 같다.<br/><br/>\r\n      <div className=\"code\">\r\n      queue.front();<br/><br/>\r\n      queue.back();<br/><br/>\r\n      queue.pop();<br/><br/>\r\n      queue.size();<br/><br/>\r\n      queue.empty();<br/><br/>\r\n      </div>\r\n      front()와 back()은 각각 큐의 맨 앞부분과 맨 뒷부분의 값을 참조하는 함수이고 pop()은 맨 앞의 값을 없애주는 함수이다.<br/><br/>\r\n      size()는 큐의 사이즈를 나타내고 empty()는 큐가 비어있으면 true, 차있으면 false를 반환한다.<br/><br/>\r\n      이를 적절히 활용하여 문제를 풀 수 있다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting7;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting8.jsx",["228","229","230","231"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from \"./img/11729.PNG\"\r\nimport Img2 from \"./img/11729_1.PNG\"\r\nimport Img3 from \"./img/11729_2.PNG\"\r\nimport Img4 from \"./img/11729_3.PNG\"\r\nclass Posting8 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>하노이탑 이동 순서<h3>(정답률 : 48.601%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 재귀를 활용한 하노이탑 이동순서를 맞추는 문제이다.<br/><br/>\r\n      <h3>재귀함수란?</h3>\r\n      재귀함수란 자기 자신을 호출하는 함수의 형태로 그 중 대표적인 예제로 하노이탑이 사용되곤 한다.<br/><br/>\r\n      재귀로 문제를 풀때는 '큰 문제롤 작은 문제로 나눠서 푼다'는 개념을 갖고 풀게 된다.<br/><br/>\r\n      코드는 다음과 같다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      우선 vector를 통해 재귀함수를 들어가서 이동할 때 마다 이동순서를 저장하게 된다.<br/><br/>\r\n      함수에는 탑의 층수(num), 현재위치(from), 통로(by), 최종위치(to) 총 네가지 매개변수를 갖는다.<br/><br/>\r\n      탈출 조건으로는 num이 1이되었을 때, 마지막으로 이동한 후에 함수를 종료 시킨다.<br/><br/>\r\n      탈출 상황이 아닐 때 생각이 여기서 핵심인데, 만약 탑이 5층이 있다고 가정을 하자.<br/><br/>\r\n      그럼 가장 큰원반이 중앙으로 가야한다. 그럴려면 남은 4개의 원반이 오른쪽으로 가야할 것이다.<br/><br/>\r\n      그럼다시 4개의 원반이 오른쪽으로 가려면 어떻게 해야할까?<br/><br/>\r\n      답은 다시 3개의 원반이 중앙에가 있고 4개의 원반중 가장큰 원반이 오른쪽에 있어야 할 것이다.<br/><br/>\r\n      이것을 계속 반복하다보면 결국 탑이 몇층인 것 과는 상관없이 옮길 수 있다.<br/><br/>\r\n      위의 함수를 보면 첫번째 (n-1,from, by, to)는 n-1개를 가장 오른쪽에 옮기는 코드<br/><br/>\r\n      <img src={Img2} className='code'/><br/><br/>\r\n      두번때 출력문은 마지막 제일큰 원반을 다른 기둥에 옮기는 코드<br/><br/>\r\n      <img src={Img3} className='code'/><br/><br/>\r\n      이후 마지막 (n-1,by,to,from)은 다른 곳으로 옮겼던 n-1개의 원반을 가장큰 원반에 들어가있던 기둥으로 옮겨주는 코드이다.<br/><br/>\r\n      <img src={Img4} className='code'/><br/><br/>\r\n      이와 같은 형태가 된다.<br/><br/>\r\n      재귀는 이렇게 복잡한 문제를 큰 틀로 봐서 간단하게 풀수있어 아주 강력한 무기가 된다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      <a href=\"https://www.youtube.com/watch?v=aPYE0anPZqI\">사진 출처</a>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting8;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting9.jsx",["232","233"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/11047.PNG'\r\nimport Img2 from './img/1929.PNG'\r\nclass Posting9 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>동전 0<h3>(정답률 : 53.047%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 N개의 동전의 가치가 오름 차순으로 주어지고, K원이 주어진다.<br/><br/>\r\n      이때 최소 돈전 갯수를 구하는 알고리즘을 구하는 것이다. 코드는 다음과 같다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      알고리즘은 간단하다 vector에 값을 받아두고, 오름차순으로 값을 받기 때문에 뒤에서부터 값을 나눠서 카운트를 해준다.<br/><br/>\r\n      몫이 0으로 나오면 인덱스를 낮추어 카운트를 다시 시작한다.<br/><br/>\r\n      </h4>\r\n      <h1>소수 구하기<h3>(정답률 : 27.295%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 소수를 구하는 문제이다. 이 문제의 경우 모든 반복문을 통과하면서 모두 찾아주는 방식은 시간초과가 뜨도록 되어있다.<br/><br/>\r\n      이를 해결하기 위해서 에라토스테네스의 체를 사용하였다. 개념은 <a href=\"https://ko.wikipedia.org/wiki/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98_%EC%B2%B4\">여기</a>\r\n      들어가보면 알 수 있다.<br/><br/>\r\n      이에 맞춰서 2의 배수는 전부 체크를 해주고, 다음으로 넘어간다. 3의 배수를 소수로하고 모든 3의 배수를 체크한다.<br/><br/>\r\n      이런 식으로 반복하다보면 범위 내의 소수를 빠른 시간에 구할 수 있다.<br/><br/>\r\n      이상 포스팅 끝.<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting9;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting10.jsx",["234","235"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1225.PNG'\r\nimport Img2 from './img/1225_1.PNG'\r\nclass Posting10 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>이상한 곱셈<h3>(정답률 : 37.947%)</h3></h1>\r\n      <h4>\r\n      이 문제는 A,B가 주어지면 A의 자리수하나를 B의 모든 자리수와 곱한값을 더하고 모든 A자리수에 대해서 반복을 해준다.<br/><br/>\r\n      알고리즘 자체는 단순하지만, A와 B의 자리수가 10000자리수로 int형의 범위를 넘어간다는 문제점이 발생하게된다.<br/><br/>\r\n      이를 해결하기위해 코드를 다음과 같이 짰다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      값을 문자열 형태로 받는 것이다.<br/><br/>이렇게 받게되면, 자리수와 상관없이 값을 계산할 수 있으며 주의할 점으로는 char형으로 나타나는 문자는\r\n       아스키코드값으로 받기때문에 계산하기전에 -48을 해주는 것을 잊지말자.\r\n       <br/><br/> 그리고 문자를 계산하다보면 int값을 넘어가게 되는데, 배열을 생성해주고\r\n       처음에는 인덱스 0번째에 값을 넣다가 10억을 넘어가게되면 인덱스 1번째에 넣어준다. 출력은 이 두 값을 이어서 출력해주면 해결이된다.<br/><br/>\r\n       <h3>아스키코드란?</h3>\r\n       아스키코드란 미국정보교환표준부호를 말하며 영문 알파벳을 사용하는 대표적인 문자 인코딩이다.<br/><br/>\r\n       <h2>아스키코드 표</h2>\r\n       <img src={Img2} className=\"code\"/><br/><br/>\r\n        위는 아스키코드 표로 문자와 대응되는 표기법들이다.<br/><br/>\r\n        이상 포스팅 끝\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting10;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting11.jsx",["236","237"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1072.PNG'\r\nimport Img2 from './img/1072_1.PNG'\r\nclass Posting11 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>게임<h3>(정답률 : 21.094%)</h3></h1>\r\n      <h4>\r\n      이 문제는 이분탐색을 하는 문제이다. 문제는 간단한 예시로 50판중에 25판을 이겼다고 가정하자. 이때 승률이 1%가 오를려면 몇판을 최소 이겨야하는지 찾는 문제이다.<br/><br/>\r\n      처음에는 단순히 모든 반복문을 돌면서 계산을 했고 당연하게 시간초과가 나왔다.<br/><br/>\r\n      시간 초과가 계속해서 나와 시간을 줄이기 위해서 이분 탐색을 생각해냈다.<br/><br/>\r\n      <h2>이분 탐색이란?</h2>\r\n      이분 탐색이란 탐색 범위를 두부분으로 나눠서 찾는 방식이다. 이렇게 하면 전부 탐색하는 것보다 훨씬 짧은 시간으로 값을 찾을 수 있다.<br/><br/>\r\n      다음은 이분 탐색을 하는 방법이다.<br/><br/>\r\n      <div className=\"code\">\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      <a href=\"https://velog.io/@ming/%EC%9D%B4%EB%B6%84%ED%83%90%EC%83%89Binary-Search\">사진출처</a><br/><br/>\r\n      1. 찾고자 하는 데이터가 정렬되어 있어야한다.<br/><br/>\r\n      2. begin값과 end값을 정의해준다.<br/><br/>\r\n      3. begin과 end의 중간인 mid값을 잡아준다.<br/><br/>\r\n      4. mid값과 구하고자하는 값을 비교한다.<br/><br/>\r\n         &nbsp;&nbsp;&nbsp;(이때 비교하는 값은 조건으로 코드상으로 볼때 정답 값과 비교하는 것이 아닌 조건문으로 조건에 맞게 찾아가는것이다.)<br/><br/>\r\n      5. mid보다 크면 begin = mid + 1을 해준다. 반대로 값이 낮으면 end = mid - 1을 해준다.<br/><br/>\r\n      6. 이렇게 값을 찾을때까지 2~4를 반복해 준다.<br/><br/>\r\n      </div><br/><br/>\r\n      코드는 다음과 같다.<br/><br/>\r\n      mid값을 end값을 수정하는 부분에 둔 이유는 퍼센트값이 넘어가는 지점에서 정답이 나오기 때문에 begin부분의 조건문에서가 아닌 end에서 넣어준다.<br/><br/>\r\n      이렇게 O(n)시간이 걸리는 문제를 O(log n)으로 시간을 단축하여 풀었다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      이상 포스팅 끝\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting11;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting6.jsx",["238"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1037.PNG'\r\n\r\nclass Posting6 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>약수<h3>(정답률 : 49.574%)</h3></h1>\r\n      <h4>이번 문제는 양수 A가 N의 진짜 약수가 되려면, N이 A의 배수이고, A가 1과 N이 아니어야 한다.<br/><br/>\r\n      어떤 수 N의 진짜 약수가 모두 주어질 때, N을 구하는 프로그램을 작성하시오.라는 문제이다. 생각해보면 매우 간단한 문제이다.<br/><br/>\r\n      약수의 개수가 짝수개 나오면 중간의 2개를 곱한 값이 N이 될것이고, 홀수일 경우 중간의 값을 제곱하면 N이 될것이다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      코드는 위와 같다.<br/><br/>\r\n      이 문제는 조금만 생각하면 금방 풀 수 있는 문제 코드만 봐도 금방 이해할 수 있다.<br/><br/>\r\n      이상 포스팅 끝\r\n\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting6;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting12.jsx",["239","240","241","242","243"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1260.png'\r\nimport Img2 from './img/1260_1.png'\r\nimport Img3 from './img/1260_2.png'\r\nimport Img4 from './img/1260_3.png'\r\nimport Img5 from './img/1260_4.png'\r\nclass Posting12 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>DFS와 BFS<h3>(정답률 : 33.430%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 DFS와 BFS를 구현하는 문제이다.<br/><br/>\r\n      주어진 값에 숫자가 작은 순서로 탐색을 하면되는 조건으로 문제를 풀면된다.<br/><br/>\r\n      코드만 보면 DFS와 BFS는 다음과 같다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/><br/><br/>\r\n      <h3>DFS란?</h3>\r\n      DFS는 Depth First Search의 약자로 해석하면 깊이우선탐색이라고 볼 수 있다.<br/><br/>\r\n      그래프가 주어지면 가장 깊은곳으로 들어가 탐색을 하고, 그다음 깊은곳, 그다음 깊은곳 ... 이렇게 반복하여 찾는것이다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      첫번째 시작 지점을 루트노드로 지정하고 시작노드에서 가장 멀리 떨어진 구간의 노드를 리프노드로하면 트리구조로 쉽게 이해할 수 있다.<br/><br/>\r\n      위 그림과 같이 깊은곳부터 탐색을 하게된다.<br/><br/>\r\n      이렇게 탐색된 그래프는 stack구조를 이용해서 순회를 하게 된다.<br/><br/>\r\n      순회를 하면 stack에 들어가는 순서 자체는 1-5-2-4-3-6로 들어가게된다.<br/><br/>\r\n      하지만 stack을 pop할때 순회로 인정되기때문에 1-2-3-4-5-6순으로 순회하게 되는 것이다.<br/><br/>\r\n      이를 스택구조로 보게 된다면 다음과 같다.<br/><br/>\r\n      <img src={Img3} className=\"code\"/><br/><br/>\r\n      <h3>BFS란?</h3>\r\n      BFS는 Breadth-first search의 약자로 DFS와는 약간의 차이가 있는데, 해석하면 넓이우선탐색이다.<br/><br/>\r\n      <img src={Img4} className=\"code\"/><br/><br/>\r\n      트리 구조로 놓았을 때, 넓이 부분을 순차적으로 탐색하면서 깊이를 내려가는 탐색방법이다.<br/><br/>\r\n      DFS에서 Stack을 사용한다면 BFS에서는 Queue를 사용하는데, 재밌는점은 알고리즘은 완전 같지만 단지 큐를 사용한다는 점이다.<br/><br/>\r\n      큐는 선입선출이기떄문에 큐에 들어가는 순서와 pop의 순서가 1-5-2-4-6-3으로 같다.<br/><br/>\r\n      그림으로 보면 다음과 같다.<br/><br/>\r\n      <img src={Img5} className=\"code\"/><br/><br/>\r\n      DFS와 BFS에서 스택과 큐에 값이 남았음에도 순회로 인정되지 않는 이유는 이미 이전에 방문한적이 있기 때문이다.<br/><br/>\r\n      이점은 코드를 짤때도 유의해서 꼭 visit부분을 체크해줘야한다.<br/><br/>\r\n      이상 포스팅 끝\r\n\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting12;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting2.jsx",["244","245"],"import React,{Component} from 'react'\r\nimport Img1 from './img/react_start2.PNG'\r\nimport Img2 from './img/react_start3.PNG'\r\nclass Posting2 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>리액트의 기본</h1>\r\n      <h4>이번 포스팅에서는 리액트의 기본적인 이해를 하기 위한 포스팅이다.<br/><br/>\r\n      리액트는 html과 js를 같이 사용할 수 있는 jsx를 사용하게 된다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      이와 같이 index.js에서 App이라는 컴포넌트를 불러와 랜더링하게 되는데, 이때 App의 코드는 아래와 같다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      여기서 return 부분에서 js와 html을 사용하게 되면 그에 맞게 렌더링을 하고 이를 index.js에서 다시 렌더링을 통해 웹페이지를 보여준다.<br/><br/>\r\n      리턴되는 컴포넌트는 하나여야하기 때문에 div태그와 같은 것으로 한번에 다 감싼후 그 안에서 코드를 짜는 것이 바람직한 것 같다.<br/><br/>\r\n      중괄호는 js코드나 문자열과 변수의 합과 같이 다양하게 사용할 수 있어 나중에 state나 props를 활용할때 유용하게 사용된다.<br/><br/>\r\n      이제부터 현재 보고있는 이 블로그를 개발하면서 공부하게된 내용들을 포스팅해 나갈 계획이다.<br/><br/> 이상 포스팅 끝<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting2;\r\n",["246","247"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting3.jsx",["248","249","250","251","252"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting3.jsx",["253","254"],"import React,{Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1018_1.PNG'\r\nimport Img2 from './img/1018_2.PNG'\r\nclass Posting3 extends Component{\r\n\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n        <h1>체스판 다시 칠하기<h3>(정답률 : 46.526%)</h3></h1>\r\n        <h4>\r\n        이번 문제는 단순 알고리즘 문제이다. 입력받은 체스판에서 8*8모양으로 추출한 후 체스판의 규격에 맞게<br/><br/>\r\n        색칠을 다시 해주고, 이렇게 색칠된 횟수를 계산하여 가장 적게 색칠할 수 있는 횟수를 찾는게 풀이이다.<br/><br/>\r\n        처음 문제를 보고, python을 활용하여 문제를 풀면 쉽게 풀릴 것으로 생각이 되었다.<br/><br/>\r\n        하지만 C++을 이용하여 문제를 풀어보았다.<br/><br/>\r\n        가장 먼저 떠오른 아이디어는 이미지처리에서 사용하는 필터의 개념이었다. 입력받은 값을 이미지의 값으로<br/><br/>\r\n        생각을 하고 필터가 돌면서 색칠해야하는 경우(처음이 검은색, 처음이 흰색)중 작은 값을 선택하고, 이전의<br/><br/>\r\n        최소값과 비교해 값을 가져가는 방식으로 해보았다.<br/><br/>\r\n        먼저 흰색, 검은색 보드를 선언해 주었다.<br/><br/>\r\n        <img src={Img1} className=\"code\"/><br/><br/>\r\n        이렇게 필터(보드)를 만들어 주고 각 이미지를 돌면서 비교를 한다.<br/><br/>\r\n        아래는 핵심 알고리즘이다.<br/><br/>\r\n        <img src={Img2} className=\"code\"/><br/><br/>\r\n        두가지 필터를 돌면서 최소값을 찾아주고, 이전의 최소값과 비교하여 최종값을 반환한다.<br/><br/>\r\n        문제 차제는 난이도가 어렵지않지많, 시간을 줄이기를 신경쓴다면 어렵게 풀수 있을것 같다.<br/><br/>\r\n        또 문제를 처음에 잘못읽어 어렵게 풀었는데, 다음부터는 문제를 잘 읽어야겠다. 이상 포스팅 끝<br/><br/>\r\n\r\n        </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting3\r\n",["255","256"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting4.jsx",["257"],"import React,{Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1010.PNG'\r\n\r\nclass Posting4 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>다리 놓기<h3>(정답률 : 48.517%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 다리놓기 문제로 양쪽에 목적지를 갖고, 다리가 겹치지 않게 놓을 때의 경우의 수를 구하는 문제이다.<br/><br/>\r\n      문제를 읽었을 때는 어려워 보이지만 조금만 생각해보면 순열공식을 이용한다면 금방 풀 수 있는 문제이다.<br/><br/>\r\n      문제 조건이 0 &lt; N &lt;=M &lt; 30 이므로 조합공식인 mPn을 이용한다.<br/><br/>\r\n      이를 간단하게 풀면 M!/(M-N)!N! 로 볼 수 있다.<br/><br/>\r\n      아래는 알고리즘이다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      단순히 M!, (M-N)!, N!를 각각 따로 계산하면 오버플로가 발생하기 때문에 반복문을 돌 때 값을 나누는 작업을 동시에 해줘야한다.<br/><br/>\r\n      반복문을 돌면서 1부터 M을 곱하는 동시에 1부터 N과 1부터 M-N을 나눠 주는 작업을 반복문 한번을 돌면서 실행한다.<br/><br/>\r\n      문제가 요구하는게 빠른 계산이기 때문에 재귀함수와 같이 시간이 오래 걸리는 알고리즘은 가급적 피해주었다. 이상 포스팅 끝 <br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting4;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting7.jsx",["258","259","260","261","262","263"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport Img1 from './img/study6_1.PNG'\r\nimport Img2 from './img/study6_2.PNG'\r\nimport Img3 from './img/study6_3.PNG'\r\nimport Img4 from './img/study6_4.PNG'\r\nimport Img5 from './img/study6_5.PNG'\r\nimport Img6 from './img/study6_6.PNG'\r\n\r\nclass Posting1 extends Component{\r\n    render(){\r\n      return(\r\n        <div className=\"left\">\r\n        <h1>묘듈화해보기</h1>\r\n        <h4>\r\n        이번 포스팅에서는 메뉴창이 여러개 늘어났을 때 코드가 쓸대없이 많이 늘어나는 것을 방지하기 위해서 모듈화를 해볼것이다.<br/><br/>\r\n        우선 이 블로그 기본구조가 모든 창은 컴포넌트로 각각의 jsx파일을 갖고있기 때문에 모든 jsx파일을 불러올때 한번에 묶어서 불러올수 있도록 다음과 같이 listOfContents.jsx파일을 생성해 준다.<br/><br/>\r\n        <img src={Img1} className=\"code\"/><br/><br/>\r\n        이렇게 생성한 파일안에 모든 포스팅.jsx파일을 import후에 List로 묶어서 export해준다. 코드는 다음과 같다.<br/><br/>\r\n        <img src={Img2} className=\"code\"/><br/><br/>\r\n        이제 listOfContents파일을 import하게되면 List부분이 모두 호출하게 된다. List는 모든 포스팅을 컴포넌트 형식으로 갖고있다.<br/><br/>\r\n        이를 활용하면 아래처럼 필요없는 코드를 수정할 수 있다. 두 코드는 같은 코드이다.\r\n        <div style={{display:\"flex\"}}><br/><br/>\r\n        <img src={Img3} className=\"code\"/>\r\n        <div className=\"code\">import &#123; List &#125; from './listOfContents'</div>\r\n        </div>\r\n        다음은 List를 호출한 후 활용하면 끝이나게 된다.<br/><br/>\r\n        활용법은 간단하다. 그냥 List가 listOfContents에서 불러온 List그대로 생각하여 map함수를 사용하면 코드를 줄일 수 있다.<br/><br/>\r\n        아래는 수정 전 코드와 수정 후 코드이며, 둘다 똑같이 작동을 한다.<br/><br/>\r\n        <img src={Img5} className=\"code\"/><br/><br/>\r\n        <img src={Img6} className=\"code\"/><br/><br/>\r\n        여기서 주의할 점은 id값을 잘 줘야한다는 것이다.<br/><br/>\r\n        처음에 map함수에서 부여해주는 index값을 그대로 사용했다가 알고리즘에서 사용한 id값이 겹친다는 것을 알았다. 코드상에서는 id가 떨저여있어 문제가 없다고 생각하여 사용했지만\r\n        실제로는 같은 페이지에서 작동을 하기때문에 id값의 충돌이 일어난 것이다. 다음에는 이런 실수가 없도록 하자.<br/><br/>\r\n        이제 listOfContents에서 import만 해주면 생성한 페이지를 바로 렌더링할 수 있다.<br/><br/>\r\n        다음 포스팅은 리액트앱을 깃허브에 배포하는 방법을 포스팅 하겠다.<br/><br/>\r\n        이상 포스팅 끝<br/><br/>\r\n\r\n        </h4>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nexport default Posting1;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting13.jsx",["264","265"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1325.PNG'\r\nimport Img2 from './img/1325_1.PNG'\r\nclass Posting12 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>효율적인 해킹<h3>(정답률 : 20.637%)</h3></h1>\r\n      <h4>\r\n      이 문제는 컴퓨터가 단방향으로 연결이 되어있으며, 하나의 컴퓨터가 해킹될 경우 그 컴퓨터가 연결된 모든 컴퓨터가 해킹이 되게된다.<br/><br/>\r\n      하나의 컴퓨터를 해킹했을 때,가장 많은 컴퓨터를 해킹할 수 있는 컴퓨터의 번호는 몇 번인지 찾는것이다.<br/><br/>\r\n      처음 문제를 보면 바로 떠오르는 것이 DFS이다. 각 컴퓨터를 노드로 놓고 각 노드마다 깊이를 찾아서 체크할 수 있기 때문이다.<br/><br/>\r\n      이전 포스팅에서 DFS에 대한 개념을 설명해놨으며, 이 개념을 이용해서 문제를 풀었다.<br/><br/>\r\n      DFS를 1번부터 N번째 컴퓨터까지 각각 값을 찾으면서 카운트를 하고, 카운트가 가장 클 경우 스택에 저장해 맨 마지막에 출력해주는 형식을 사용했다.<br/><br/>\r\n      코드는 다음과 같다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      저장 공간을 최소화 하기위해서 중복되는 값이 있을 경우를 체크하는 것은 스택을 이용해서 해주었다.<br/><br/>\r\n      DFS의 코드는 이전 포스팅과 같으며, 개념을 참고하고 싶으면 12번째 포스팅을 보기 바란다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      특별한 생각없이 단순 알고리즘을 이해하면 풀 수 있는 문제였다.<br/><br/>\r\n      이상 포스팅 끝\r\n\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting12;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\listOfContents.jsx",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\index.jsx",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting1.jsx",["266","267","268","269"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport Img1 from './img/1_1.PNG'\r\nimport Img2 from './img/1_2.PNG'\r\nimport Img3 from './img/1_3.PNG'\r\nimport Img4 from './img/1_4.PNG'\r\nclass Posting1 extends Component{\r\n    render(){\r\n      return(\r\n        <div className=\"left\">\r\n        <h1>kNN</h1>\r\n        <h4>\r\n        kNN은 k-Nearest Neighbors Classifier의 약자로 특정 데이터가 새로 주어졌을 때, 이전의 집계 되어있는 데이터들의 수치적인 거리를 이용해 새로 들어온 데이터가 어느 클래스인지 구별해주는 방법이다.<br/><br/>\r\n        <img src={Img1}className=\"code\"/><br/><br/>\r\n        이와 같은 상태로 빨간색 점과 파란색 점이 이전에 있던 데이터라고 생각을 하자.<br/><br/>\r\n        그럼 여기서 새로 들어온 검은색 점은 어떻게 분류가 될까???<br/><br/>\r\n        정답은 k(주변을 검색하는 점의 갯수)에 따라 다르게 나올 수 있다. 아래는 k가 3일 경우이다.<br/><br/>\r\n        <img src={Img2}className=\"code\"/><br/><br/>\r\n        k에서 가장 가까운 점 3개를 보자. 빨간색 1개 파란색 2개라는 결과를 볼 수 있다. 그럼 새로들어온 점은 어디로 갈까?<br/><br/>\r\n        답은 간단하다 바로 파란점으로 분류가 될 것이다!<br/><br/>\r\n        그런데 k가 만약 3이 아닌 7이라면??<br/><br/>\r\n        <img src={Img3}className=\"code\"/><br/><br/>\r\n        그림을 보면 빨간색 4개 파란색 3개가 되어있다는 것을 볼 수 있다.<br/><br/>\r\n        그럼 이 검은색 점은 빨간색으로 분류가 될 것이다! 단수히 k를 조절하는 거에서도 차이를 보이게 된다.<br/><br/>\r\n        이 처럼 kNN은 주변의 값을 이용해서 자신이 어디로 갈 것인지를 분류하는 기법이다.<br/><br/>\r\n        이렇게 단순하고 매우 좋아보이는 기법에도 단점은 존재한다.<br/><br/>\r\n        가장 간단하게 생각할 수 있는것이 만약 들어오는 데이터가 거리(수치)가 아닌 문자와 같은 것들이라면??<br/><br/>\r\n        해답은 '원핫인코딩'이라는 기법이다. 이 기법은 kNN 기법이 아닌 데이터를 전처리하는 방법이다. 각 테이터를 categorical한 방법으로 나누는 것이다.<br/><br/>\r\n        여기서 주의할 점은 예를 들어 '학생', '선생', '부모'라는 항목이 들어오면 각각을 1,2,3으로 나누는 것이 아닌 아래와 같이 처리를 해야한다.\r\n        <div className=\"code\">학생  0/0/1<br/>선생 0/1/0<br/>부모 1/0/0</div><br/><br/>\r\n        그 이외의 다른 문제점은 간단한 예제로 축구를 생각을 해보자. 어떤 선수가 뛰는 거리와 평소의 골 횟수를 이용해 이번 시즌 좋은 성적을 받을지를 예측하고 싶다.<br/><br/>\r\n        그런데 생각해보자 뛰는게 한경기에 1000m라고 가정을 하고 골 넣는 횟수가 0.5회라고 데이터가 들어왔다.<br/><br/>\r\n        이 선수 뿐만 아닌 다른 선수들도 1~2000m를 뛰고 0.2~1.2정도의 데이터를 가지고 들어온다. 과연 이런 데이터에서 골을 넣는 횟수가 kNN에서 큰 영향을 미칠까 아니면 뛴 거리가 더 많은 영향을 미칠까?<br/><br/>\r\n        실제로는 골넣는 횟수가 더 중요하지만 뛴 횟 거리가 더 크고 오히려 골 횟수는 거의 중요하지 않는 수준으로 데이터를 분석하게 된다.<br/><br/>\r\n        이런 경우를 방지하기 위한 해결법은 normalization을 사용하는 방법이다. 간단하게 말하면 모든 항목에 대한 평균을 0 표준편차를 1로 정규화를 시켜 모든 항목의 중요도를 같게 만드는 것과 같다.<br/><br/>\r\n        <img src={Img4}className=\"code\"/><br/><br/>\r\n        <a href=\"http://hleecaster.com/ml-normalization-concept/\">사진출처</a><br/><br/>\r\n        위 그림은 정규화하기 전과 정규화를 한 후의 사진이다.\r\n        정규화 말고도 각 거리마다 가중치를 줘서 계산해 주는 방법도 있다. 이 방법은 k=5일 경우 파란색이 2개 빨간색이 3개로 빨간색이 되어야하는 경우라고 보자.<br/><br/>\r\n        근데 만약 파란색의 경우 거리가 1이고 빨간색의 경우 거리가 100이면 과연 빨간색이라고 분류할 수 있을까? 이를 방지 하기위해 가중치를 주어 계산하는 방법도 있다.<br/><br/>\r\n        <h3>R^2</h3>\r\n        R^2란\r\n        <div className=\"code\">(타깃-예측)^2의 합<br/>ㅡㅡㅡㅡㅡㅡㅡㅡㅡ<br/>(타깃-평균)^2의 합</div><br/><br/>이며 이는 모델이 얼마나 잘 학습되었느냐를 확인해주는 지표이다. 이 값이 1에 까울 수록 더 좋은 모델이라고 볼 수있다.\r\n        하지만 무조건 1에 가깝다고 좋은 것은 아니다. 만약 train의 R^2이 test보다 낮으면 잘 학습이 되지 못했다고 볼 수 있다.<br/><br/>\r\n        이상 포스팅 끝<br/><br/>\r\n        </h4>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nexport default Posting1;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\listOfContents.jsx",[],["270","271"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting4.jsx",["272","273","274","275","276"],"import React,{Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/study2_1.PNG'\r\nimport Img2 from './img/study2_2.PNG'\r\nimport Img3 from './img/study2_3.PNG'\r\nimport Img4 from './img/study2_4.PNG'\r\nimport Img5 from './img/study2_5.PNG'\r\n\r\nclass Posting4 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>Home_Page만들기</h1>\r\n      <h3>map함수와 페이지 제목바꾸기</h3>\r\n      <h4>\r\n      Home_Page만들기에 앞서서 Home_Page와 별개로 저번 포스팅의 map함수와 htmlTitle.innerText에 대해 설명하겠다.<br/><br/>\r\n      map함수의 경우 state에 list값이 많을 경우에 중복된 코드 방지에 사용하기에 적합하다.<br/><br/>\r\n      사용법은 다음과 같다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      이렇게 this.state.value의 값을 map함수를 통해 호출하는 것이다. 갯수가 적을 때는 문제가없지만, list가 셀수없이 늘어나면 아주 효율적인 코드이다.<br/><br/>\r\n      e가 value에 있는 리스트의 값을 하나씩 돌면서 모든 값을 호출해 주는것을 볼 수 있다.<br/><br/>\r\n      다음은 htmlTitle.innerText코드이다. 이는 메뉴창 이동마다 홈페이지 타이틀을 변경해주는 코드이고 사용법은 다음과 같다.<br/><br/>\r\n      <div className=\"code\">\r\n      const htmlTitle = document.querySelector(\"title\");<br/><br/>\r\n      htmlTitle.innerText = this.state.site;</div><br/><br/>\r\n      htmlTitle이라는 변수에 title아이디 값을 가진 쿼리 엘리먼트를 가져와 저장한다.<br/><br/>\r\n      그리고 htmlTitle.innerText를 이용해서 상태가 변할때마다 값을 변경해준다.<br/><br/>\r\n      다음은 홈페이지를 만드는 코드이다.<br/><br/>\r\n      <img src={Img3} className=\"code\"/><br/><br/>\r\n      먼저 블로그의 기본적인 설명으로 시작하여, 홈페이지에는 리액트에 여러가지 공부에서 활용할 것이며 My_Study와 연동하여 쓸 것으로 처음에는 props를 이해하기 위해\r\n      값을 props로 My_Study에 보내서 값을 확인 할 수 있게 하였다.<br/><br/>\r\n      <img src={Img4} className=\"code\"/><br/><br/>\r\n      getElementById함수로 title과 text부분의 값들을 가져와 주고, 이를 add_post함수를 통해 보내주게 되는것 이다. add_post의 경우 props를 통해 App.js에서 보내준 함수이다.<br/><br/>\r\n      <img src={Img5} className=\"code\"/><br/><br/>\r\n      App.js에서 데이터를 관리하며 이 데이터는 Home_Page에서 직접관리할 수 없다.<br/><br/>\r\n      이 데이터를 수정하기 위한 방법은 App.js에서 만든 add_post를 Home_Page에 보내서 관리를 해줘야한다.<br/><br/>\r\n      Home_Page에서 만든 함수는 App.js에서 받은 데이터를 직접 수정할 수 없기 때문에 App.js에서 데이터를 관리하는 함수를 받아 간접적으로 수정하는 방식이다.<br/><br/>\r\n      add_post함수는 App.js에 있는 state 값에 concat함수를 통해 리스트를 입력받는대로 늘려준다.<br/><br/>\r\n      이렇게 App.js에 추가된 데이터는 다시 props로 My_Study에 값을 보내준다.<br/><br/>\r\n      Home_Page.js에서 App.js로 App.js에서 My_Study.js로 입력한 값을 보내주게 된다.<br/><br/>\r\n      <div className=\"code\">&lt;Home_Page add_post=&#123;this.add_post&#125;state=&#123;this.state&#125;/&gt;</div>\r\n      이런 코드로 this.add_post를 My_Study컴포넌트에 메세지로 보내준다.<br/><br/>\r\n      다음 포스팅은 이렇게 보낸 데이터를 받아 My_Study에서 보여주고 관리하는 방법을 포스팅한다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting4;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting14.jsx",["277","278","279","280","281"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1991_1.PNG'\r\nimport Img2 from './img/1991_2.PNG'\r\nimport Img3 from './img/1991_3.PNG'\r\nimport Img4 from './img/1991_4.PNG'\r\nimport Img5 from './img/1991_5.PNG'\r\nclass Posting12 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>트리 순회<h3>(정답률 : 63.457%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 자료구조인 트리를 구현하는 문제이다.<br/><br/>\r\n      각 트리의 자식이 왼쪽 오른쪽이 주어지고, 전위, 중위, 후위 순회를 돌면서 탐색한 순서를 출력하는 문제이다.<br/><br/>\r\n      <h3>트리 구조란?</h3>\r\n      트리 구조의 기본 구성은 다음과 같다.\r\n      <div className=\"code\">\r\n      루트(root) 노드 : 부모가 없는 노드, 트리는 루트 노드가 하나이다.<br/><br/>\r\n      리프(leaf) 노드 : 자식이 없는 노드, '단말 노드'또는 '잎 노드'라고 부른다.<br/><br/>\r\n      내부(internal) 노드 : 리프 노드가 아닌 노드이다.<br/><br/>\r\n      </div>\r\n      가장 기본 구성은 위 세가지이며, 이렇게 뻗어 나가는 노드는 마치 나무가 뻗아가는 모양과 닮아있다.<br/><br/>\r\n      <img src={Img1} class=\"code\"/><br/><br/>\r\n      이런 형태가 가장 일반적으로 자식노드의 경우 여러개가 될 수 있지만, 2개를 사용하는 이진트리가 가장 많이 쓰인다.<br/><br/>\r\n      그림처럼 연결리스트를 이용하여 완벽하게 저런 구조를 사용할 수는 있지만, 배열을 이용해서도 충분히 구현을 할 수가 있다.<br/><br/>\r\n      이번 문제는 배열로 구현을 해보았다.<br/><br/>\r\n      각각 전위, 중위, 후위 순회를 재귀적으로 코드를 작성하였다.<div/><div/>\r\n      <h3>순회란?</h3>\r\n      기본적으로 이진트리에서 순회를 하는 순서가 전위 중위 후위 순회로 나뉘는데, 먼저 전위 순회란 노드를 방문하고 왼쪽 서브 트리를 방문, 오른쪽 서브 트리를 방문하는 순이다.<div/><div/>\r\n      보기쉽게하면<div/><div/>\r\n      <h2>전위 순회</h2>\r\n      <div className=\"code\">\r\n      1. 노드를 방문한다.<div/><div/>\r\n      2. 왼쪽 서브트리를 방문한다.<div/><div/>\r\n      3. 오른쪽 서브트리를 방문한다.<div/><div/>\r\n      </div>\r\n      <div/><div/>\r\n      이런 구조가 되며, 중위, 후위의 경우 순서만 다르고 큰 차이는 없다.<div/><div/>\r\n      <h2>중위 순회</h2>\r\n      <div className=\"code\">\r\n      1. 왼쪽 서브트리를 방문한다.<div/><div/>\r\n      2. 노드를 방문한다.<div/><div/>\r\n      3. 오른쪽 서브트리를 방문한다.<div/><div/>\r\n      </div>\r\n      <h2>후위 순회</h2>\r\n      <div className=\"code\">\r\n      1. 왼쪽 서브트리를 방문한다.<div/><div/>\r\n      2. 오른쪽 서브트리를 방문한다.<div/><div/>\r\n      3. 노드를 방문한다.<div/><div/>\r\n      </div>\r\n      위의 세가지 순회를 잘보면 재귀적으로 순회를 한다는 것을 알수있으며, 아래와 같이 코드가 나올수 있다.<div/><div/>\r\n      <div class='code' style={{display:\"flex\"}}>\r\n      <img src={Img2} class=\"code\"/>\r\n      <img src={Img3} class=\"code\"/>\r\n      </div>\r\n      <div class='code' style={{display:\"flex\"}}>\r\n      <img src={Img4} class=\"code\"/>\r\n      <img src={Img5} class=\"code\"/>\r\n      </div>\r\n      일단 트리배열의 경우 아스키코드로 값을 받아서 저장공간을 최소화하기 위해서 생성과 입력, 참조에서 -65 를 해주었다.<div/><div/>\r\n      이차원 배열에서 row부분을 부모노드로, col부분을 자식노드로 생각하여 코드를 작성하였다.<div/><div/>\r\n      이상 포스팅 끝\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting12;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting3.jsx",["282","283"],"import React, {Component} from 'react'\r\nimport Img1 from './img/2-1.PNG'\r\nimport Img2 from './img/2-2.PNG'\r\nclass Posting2 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>Decision Tree-1</h1>\r\n      <h4>\r\n      Decision Tree란 해석하면 '결정 트리'로 트리구조처럼 뻗어가면서 데이터를 분류해주는 트리이이다.<br/><br/>\r\n      IF-THEN 방식을 기본으로하며, 명확한 기준이 존재하기 때문에 설명력이 매우 높은 머신러닝 알고리즘이다.<br/><br/>\r\n      기본적으로 트리구조를 따르기때문에 재귀성이 강하며, n차원 그래프로 나타낼 경우 축에 직교하여 클래스를 구분하게된다.<br/><br/>\r\n      이전의 kNN과는 다르게 oulier와 missing value에 큰 영향을 받지않는다는 장점이있다.<br/><br/>\r\n      다음은 결정트리의 예시이다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      그림을 보면 알겠지만, 내부노드는 모두 input값을 분류해주는 input값이고, 리프노드는 각각의 class로 분류된 output값이다.<br/><br/>\r\n      만약 위 그림이 학습된 모델이라고 가정을 한다면 아래와 같은 데이터가 주어진다면 어디로 분류가 될까?<br/><br/>\r\n      <div className=\"code\">\r\n      1. Number of family members = 4<br/><br/>\r\n      2. Salay = 10000<br/><br/>\r\n      3. is married? = yes\r\n      </div><br/><br/>\r\n      정답은 3BHK이고 아래처럼 알고리즘이 형성된다.\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      명확한 기준을 가지고 구분하기 위해서는 차원축에 직교일 수 밖에 없다.<br/><br/>\r\n      차원축에 직교하게 데이터를 분류하기 위해서는 데이터를 분할할 구간을 찾아 split을 해야하며, split을 하는 기준은 split을 했을 때, impurity가 낮아지는 구간을 찾는것이다.<br/><br/>\r\n      impurity는 말 그대로 불순도를 말하여, 나누고자 하는 클래스에 적합하지 않은 다른 데이터가 얼마나 있으냐를 따져주는 수치이다.<br/><br/>\r\n      이 수치는 대표적으로 Entropy방식과 Gini방식이 있으며 수식으로는 아래와 같다.<br/><br/>\r\n      <div className='code'>\r\n      Entropy = -&Sigma;( P(w1) log(P(w2)) )<br/><br/>\r\n      Gini = 1-&Sigma;( P(wn)^2 )\r\n      </div>\r\n      각각 Wn은 각각의 클래스 별 차지하는 비율을 나타내며, P(w1)=1/4, P(w2)=3/4일 경우\r\n      <div className=\"code\">\r\n      Entropy = -1/4log(1/4)-3/4*log(3/4)<br/><br/>\r\n      Gini = 1-(1/4)^2-(3/4)^2\r\n      </div><br/><br/>\r\n      이렇게 계산이된다. P(Wn)은 최댓값이 1/2이기 때문에 엔트로피는 1을 기니는 0.5를 넘길 수가 없다.<br/><br/>\r\n      inpurity는 위와 같이 계산을 하면 충분히 구할 수 있고, split을 했을 때, 부모보다 자식들의 inpurity합이 더 크면 split을 할 수 있는 것이다.<br/><br/>\r\n      위 두가지 방식을 사용했을 때, 어느쪽이 더 좋다고 할 수 없으며 동시에 같은 비율로 split되더라도 다른 결과를 가져올 수 있다.<br/><br/>\r\n      split에서 자식노드가 나뉘었을때 나뉘는 갯수가 서로 다를 수 있는데, 이때 발생하는 문제는 가중치를 이용해서 해결할 수 있다.<br/><br/>\r\n      기본적인 DT에 대한 설명은 이정도로 마치고 다음 포스팅에 더 자세하게 다뤄보겠다.<br/><br/>\r\n      이상 포스팅 끝\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting2\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting4.jsx",["284","285"],"import React, {Component} from 'react'\r\nimport Img1 from './img/3-1.PNG'\r\nimport Img2 from './img/3-2.PNG'\r\nclass Posting3 extends Component{\r\n  render(){\r\n    return(\r\n      <div class=\"left\">\r\n      <h1>Decision Tree-2</h1>\r\n      <h4>\r\n      결정트리는 기본적으로 Full Tree를 바탕으로 한다. Full Tree는 모든 클래스의 inpurity가 0이 되도록 만든 트리이다.<br/><br/>\r\n      다른 의미로 training error가 0인 상태로 만든다.<br/><br/>\r\n      full tree로 만들면 training error가 0이 되기 때문에 학습이 잘됐다고 생각할 수 있지만 전혀 그렇지않다. overfitting 되었기 때문이다.<br/><br/>\r\n      무조건 overfitting이 안좋다고 할 수는 없지만 세로운 데이터에 대해서 정확도가 일반적인 경우에 별로 좋게 나오지 않을 가능성이 크다.<br/><br/>\r\n      그럼 이렇게 overfitting이 나지않게 하려면 어떻게 해야할까? 너무 split을 하지않으면 반대로 underfitting이 발생할 수 있다.<br/><br/>\r\n      다음 표를 보자<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      training data의 정확도가 높아질수록 class분류가 많아지고, validation data의 정확도는 특정 수준이후로는 낮아지는 것을 볼 수있다.<br/><br/>\r\n      validation data란 기존에 가지고 있는 데이터에서 학습이 잘 이뤄지는 지를 체크하기 위해서 training 데이터의 일부를 테스트 데이터로 두고 사용하는 개념이다.<br/><br/>\r\n      그래프에서 보면 알지만, 중간에 가장 적절한 지점이 있는데 이 지점을 잘 찾아주는게 결정트리의 핵심이라고 볼 수 있다.<br/><br/>\r\n      그럼 split은 Entropy와 Gini 방식을 이용해서 split하지만 이 방식은 split을 하는 기준이고, 실제로 분류는 기준을 어떻게 활용을 할까?<br/><br/>\r\n      기본적으로 Greedy 방식으로 분류를 한다.<br/><br/> Greedy방식이란 현재 상황에서 가장 좋은 inpurity를 만들기 위해서 구간을 나누는 것이다.<br/><br/>\r\n      이렇게 split할 경우 이전의 상황으로 돌아갈 수 없으며 아래와 같이 결과적으로는 더 안좋은 경우가 나타날 수 있다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      하지만 나중의 경우를 모두 예측하기란 매우 어려운 일이고 할수 있더라도 너무많은 연산이 필요하기 때문에 Greedy방식을 사용한다.\r\n      split을 하는 방식은 Greedy 방식이라고 하면, 도중에 멈추는 방법은 어떤게 있을까? 여러가지 방법이 있겠지만 대표적으로는 hyperparameter를 조정하는 법으로\r\n      <div className='code'>\r\n      1. Max depth<br/><br/>\r\n      2. Max leaf nodes<br/><br/>\r\n      3. Max data for split\r\n      </div>\r\n      이 세가지가 기본적이고 이외에 Regularization을 하는 방법도 있다. 트리의 크기를 제한하는 방법이다.\r\n      <div className='code'>\r\n      &alpha;*size+&Sigma;i(N)\r\n      </div>\r\n      식이 최대한 낮은 수치를 가질 수 있게 한다.<br/><br/>\r\n      &alpha;*size부분은 comlpexity부분으로 얼마나 가지가 많이 뻗어 갔는지를 보여주며 뒤에 &Sigma;i(N)부분은 training error부분이다.<br/><br/>\r\n      가지가 많이 뻗어갈수록 training error는 감소할 것이고, 반대로 가지가 적게 뻗어갈수록 training error가 증가할 것이다.<br/><br/>\r\n      이 두가지 수치를 적절하게 조합해 최대한 낮게 값을 유지해줘야한다.<br/><br/>\r\n      마지막으로는 pruning이라는 방법이있다. 해석하면 가지치기로 너무 많은 클래스 분류가 일어나지 않게 도중에 가지치기처럼 Cost Funtion에 맞춰 끊어주는것이다.<br/><br/>\r\n      이 Cost Function이 최소로 하는 구간에서 가지를 치는 것이다. 이런 pruning의 특징은 최소한의 inpurity를 갖게 되며, validation data가 필요없으며 동시에 그만큼 연산량이 증가한다.<br/><br/>\r\n      Cost Funtion은 다음과 같다.\r\n      <div class=\"code\">Cost(T) = Err(T) + &alpha;*L(T) = Err(T) + &alpha;*(leaf_nodes(T))</div>\r\n      여기서 &alpha;의 경우는 hyperparameter로 사용자가 직접 설정해주는 값이다. 알파의 값이 크게되면 나뉘는 클래스(leaf)의 비중이 높게나오고, 알파의 값이 작으면 나뉘는 클래스(leaf)의 비중이 낮아진다.<br/><br/>\r\n      기본적인 pruning 알고리즘은 다음과 같다.\r\n      <div class=\"code\">\r\n      1. Full Tree를 생성한다.<br/><br/>\r\n      2. pruning을 한다.<br/><br/>\r\n      2-1. sub-tree를 찾는다.<br/><br/>\r\n      2-2. Full_tree와 Sub_tree의 Cost Function을 계산한다.<br/><br/>\r\n      2-3. 만약 Cost(Full_tree)&gt;Cost(Sub_tree)면 Sub_tree를 선택한다.\r\n      </div>\r\n      이렇게 적절한 pruning이나 split을 통해서 가장 효율적인 트리를 찾아 주어야한다.<br/><br/>\r\n      <h3>Decision Tree의 특징</h3>\r\n      결정트리의 특징으로 가장 큰 세가지는 숫자가아닌 단어로된 변수, outliers, Missing Values모두 학습에 있어서 큰 개입이 없다는 것이다.<br/><br/>\r\n      단어로된 일반 변수의 경우 오히려 더 강력한 설명력을 가지기 때문에 있으면 좋은 경우가 많다.<br/><br/>\r\n      outliers(비정상적인 수치)와 Missing Values(누락된 데이터)의 경우 일반적인 결정트리는 Full Tree를 사용하지 않고 적당한 pruning과 split을 하기 때문에 애초에 거의 영향이 없는 경우가 많다.<br/><br/>\r\n      마지막으로 결정트리는 Nonlinear Split를 보통 사용하지않고, 이것과 별개로 Regression으로도 사용을 한다.<br/><br/>\r\n      결정트리는 Nonlinear Split을 하지않는 이유는 결정트리는 설명력이 강하다는 장점을 가지고있는데, Nonlinear split은 설명력을 잃기 때문에 사용하지않는다.<br/><br/>\r\n      이상 포스팅 끝\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting3\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting2.jsx",["286","287","288","289","290","291","292"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting5.jsx",["293","294"],"import React, {Component} from 'react'\r\nimport Img1 from './img/3-1.PNG'\r\nimport Img2 from './img/3-2.PNG'\r\nclass Posting3 extends Component{\r\n  render(){\r\n    return(\r\n      <div class=\"left\">\r\n      <h1>Decision Tree-실습</h1>\r\n      <h4>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting3\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Home_Page.js",["295"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Posting.js",["296","297"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\My_Study.js",["298"],{"ruleId":"299","replacedBy":"300"},{"ruleId":"301","replacedBy":"302"},{"ruleId":"303","severity":1,"message":"304","line":37,"column":52,"nodeType":"305","endLine":37,"endColumn":124},{"ruleId":"306","severity":1,"message":"307","line":43,"column":23,"nodeType":"308","messageId":"309","endLine":43,"endColumn":25},{"ruleId":"310","severity":1,"message":"311","line":49,"column":11,"nodeType":"305","endLine":49,"endColumn":67},{"ruleId":"306","severity":1,"message":"307","line":53,"column":23,"nodeType":"308","messageId":"309","endLine":53,"endColumn":25},{"ruleId":"306","severity":1,"message":"307","line":63,"column":23,"nodeType":"308","messageId":"309","endLine":63,"endColumn":25},{"ruleId":"310","severity":1,"message":"312","line":69,"column":11,"nodeType":"305","endLine":69,"endColumn":72},{"ruleId":"306","severity":1,"message":"307","line":73,"column":23,"nodeType":"308","messageId":"309","endLine":73,"endColumn":25},{"ruleId":"299","replacedBy":"313"},{"ruleId":"301","replacedBy":"314"},{"ruleId":"299","replacedBy":"315"},{"ruleId":"301","replacedBy":"316"},{"ruleId":"299","replacedBy":"317"},{"ruleId":"301","replacedBy":"318"},{"ruleId":"306","severity":1,"message":"307","line":7,"column":50,"nodeType":"308","messageId":"309","endLine":7,"endColumn":52},{"ruleId":"299","replacedBy":"319"},{"ruleId":"301","replacedBy":"320"},{"ruleId":"321","severity":1,"message":"322","line":13,"column":7,"nodeType":"305","endLine":13,"endColumn":40},{"ruleId":"321","severity":1,"message":"322","line":23,"column":7,"nodeType":"305","endLine":23,"endColumn":41},{"ruleId":"299","replacedBy":"323"},{"ruleId":"301","replacedBy":"324"},{"ruleId":"325","severity":1,"message":"326","line":6,"column":8,"nodeType":"327","messageId":"328","endLine":6,"endColumn":12},{"ruleId":"321","severity":1,"message":"322","line":19,"column":9,"nodeType":"305","endLine":19,"endColumn":26},{"ruleId":"321","severity":1,"message":"322","line":23,"column":9,"nodeType":"305","endLine":23,"endColumn":26},{"ruleId":"321","severity":1,"message":"322","line":27,"column":9,"nodeType":"305","endLine":27,"endColumn":26},{"ruleId":"321","severity":1,"message":"322","line":29,"column":9,"nodeType":"305","endLine":29,"endColumn":26},{"ruleId":"321","severity":1,"message":"322","line":30,"column":9,"nodeType":"305","endLine":30,"endColumn":26},{"ruleId":"321","severity":1,"message":"322","line":15,"column":7,"nodeType":"305","endLine":15,"endColumn":40},{"ruleId":"321","severity":1,"message":"322","line":17,"column":7,"nodeType":"305","endLine":17,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":13,"column":7,"nodeType":"305","endLine":13,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":15,"column":7,"nodeType":"305","endLine":15,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":19,"column":7,"nodeType":"305","endLine":19,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":14,"column":7,"nodeType":"305","endLine":14,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":22,"column":7,"nodeType":"305","endLine":22,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":25,"column":7,"nodeType":"305","endLine":25,"endColumn":41},{"ruleId":"299","replacedBy":"329"},{"ruleId":"301","replacedBy":"330"},{"ruleId":"321","severity":1,"message":"322","line":12,"column":7,"nodeType":"305","endLine":12,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":18,"column":7,"nodeType":"305","endLine":18,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":28,"column":7,"nodeType":"305","endLine":28,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":30,"column":7,"nodeType":"305","endLine":30,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":32,"column":7,"nodeType":"305","endLine":32,"endColumn":41},{"ruleId":"325","severity":1,"message":"331","line":4,"column":8,"nodeType":"327","messageId":"328","endLine":4,"endColumn":12},{"ruleId":"321","severity":1,"message":"322","line":13,"column":7,"nodeType":"305","endLine":13,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":14,"column":7,"nodeType":"305","endLine":14,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":22,"column":8,"nodeType":"305","endLine":22,"endColumn":42},{"ruleId":"321","severity":1,"message":"322","line":18,"column":7,"nodeType":"305","endLine":18,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":31,"column":7,"nodeType":"305","endLine":31,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":13,"column":7,"nodeType":"305","endLine":13,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":17,"column":7,"nodeType":"305","endLine":17,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":21,"column":7,"nodeType":"305","endLine":21,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":28,"column":7,"nodeType":"305","endLine":28,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":31,"column":7,"nodeType":"305","endLine":31,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":36,"column":7,"nodeType":"305","endLine":36,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":11,"column":7,"nodeType":"305","endLine":11,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":13,"column":7,"nodeType":"305","endLine":13,"endColumn":41},{"ruleId":"299","replacedBy":"332"},{"ruleId":"301","replacedBy":"333"},{"ruleId":"321","severity":1,"message":"322","line":19,"column":7,"nodeType":"305","endLine":19,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":26,"column":7,"nodeType":"305","endLine":26,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":34,"column":7,"nodeType":"305","endLine":34,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":36,"column":7,"nodeType":"305","endLine":36,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":39,"column":7,"nodeType":"305","endLine":39,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":21,"column":9,"nodeType":"305","endLine":21,"endColumn":43},{"ruleId":"321","severity":1,"message":"322","line":24,"column":9,"nodeType":"305","endLine":24,"endColumn":43},{"ruleId":"299","replacedBy":"334"},{"ruleId":"301","replacedBy":"335"},{"ruleId":"321","severity":1,"message":"322","line":16,"column":7,"nodeType":"305","endLine":16,"endColumn":41},{"ruleId":"325","severity":1,"message":"326","line":6,"column":8,"nodeType":"327","messageId":"328","endLine":6,"endColumn":12},{"ruleId":"321","severity":1,"message":"322","line":18,"column":9,"nodeType":"305","endLine":18,"endColumn":43},{"ruleId":"321","severity":1,"message":"322","line":20,"column":9,"nodeType":"305","endLine":20,"endColumn":43},{"ruleId":"321","severity":1,"message":"322","line":24,"column":9,"nodeType":"305","endLine":24,"endColumn":43},{"ruleId":"321","severity":1,"message":"322","line":30,"column":9,"nodeType":"305","endLine":30,"endColumn":43},{"ruleId":"321","severity":1,"message":"322","line":31,"column":9,"nodeType":"305","endLine":31,"endColumn":43},{"ruleId":"321","severity":1,"message":"322","line":17,"column":7,"nodeType":"305","endLine":17,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":20,"column":7,"nodeType":"305","endLine":20,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":14,"column":9,"nodeType":"305","endLine":14,"endColumn":42},{"ruleId":"321","severity":1,"message":"322","line":18,"column":9,"nodeType":"305","endLine":18,"endColumn":42},{"ruleId":"321","severity":1,"message":"322","line":22,"column":9,"nodeType":"305","endLine":22,"endColumn":42},{"ruleId":"321","severity":1,"message":"322","line":36,"column":9,"nodeType":"305","endLine":36,"endColumn":42},{"ruleId":"299","replacedBy":"336"},{"ruleId":"301","replacedBy":"337"},{"ruleId":"325","severity":1,"message":"331","line":4,"column":8,"nodeType":"327","messageId":"328","endLine":4,"endColumn":12},{"ruleId":"321","severity":1,"message":"322","line":19,"column":7,"nodeType":"305","endLine":19,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":29,"column":7,"nodeType":"305","endLine":29,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":32,"column":7,"nodeType":"305","endLine":32,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":34,"column":7,"nodeType":"305","endLine":34,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":24,"column":7,"nodeType":"305","endLine":24,"endColumn":37},{"ruleId":"321","severity":1,"message":"322","line":54,"column":7,"nodeType":"305","endLine":54,"endColumn":37},{"ruleId":"321","severity":1,"message":"322","line":55,"column":7,"nodeType":"305","endLine":55,"endColumn":37},{"ruleId":"321","severity":1,"message":"322","line":58,"column":7,"nodeType":"305","endLine":58,"endColumn":37},{"ruleId":"321","severity":1,"message":"322","line":59,"column":7,"nodeType":"305","endLine":59,"endColumn":37},{"ruleId":"321","severity":1,"message":"322","line":15,"column":7,"nodeType":"305","endLine":15,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":24,"column":7,"nodeType":"305","endLine":24,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":16,"column":7,"nodeType":"305","endLine":16,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":23,"column":7,"nodeType":"305","endLine":23,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":18,"column":7,"nodeType":"305","endLine":18,"endColumn":40},{"ruleId":"321","severity":1,"message":"322","line":20,"column":7,"nodeType":"305","endLine":20,"endColumn":40},{"ruleId":"321","severity":1,"message":"322","line":22,"column":7,"nodeType":"305","endLine":22,"endColumn":40},{"ruleId":"321","severity":1,"message":"322","line":24,"column":7,"nodeType":"305","endLine":24,"endColumn":40},{"ruleId":"321","severity":1,"message":"322","line":31,"column":7,"nodeType":"305","endLine":31,"endColumn":40},{"ruleId":"321","severity":1,"message":"322","line":35,"column":7,"nodeType":"305","endLine":35,"endColumn":41},{"ruleId":"321","severity":1,"message":"322","line":36,"column":7,"nodeType":"305","endLine":36,"endColumn":41},{"ruleId":"325","severity":1,"message":"338","line":2,"column":8,"nodeType":"327","messageId":"328","endLine":2,"endColumn":12},{"ruleId":"325","severity":1,"message":"331","line":3,"column":8,"nodeType":"327","messageId":"328","endLine":3,"endColumn":12},{"ruleId":"339","severity":1,"message":"340","line":26,"column":60,"nodeType":"341","messageId":"342","endLine":28,"endColumn":16},{"ruleId":"306","severity":1,"message":"307","line":9,"column":50,"nodeType":"308","messageId":"309","endLine":9,"endColumn":52},{"ruleId":"310","severity":1,"message":"343","line":23,"column":50,"nodeType":"305","endLine":23,"endColumn":64},{"ruleId":"306","severity":1,"message":"307","line":9,"column":50,"nodeType":"308","messageId":"309","endLine":9,"endColumn":52},"no-native-reassign",["344"],"no-negated-in-lhs",["345"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-pascal-case","Imported JSX component Home_Page must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component My_Study must be in PascalCase or SCREAMING_SNAKE_CASE",["344"],["345"],["344"],["345"],["344"],["345"],["344"],["345"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["344"],["345"],"no-unused-vars","'Img4' is defined but never used.","Identifier","unusedVar",["344"],["345"],"'Img2' is defined but never used.",["344"],["345"],["344"],["345"],["344"],["345"],"'Img1' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Imported JSX component React_study must be in PascalCase or SCREAMING_SNAKE_CASE","no-global-assign","no-unsafe-negation"]