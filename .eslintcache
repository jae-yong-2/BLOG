[{"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\index.js":"1","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Home_Page.js":"2","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\App.js":"3","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\MY_STUDY.js":"4","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\LINK.js":"5","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Link.js":"6","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\My_Study.js":"7","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Posting.js":"8","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\react_study\\index.js":"9","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\index.js":"10","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\1.js":"11","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\index.js":"12","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\1.js":"13","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\2.js":"14","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\3.js":"15","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\4.js":"16","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\5.js":"17","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\6.js":"18","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\2.js":"19","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\3.js":"20"},{"size":150,"mtime":1611304067765,"results":"21","hashOfConfig":"22"},{"size":1530,"mtime":1612687289153,"results":"23","hashOfConfig":"22"},{"size":2426,"mtime":1612688444260,"results":"24","hashOfConfig":"22"},{"size":559,"mtime":1611403198707,"results":"25","hashOfConfig":"22"},{"size":543,"mtime":1611403105282,"results":"26","hashOfConfig":"22"},{"size":792,"mtime":1612687277618,"results":"27","hashOfConfig":"22"},{"size":817,"mtime":1612687700138,"results":"28","hashOfConfig":"22"},{"size":1371,"mtime":1612687699245,"results":"29","hashOfConfig":"22"},{"size":195,"mtime":1611838566165,"results":"30","hashOfConfig":"22"},{"size":1403,"mtime":1612683460867,"results":"31","hashOfConfig":"22"},{"size":1698,"mtime":1611929874561,"results":"32","hashOfConfig":"22"},{"size":2270,"mtime":1612432520549,"results":"33","hashOfConfig":"22"},{"size":2144,"mtime":1612256995992,"results":"34","hashOfConfig":"22"},{"size":2392,"mtime":1612257019150,"results":"35","hashOfConfig":"22"},{"size":2098,"mtime":1612257024432,"results":"36","hashOfConfig":"22"},{"size":1475,"mtime":1612257029838,"results":"37","hashOfConfig":"22"},{"size":1651,"mtime":1612434336343,"results":"38","hashOfConfig":"22"},{"size":1060,"mtime":1612434670983,"results":"39","hashOfConfig":"22"},{"size":1529,"mtime":1612436273312,"results":"40","hashOfConfig":"22"},{"size":2416,"mtime":1612688177990,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"151ouc9",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"64"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"64"},"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\index.js",[],["97","98"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Home_Page.js",["99"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\App.js",["100","101","102","103","104","105","106"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\MY_STUDY.js",["107"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\LINK.js",["108"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Link.js",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\My_Study.js",["109"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Posting.js",["110","111"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\react_study\\index.js",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\index.js",["112"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport List1 from './1.js'\r\nimport List2 from './2.js'\r\nimport List3 from './3.js'\r\n\r\nclass App extends Component{\r\n  change=(id,bid)=>{\r\n    if(document.getElementById(id).style.display ==\"block\"){\r\n      document.getElementById(id).style.display =\"none\";\r\n      document.getElementById(bid).innerText=\"보기\";\r\n    }\r\n    else{\r\n      document.getElementById(id).style.display =\"block\";\r\n      document.getElementById(bid).innerText=\"닫기\";\r\n    }\r\n  }\r\n    render(){\r\n      return(\r\n        <div>\r\n            <li className=\"list\">리액트 시작<button className=\"button_box\" id=\"React_button1\" onClick = {()=>{this.change(\"React_study1\",\"React_button1\")}}>보기</button></li>\r\n            <div id=\"React_study1\" className=\"post_list\"><List1/></div>\r\n\r\n            <li className=\"list\">리액트의 기본<button className=\"button_box\" id=\"React_button2\" onClick = {()=>{this.change(\"React_study2\",\"React_button2\")}}>보기</button></li>\r\n            <div id=\"React_study2\" className=\"post_list\"><List2/></div>\r\n\r\n            <li className=\"list\">블로그 만들기 1<button className=\"button_box\" id=\"React_button3\" onClick = {()=>{this.change(\"React_study3\",\"React_button3\")}}>보기</button></li>\r\n            <div id=\"React_study3\" className=\"post_list\"><List3/></div>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nexport default App;\r\n",["113","114"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\1.js",["115","116","117","118","119","120"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport Img1 from './img/react_start.PNG'\r\nimport Img2 from './img/react_start1.PNG'\r\nimport Img3 from './img/react_start2.PNG'\r\nimport Img4 from './img/react_start3.PNG'\r\nimport Img5 from './img/react_start4.PNG'\r\nimport Img6 from './img/react_start5.PNG'\r\n\r\nclass App extends Component{\r\n    render(){\r\n      return(\r\n        <div className=\"left\">\r\n        <h1>리액트 사용법</h1>\r\n        <h4><br/>\r\n        <div className=\"code\">npm install -g create-react-app<br/><br/>\r\n        create-react-app my-app</div>(my-app은 원하는 이름으로)<br/><br/>\r\n        위의 두 명령어를 실행하면 리액트 파일이 생성된다. 파일을 생성하면 다음과 구조가 같다.<br/><br/>\r\n        <img src={Img1}/>\r\n        <br/><br/>\r\n        리액트가 잘 작동하는지 확인하기 위해 리액트 폴더에서<br/>\r\n        <div className=\"code\">npm run start</div> 명령어를 실행해본다.<br/><br/>\r\n        <img src={Img2}/><br/><br/>\r\n        이와 같이 나오면 제대로 설치가 완료된것이다.<br/><br/>\r\n        이후 src에 들어가서 app.js와 index.js를 제외한 나머지 파일을 지워준다.<br/><br/>\r\n        index.js의 파일의 경우는 다음과 같이 만들어 주고<br/><br/>\r\n        <img src={Img3}/><br/><br/>\r\n        app.js의 파일의 경우는 다음과 같이 만들어 준다.<br/><br/>\r\n        <img src={Img6}/><br/><br/>\r\n        <img src={Img5}/><br/><br/>\r\n        이제 개발을 시작하면 된다. (배경색은 원래는 흰색으로 글자만 나옵니다.)<br/><br/>\r\n        </h4>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nexport default App;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\index.js",["121"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport List1 from './1.js'\r\nimport List2 from './2.js'\r\nimport List3 from './3.js'\r\nimport List4 from './4.js'\r\nimport List5 from './5.js'\r\nimport List6 from './6.js'\r\n\r\nclass App extends Component{\r\n  change=(id,bid)=>{\r\n    if(document.getElementById(id).style.display ==\"block\"){\r\n      document.getElementById(id).style.display =\"none\";\r\n      document.getElementById(bid).innerText=\"보기\";\r\n    }\r\n    else{\r\n      document.getElementById(id).style.display =\"block\";\r\n      document.getElementById(bid).innerText=\"닫기\";\r\n    }\r\n  }\r\n    render(){\r\n      return(\r\n        <div>\r\n\r\n            <li className=\"list\">백준 no.4344<button className=\"button_box\" id=\"Algorithm_button1\" onClick = {()=>{this.change(\"beackjoon1\",\"Algorithm_button1\")}}>보기</button></li>\r\n            <div id=\"beackjoon1\" className=\"post_list\"><List1/></div>\r\n\r\n            <li className=\"list\">백준 no.11650<button className=\"button_box\" id=\"Algorithm_button2\" onClick = {()=>{this.change(\"beackjoon2\",\"Algorithm_button2\")}}>보기</button></li>\r\n            <div id=\"beackjoon2\" className=\"post_list\"><List2/></div>\r\n\r\n            <li className=\"list\">백준 no.1018<button className=\"button_box\" id=\"Algorithm_button3\" onClick = {()=>{this.change(\"beackjoon3\",\"Algorithm_button3\")}}>보기</button></li>\r\n            <div id=\"beackjoon3\" className=\"post_list\"><List3/></div>\r\n\r\n            <li className=\"list\">백준 no.1010<button className=\"button_box\" id=\"Algorithm_button4\" onClick = {()=>{this.change(\"beackjoon4\",\"Algorithm_button4\")}}>보기</button></li>\r\n            <div id=\"beackjoon4\" className=\"post_list\"><List4/></div>\r\n\r\n            <li className=\"list\">백준 no.1051<button className=\"button_box\" id=\"Algorithm_button5\" onClick = {()=>{this.change(\"beackjoon5\",\"Algorithm_button5\")}}>보기</button></li>\r\n            <div id=\"beackjoon5\" className=\"post_list\"><List5/></div>\r\n\r\n            <li className=\"list\">백준 no.1037<button className=\"button_box\" id=\"Algorithm_button6\" onClick = {()=>{this.change(\"beackjoon6\",\"Algorithm_button6\")}}>보기</button></li>\r\n            <div id=\"beackjoon6\" className=\"post_list\"><List6/></div>\r\n\r\n        </div>\r\n      );\r\n    }\r\n}\r\nexport default App;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\1.js",["122"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport Img from './img/4344.PNG'\r\n\r\nclass App extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>평균은 넘겠지<h3>(정답률 : 37.470%)</h3></h1>\r\n      <h4>\r\n      백준 4344번 문제로 평균을 넘는 학생의 수를 구하는 것이다.<br/><br/>\r\n      이 문제는 배열로 간단히 풀 수 있지만 C++에서 사용하는 vector기능을 이용하여 풀어 보았다.<br/><br/>\r\n      코드는 다음과 같다.\r\n      <br/><br/>\r\n      <img src={Img} className='code'/>\r\n      <br/><br/>\r\n      vector는\r\n      <div className=\"code\">#include &lt;vector&gt;</div>\r\n      <br/><br/>\r\n      이렇게 불러와야 사용할 수 있고\r\n      <div className=\"code\">\r\n      std::vector&lt;vector&gt; v(number);\r\n      </div>\r\n      <br/><br/>\r\n      이렇게 선언했을 때, v는 변수명, number은 백터의 사이즈 int는 자료형에 해당한다.<br/><br/>\r\n      가장 많이 쓰이는 함수 위주로 정리를 하자면<br/><br/>\r\n      <div className=\"code\">\r\n      v.front();<br/><br/>\r\n      v.back();<br/><br/>\r\n      v.push_back(number);<br/><br/>\r\n      v.pop_back();<br/><br/>\r\n      v.begin();<br/><br/>\r\n      v.end();<br/><br/>\r\n      v.size();<br/><br/>\r\n      </div><br/><br/>\r\n      위주로 사용하고, 각각 벡터의 맨처음, 마지막 잠초, 마지막 원소뒤에 number삽입, 마지막 원소 제거,\r\n      벡터 처음과 마지막 가르키기(iterater), 벡터의 사이즈반환이다.<br/><br/>\r\n      <div className=\"code\">std::accumulate(start,end,0);</div><br/><br/>\r\n      의 경우에는 벡터의 평균을 구할 때, 총합을 구하기 위해서 사용하는 코드로\r\n      <div className=\"code\">#include&lt;numeric&gt;</div><br/><br/>\r\n      에서 불러와 사용하며, 백터의 시작, 끝, 자료형으로 생각하여 사용하면 된다.\r\n      이상 벡터에 대해 알아보았다.<br/><br/>이 문제의 경우 알고리즘적으로 어려운 것은 없으니 풀이는 생략한다.\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\2.js",["123","124"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport Img1 from './img/11650.PNG'\r\nimport Img2 from './img/11650_1.PNG'\r\nclass App extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>좌표 정렬하기<h3>(정답률 : 48.847%)</h3></h1>\r\n      <h4>백준 11650번 문제로 주어진 좌표를 정렬하는 문제이다. 이 문제는 여러 방법으로 풀 수 있지만<br/><br/>\r\n      c++언어에서 제공해주는 vector와 pair기능 그리고 sort기능을 이용하면 아주 간단하게 풀 수 있다.<br/><br/>\r\n      코드는 다음과 같다.<br/><br/>\r\n      <img src={Img1}className=\"code\"/><br/><br/>\r\n      여기서 vector는 저번 포스팅에서 이미한 상태로 no.4344를 참고하면 된다. 이번 포스팅은 pair를 위주로 포스팅을 한다.<br/><br/>\r\n      pair는 header 파일이 utility이며 서로다른 자료형을 묶어두는 구조체이다.<br/><br/>\r\n      <div className=\"code\">#include&lt;utility&gt;</div><br/><br/> 이렇게 호출하여 사용하며 선언은 아래와 같다.\r\n      <div className=\"code\">std::pair&lt;&lt;Class T&gt;,&lt;Class T&gt;&gt; name;</div>\r\n      pair의 경우는 좀 특이하게 std::make_pair()라는 함수를 사용하여 값을 넣어주는데, 사용법은 아래와 같다.\r\n      <div className=\"code\">name=std::make_pair(v1,v2);</div><br/><br/>\r\n      위의 알고리즘 문제에서는 벡터의 자료형을 pair 자체로 두어 좌표를 벡터의 하나의 저장공간에 넣는 것이다.<br/><br/>\r\n      여기서 벡터는 sort함수를 통해서 문제에서 원하는대로 정렬이 가능하다.<br/><br/> 이때 난 저번 포스팅에서는 알지 못했던 sort의 기능을 하나 알았다.<br/><br/>\r\n      그건 정렬하는 방법을 사용자가 직접 정해주는 방법이었는데, 함수를 새로 정의해서 sort의 세번째 parameter에 넣어주면 그 함수의 반환값에 <br/><br/>따라서 자동으로 정렬되는 기능이다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      이렇게 비교해주는 함수를 사용후에 다음과 같이 코드를 작성하면,\r\n      <div className=\"code\">std::sort(v.begin(),v.end(),cmp);</div>\r\n      문제에서 원하는 값이 나오게 된다. 이상 포스팅 끝.\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App\r\n",["125","126"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\3.js",["127","128"],"import React,{Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1018_1.PNG'\r\nimport Img2 from './img/1018_2.PNG'\r\nclass App extends Component{\r\n\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n        <h1>체스판 다시 칠하기<h3>(정답률 : 46.526%)</h3></h1>\r\n        <h4>\r\n        이번 문제는 단순 알고리즘 문제이다. 입력받은 체스판에서 8*8모양으로 추출한 후 체스판의 규격에 맞게<br/><br/>\r\n        색칠을 다시 해주고, 이렇게 색칠된 횟수를 계산하여 가장 적게 색칠할 수 있는 횟수를 찾는게 풀이이다.<br/><br/>\r\n        처음 문제를 보고, python을 활용하여 문제를 풀면 쉽게 풀릴 것으로 생각이 되었다.<br/><br/>\r\n        하지만 C++을 이용하여 문제를 풀어보았다.<br/><br/>\r\n        가장 먼저 떠오른 아이디어는 이미지처리에서 사용하는 필터의 개념이었다. 입력받은 값을 이미지의 값으로<br/><br/>\r\n        생각을 하고 필터가 돌면서 색칠해야하는 경우(처음이 검은색, 처음이 흰색)중 작은 값을 선택하고, 이전의<br/><br/>\r\n        최소값과 비교해 값을 가져가는 방식으로 해보았다.<br/><br/>\r\n        먼저 흰색, 검은색 보드를 선언해 주었다.<br/><br/>\r\n        <img src={Img1} className=\"code\"/><br/><br/>\r\n        이렇게 필터(보드)를 만들어 주고 각 이미지를 돌면서 비교를 한다.<br/><br/>\r\n        아래는 핵심 알고리즘이다.<br/><br/>\r\n        <img src={Img2} className=\"code\"/><br/><br/>\r\n        두가지 필터를 돌면서 최소값을 찾아주고, 이전의 최소값과 비교하여 최종값을 반환한다.<br/><br/>\r\n        문제 차제는 난이도가 어렵지않지많, 시간을 줄이기를 신경쓴다면 어렵게 풀수 있을것 같다.<br/><br/>\r\n        또 문제를 처음에 잘못읽어 어렵게 풀었는데, 다음부터는 문제를 잘 읽어야겠다. 이상 포스팅 끝<br/><br/>\r\n\r\n        </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\4.js",["129"],"import React,{Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1010.PNG'\r\n\r\nclass App extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>다리 놓기<h3>(정답률 : 48.517%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 다리놓기 문제로 양쪽에 목적지를 갖고, 다리가 겹치지 않게 놓을 때의 경우의 수를 구하는 문제이다.<br/><br/>\r\n      문제를 읽었을 때는 어려워 보이지만 조금만 생각해보면 순열공식을 이용한다면 금방 풀 수 있는 문제이다.<br/><br/>\r\n      문제 조건이 0 &lt; N &lt;=M &lt; 30 이므로 조합공식인 mPn을 이용한다.<br/><br/>\r\n      이를 간단하게 풀면 M!/(M-N)!N! 로 볼 수 있다.<br/><br/>\r\n      아래는 알고리즘이다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      단순히 M!, (M-N)!, N!를 각각 따로 계산하면 오버플로가 발생하기 때문에 반복문을 돌 때 값을 나누는 작업을 동시에 해줘야한다.<br/><br/>\r\n      반복문을 돌면서 1부터 M을 곱하는 동시에 1부터 N과 1부터 M-N을 나눠 주는 작업을 반복문 한번을 돌면서 실행한다.<br/><br/>\r\n      문제가 요구하는게 빠른 계산이기 때문에 재귀함수와 같이 시간이 오래 걸리는 알고리즘은 가급적 피해주었다. 이상 포스팅 끝 <br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\5.js",["130"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1051.PNG'\r\n\r\nclass App extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>숫자 정사각형<h3>(정답률 : 37.492%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 주어진 직사각형(N*M)안에 입력받은 정수가 모든 칸을 차지하고 있다.<br/><br/>\r\n      이 직사각형 안에서는 정사각형이 존재하는데, 이 정사각형의 꼭짓점에 숫자 4개가 모두 같은 정사각형 중에 가장 큰 정사각형의 크기를 구하면된다.<br/><br/>\r\n      예를 들어 다음과 같이 입력이 되었을 때, 9라는 값이 출력되어야 한다.<br/><br/>\r\n      <div className='code'>3 5<br/>42101<br/>22100<br/>22101</div>\r\n      이때 생각한 알고리즘은 이미지프로세싱에서 사용하는 필터의 개념을 생각 하였다.<br/><br/>\r\n      핵심 알고리즘의 코드는 다음과 같다.\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      N과 M 중 작은 숫자를 정사각형의 최대 크기로 잡고, 직사각형안을 순회한다.<br/><br/>\r\n      순회 후 조건에 맞는 정사각형이 없을 경우 변의 길이를 1씩 감소시키면서 처음부터 반복한다.<br/><br/>\r\n      이렇게 찾게되면 변의 길이를 제곱하여 반환을 하면, 원하는 값이 나온다.<br/><br/>\r\n      이번 문제는 어렵지는 않지만, 정사각형이 직사각형 안을 돌아 다닐때, 인덱스를 주의해야한다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n",["131","132"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\6.js",["133"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1037.PNG'\r\n\r\nclass App extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>약수<h3>(정답률 : 49.574%)</h3></h1>\r\n      <h4>이번 문제는 양수 A가 N의 진짜 약수가 되려면, N이 A의 배수이고, A가 1과 N이 아니어야 한다.<br/><br/>\r\n      어떤 수 N의 진짜 약수가 모두 주어질 때, N을 구하는 프로그램을 작성하시오.라는 문제이다. 생각해보면 매우 간단한 문제이다.<br/><br/>\r\n      약수의 개수가 짝수개 나오면 중간의 2개를 곱한 값이 N이 될것이고, 홀수일 경우 중간의 값을 제곱하면 N이 될것이다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      코드는 위와 같다.<br/><br/>\r\n      이 문제는 조금만 생각하면 금방 풀 수 있는 문제 코드만 봐도 금방 이해할 수 있다.<br/><br/>\r\n      이상 포스팅 끝\r\n\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\2.js",["134","135"],"import React,{Component} from 'react'\r\nimport Img1 from './img/react_start2.PNG'\r\nimport Img2 from './img/react_start3.PNG'\r\nclass App extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>리액트의 기본</h1>\r\n      <h4>이번 포스팅에서는 리액트의 기본적인 이해를 하기 위한 포스팅이다.<br/><br/>\r\n      리액트는 html과 js를 같이 사용할 수 있는 jsx를 사용하게 된다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      이와 같이 index.js에서 App이라는 컴포넌트를 불러와 랜더링하게 되는데, 이때 App의 코드는 아래와 같다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      여기서 return 부분에서 js와 html을 사용하게 되면 그에 맞게 렌더링을 하고 이를 index.js에서 다시 렌더링을 통해 웹페이지를 보여준다.<br/><br/>\r\n      리턴되는 컴포넌트는 하나여야하기 때문에 div태그와 같은 것으로 한번에 다 감싼후 그 안에서 코드를 짜는 것이 바람직한 것 같다.<br/><br/>\r\n      중괄호는 js코드나 문자열과 변수의 합과 같이 다양하게 사용할 수 있어 나중에 state나 props를 활용할때 유용하게 사용된다.<br/><br/>\r\n      이제부터 현재 보고있는 이 블로그를 개발하면서 공부하게된 내용들을 포스팅해 나갈 계획이다.<br/><br/> 이상 포스팅 끝<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\3.js",["136","137","138"],"import React,{Component} from 'react'\r\nimport '../App.js'\r\nimport Img1 from './img/study1_1.PNG'\r\n\r\nclass App extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>블로그 메뉴창 만들기</h1>\r\n      <h4>\r\n      가장 먼저 블로그를 구상하기 위해서 구조를 어떻게 할 것 인가를 생각해 보자.<br/><br/>\r\n      먼저 가장 먼저 생각한 것은 페이지 이동없이 한 페이지 안에서 모든 것을 볼 수 있는 블로그였다.<br/><br/>\r\n      이를 위해서는 리액트 라우터를 사용해야 한다. 하지만 최대한 리액트 자체만의 구현을 하기위해 사용하지않았다.<br/><br/>\r\n      구조는 다음과 같이 구상했다.\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      우선 index.js에서 app.js를 보여주고 app.js에서 모든 메뉴를 관리하는 구조로 구상이 되었다.<br/><br/>\r\n      이제 app.js에서 관리해주는 각각의 메뉴 페이지는 각자 자신의 리스트를 갖고 리스트를 관리한다.<br/><br/>\r\n      이를 수행하기 위해서는 기본적으로 리액트의 state를 이해해야 수행할 수 있다.<br/><br/>\r\n      <h3>state란?</h3>\r\n      state는 컴포넌트의 특성 상태를 화면에 동적으로 반영해주는 기능을 위한 객체이다. 컴포넌트가 독립적으로 갖는 상태인것인다.<br/><br/>\r\n      사용 예시는 다음과 같다.\r\n      //이미지\r\n      이렇게 사용된 state는 함수를 통해 변경을 할 수 있는데, 변화되는 즉각 반응하여 웹사이트에 보여진다.<br/><br/>\r\n      이를 사용하여 메뉴를 클릭하면 클릭에 따라 각각에 맞는 state를 변화시켜 그 컴포넌트를 보여주는 작업을 하게 된다.<br/><br/>\r\n      이렇게 메뉴창을 클릭할 때 마다 그에 맞는 컴포넌트를 보여주도록 하면 되는데 state에 이동할 메뉴의 리스트와 현재 메뉴상태를 나타내는 정보를 준다.<br/><br/>\r\n      이후 map함수와 onClick을 통해서 메뉴를 바꿔주는 함수를 실행하고 클릭마다 상태를 변환해준다.<br/><br/>\r\n      코드는 다음과 같다.<br/><br/>\r\n      //이미지<br/><br/>\r\n      이렇게 구현된 페이지는 현재 보고있는 블로그의 메뉴처럼 작동하게 된다.<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n",{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":32,"column":60,"nodeType":"145","messageId":"146","endLine":34,"endColumn":16},{"ruleId":"147","severity":1,"message":"148","line":38,"column":52,"nodeType":"149","endLine":38,"endColumn":124},{"ruleId":"150","severity":1,"message":"151","line":45,"column":23,"nodeType":"152","messageId":"153","endLine":45,"endColumn":25},{"ruleId":"154","severity":1,"message":"155","line":51,"column":11,"nodeType":"149","endLine":51,"endColumn":23},{"ruleId":"150","severity":1,"message":"151","line":55,"column":23,"nodeType":"152","messageId":"153","endLine":55,"endColumn":25},{"ruleId":"150","severity":1,"message":"151","line":65,"column":23,"nodeType":"152","messageId":"153","endLine":65,"endColumn":25},{"ruleId":"154","severity":1,"message":"156","line":71,"column":11,"nodeType":"149","endLine":71,"endColumn":71},{"ruleId":"150","severity":1,"message":"151","line":75,"column":23,"nodeType":"152","messageId":"153","endLine":75,"endColumn":25},{"ruleId":"147","severity":1,"message":"148","line":13,"column":58,"nodeType":"149","endLine":13,"endColumn":131},{"ruleId":"147","severity":1,"message":"148","line":13,"column":58,"nodeType":"149","endLine":13,"endColumn":131},{"ruleId":"147","severity":1,"message":"148","line":15,"column":13,"nodeType":"149","endLine":15,"endColumn":33},{"ruleId":"150","severity":1,"message":"151","line":8,"column":50,"nodeType":"152","messageId":"153","endLine":8,"endColumn":52},{"ruleId":"154","severity":1,"message":"157","line":20,"column":50,"nodeType":"149","endLine":20,"endColumn":64},{"ruleId":"150","severity":1,"message":"151","line":9,"column":50,"nodeType":"152","messageId":"153","endLine":9,"endColumn":52},{"ruleId":"139","replacedBy":"158"},{"ruleId":"141","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":6,"column":8,"nodeType":"162","messageId":"163","endLine":6,"endColumn":12},{"ruleId":"164","severity":1,"message":"165","line":19,"column":9,"nodeType":"149","endLine":19,"endColumn":26},{"ruleId":"164","severity":1,"message":"165","line":23,"column":9,"nodeType":"149","endLine":23,"endColumn":26},{"ruleId":"164","severity":1,"message":"165","line":27,"column":9,"nodeType":"149","endLine":27,"endColumn":26},{"ruleId":"164","severity":1,"message":"165","line":29,"column":9,"nodeType":"149","endLine":29,"endColumn":26},{"ruleId":"164","severity":1,"message":"165","line":30,"column":9,"nodeType":"149","endLine":30,"endColumn":26},{"ruleId":"150","severity":1,"message":"151","line":12,"column":50,"nodeType":"152","messageId":"153","endLine":12,"endColumn":52},{"ruleId":"164","severity":1,"message":"165","line":15,"column":7,"nodeType":"149","endLine":15,"endColumn":40},{"ruleId":"164","severity":1,"message":"165","line":13,"column":7,"nodeType":"149","endLine":13,"endColumn":40},{"ruleId":"164","severity":1,"message":"165","line":23,"column":7,"nodeType":"149","endLine":23,"endColumn":41},{"ruleId":"139","replacedBy":"166"},{"ruleId":"141","replacedBy":"167"},{"ruleId":"164","severity":1,"message":"165","line":21,"column":9,"nodeType":"149","endLine":21,"endColumn":43},{"ruleId":"164","severity":1,"message":"165","line":24,"column":9,"nodeType":"149","endLine":24,"endColumn":43},{"ruleId":"164","severity":1,"message":"165","line":16,"column":7,"nodeType":"149","endLine":16,"endColumn":41},{"ruleId":"164","severity":1,"message":"165","line":17,"column":7,"nodeType":"149","endLine":17,"endColumn":41},{"ruleId":"139","replacedBy":"168"},{"ruleId":"141","replacedBy":"169"},{"ruleId":"164","severity":1,"message":"165","line":13,"column":7,"nodeType":"149","endLine":13,"endColumn":41},{"ruleId":"164","severity":1,"message":"165","line":11,"column":7,"nodeType":"149","endLine":11,"endColumn":41},{"ruleId":"164","severity":1,"message":"165","line":13,"column":7,"nodeType":"149","endLine":13,"endColumn":41},{"ruleId":"164","severity":1,"message":"165","line":15,"column":7,"nodeType":"149","endLine":15,"endColumn":41},{"ruleId":"170","severity":1,"message":"171","line":20,"column":87,"nodeType":"172","endLine":23,"endColumn":66},{"ruleId":"170","severity":1,"message":"171","line":27,"column":28,"nodeType":"172","endLine":28,"endColumn":12},"no-native-reassign",["173"],"no-negated-in-lhs",["174"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-pascal-case","Imported JSX component Home_Page must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component My_Study must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component React_study must be in PascalCase or SCREAMING_SNAKE_CASE",["173"],["174"],"no-unused-vars","'Img4' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["173"],["174"],["173"],["174"],"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","no-global-assign","no-unsafe-negation"]