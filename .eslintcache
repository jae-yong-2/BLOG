[{"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\index.js":"1","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Home_Page.js":"2","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\App.js":"3","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\MY_STUDY.js":"4","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\LINK.js":"5","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Link.js":"6","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\My_Study.js":"7","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Posting.js":"8","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\react_study\\index.js":"9","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\index.js":"10","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\1.js":"11","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\1.js":"12","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\2.js":"13","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\3.js":"14","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\4.js":"15","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\5.js":"16","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\6.js":"17","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\2.js":"18","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\3.js":"19","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\4.js":"20","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\listOfContents.js":"21","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\index.jsx":"22"},{"size":150,"mtime":1611304067765,"results":"23","hashOfConfig":"24"},{"size":1456,"mtime":1612856249577,"results":"25","hashOfConfig":"24"},{"size":2497,"mtime":1612859196793,"results":"26","hashOfConfig":"24"},{"size":559,"mtime":1611403198707,"results":"27","hashOfConfig":"24"},{"size":543,"mtime":1611403105282,"results":"28","hashOfConfig":"24"},{"size":792,"mtime":1612687277618,"results":"29","hashOfConfig":"24"},{"size":1200,"mtime":1612854889964,"results":"30","hashOfConfig":"24"},{"size":1374,"mtime":1612859328267,"results":"31","hashOfConfig":"24"},{"size":195,"mtime":1611838566165,"results":"32","hashOfConfig":"24"},{"size":1694,"mtime":1612787056298,"results":"33","hashOfConfig":"24"},{"size":1698,"mtime":1611929874561,"results":"34","hashOfConfig":"24"},{"size":2144,"mtime":1612256995992,"results":"35","hashOfConfig":"24"},{"size":2392,"mtime":1612257019150,"results":"36","hashOfConfig":"24"},{"size":2098,"mtime":1612257024432,"results":"37","hashOfConfig":"24"},{"size":1475,"mtime":1612257029838,"results":"38","hashOfConfig":"24"},{"size":1651,"mtime":1612434336343,"results":"39","hashOfConfig":"24"},{"size":1060,"mtime":1612434670983,"results":"40","hashOfConfig":"24"},{"size":1529,"mtime":1612436273312,"results":"41","hashOfConfig":"24"},{"size":2944,"mtime":1612782347776,"results":"42","hashOfConfig":"24"},{"size":3814,"mtime":1612855891609,"results":"43","hashOfConfig":"24"},{"size":504,"mtime":1612860207156,"results":"44","hashOfConfig":"24"},{"size":1010,"mtime":1612860364196,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"151ouc9",{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\index.js",[],["107","108"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Home_Page.js",["109"],"import React, {Component} from 'react';\r\nimport './App.css'\r\nimport './bootstrap/css/bootstrap.css'\r\n\r\nclass Home_Page extends Component{\r\n  add_post=(title,text)=>{\r\n    if(this.props.state.title.indexOf(title)>=0){\r\n      alert(\"중복된 제목이 있습니다.\")\r\n    }else {\r\n      this.props.add_post(title,text)\r\n    }\r\n  }\r\n  render(){\r\n\r\n      return (\r\n        <div className=\"Home_Page\">\r\n          <p className=\"body\">\r\n            <br/>저는 충남대학교 컴퓨터공학과 이재용입니다.\r\n            <br/>이 블로그는 리액트와 깃허브를 공부하기 위해 만들었고 리액트만으로 만들어졌습니다.\r\n            <br/>동시에 어떤 공부를 했는지 모여주는 블로그입니다.\r\n            <br/>공부했던 내용은 posting항목에서 확인 가능합니다.\r\n            <br/>아래는 리액트 공부내용을 시각적으로 보여주며 My_Study와 함께 웹공부를 할 것 입니다.\r\n            <br/>\r\n            <input className='title_box' id='제목' placeholder=\"제목\"/><br/>\r\n            <div className='content_box' contentEditable=\"true\" id='content' placeholder=\"content\"></div>\r\n              <button className='button_box' onClick={()=>{{\r\n                this.add_post(document.getElementById('제목').value, document.getElementById('content').innerHTML);\r\n              }}}>등록</button>\r\n          </p>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home_Page;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\App.js",["110","111","112","113","114","115","116"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\MY_STUDY.js",["117"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\LINK.js",["118"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Link.js",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\My_Study.js",["119"],"import React, {Component} from 'react';\r\nimport './App.css'\r\nimport './bootstrap/css/bootstrap.css'\r\n\r\nclass My_Study extends Component{\r\n  remove_post=(title)=>{\r\n    this.props.remove_post(title.key)\r\n  }\r\n  change=(id)=>{\r\n    if(document.getElementById(id).style.display ==\"block\"){\r\n      document.getElementById(id).style.display =\"none\";\r\n    }\r\n    else{\r\n      document.getElementById(id).style.display =\"block\";\r\n    }\r\n  }\r\n\r\n  render(){\r\n      return (\r\n        <div className=\"My_Study\">\r\n          <p className=\"body\">\r\n          <div>웹페이지를 공부하는 메뉴입니다. 게시판을 만들 계획입니다.</div>\r\n          {this.props.state.title.map((key,index)=>{return (\r\n            <div className=\"list\">{key}\r\n              <button className=\"button_box\" onClick = {()=>{this.change(index)}}>보기</button>\r\n              <button className=\"button_box\" onClick={()=>{this.remove_post({key})}}>제거</button>\r\n              <div id={index} style={{display:\"none\"}}dangerouslySetInnerHTML={ {__html: this.props.state.text[index]} }>\r\n              </div>\r\n            </div>\r\n          )})}\r\n          </p>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default My_Study;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Posting.js",["120","121"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\react_study\\index.js",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\index.js",["122"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\1.js",["123","124","125","126","127","128"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport Img1 from './img/react_start.PNG'\r\nimport Img2 from './img/react_start1.PNG'\r\nimport Img3 from './img/react_start2.PNG'\r\nimport Img4 from './img/react_start3.PNG'\r\nimport Img5 from './img/react_start4.PNG'\r\nimport Img6 from './img/react_start5.PNG'\r\n\r\nclass App extends Component{\r\n    render(){\r\n      return(\r\n        <div className=\"left\">\r\n        <h1>리액트 사용법</h1>\r\n        <h4><br/>\r\n        <div className=\"code\">npm install -g create-react-app<br/><br/>\r\n        create-react-app my-app</div>(my-app은 원하는 이름으로)<br/><br/>\r\n        위의 두 명령어를 실행하면 리액트 파일이 생성된다. 파일을 생성하면 다음과 구조가 같다.<br/><br/>\r\n        <img src={Img1}/>\r\n        <br/><br/>\r\n        리액트가 잘 작동하는지 확인하기 위해 리액트 폴더에서<br/>\r\n        <div className=\"code\">npm run start</div> 명령어를 실행해본다.<br/><br/>\r\n        <img src={Img2}/><br/><br/>\r\n        이와 같이 나오면 제대로 설치가 완료된것이다.<br/><br/>\r\n        이후 src에 들어가서 app.js와 index.js를 제외한 나머지 파일을 지워준다.<br/><br/>\r\n        index.js의 파일의 경우는 다음과 같이 만들어 주고<br/><br/>\r\n        <img src={Img3}/><br/><br/>\r\n        app.js의 파일의 경우는 다음과 같이 만들어 준다.<br/><br/>\r\n        <img src={Img6}/><br/><br/>\r\n        <img src={Img5}/><br/><br/>\r\n        이제 개발을 시작하면 된다. (배경색은 원래는 흰색으로 글자만 나옵니다.)<br/><br/>\r\n        </h4>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nexport default App;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\1.js",["129"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport Img from './img/4344.PNG'\r\n\r\nclass App extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>평균은 넘겠지<h3>(정답률 : 37.470%)</h3></h1>\r\n      <h4>\r\n      백준 4344번 문제로 평균을 넘는 학생의 수를 구하는 것이다.<br/><br/>\r\n      이 문제는 배열로 간단히 풀 수 있지만 C++에서 사용하는 vector기능을 이용하여 풀어 보았다.<br/><br/>\r\n      코드는 다음과 같다.\r\n      <br/><br/>\r\n      <img src={Img} className='code'/>\r\n      <br/><br/>\r\n      vector는\r\n      <div className=\"code\">#include &lt;vector&gt;</div>\r\n      <br/><br/>\r\n      이렇게 불러와야 사용할 수 있고\r\n      <div className=\"code\">\r\n      std::vector&lt;vector&gt; v(number);\r\n      </div>\r\n      <br/><br/>\r\n      이렇게 선언했을 때, v는 변수명, number은 백터의 사이즈 int는 자료형에 해당한다.<br/><br/>\r\n      가장 많이 쓰이는 함수 위주로 정리를 하자면<br/><br/>\r\n      <div className=\"code\">\r\n      v.front();<br/><br/>\r\n      v.back();<br/><br/>\r\n      v.push_back(number);<br/><br/>\r\n      v.pop_back();<br/><br/>\r\n      v.begin();<br/><br/>\r\n      v.end();<br/><br/>\r\n      v.size();<br/><br/>\r\n      </div><br/><br/>\r\n      위주로 사용하고, 각각 벡터의 맨처음, 마지막 잠초, 마지막 원소뒤에 number삽입, 마지막 원소 제거,\r\n      벡터 처음과 마지막 가르키기(iterater), 벡터의 사이즈반환이다.<br/><br/>\r\n      <div className=\"code\">std::accumulate(start,end,0);</div><br/><br/>\r\n      의 경우에는 벡터의 평균을 구할 때, 총합을 구하기 위해서 사용하는 코드로\r\n      <div className=\"code\">#include&lt;numeric&gt;</div><br/><br/>\r\n      에서 불러와 사용하며, 백터의 시작, 끝, 자료형으로 생각하여 사용하면 된다.\r\n      이상 벡터에 대해 알아보았다.<br/><br/>이 문제의 경우 알고리즘적으로 어려운 것은 없으니 풀이는 생략한다.\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\2.js",["130","131"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport Img1 from './img/11650.PNG'\r\nimport Img2 from './img/11650_1.PNG'\r\nclass App extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>좌표 정렬하기<h3>(정답률 : 48.847%)</h3></h1>\r\n      <h4>백준 11650번 문제로 주어진 좌표를 정렬하는 문제이다. 이 문제는 여러 방법으로 풀 수 있지만<br/><br/>\r\n      c++언어에서 제공해주는 vector와 pair기능 그리고 sort기능을 이용하면 아주 간단하게 풀 수 있다.<br/><br/>\r\n      코드는 다음과 같다.<br/><br/>\r\n      <img src={Img1}className=\"code\"/><br/><br/>\r\n      여기서 vector는 저번 포스팅에서 이미한 상태로 no.4344를 참고하면 된다. 이번 포스팅은 pair를 위주로 포스팅을 한다.<br/><br/>\r\n      pair는 header 파일이 utility이며 서로다른 자료형을 묶어두는 구조체이다.<br/><br/>\r\n      <div className=\"code\">#include&lt;utility&gt;</div><br/><br/> 이렇게 호출하여 사용하며 선언은 아래와 같다.\r\n      <div className=\"code\">std::pair&lt;&lt;Class T&gt;,&lt;Class T&gt;&gt; name;</div>\r\n      pair의 경우는 좀 특이하게 std::make_pair()라는 함수를 사용하여 값을 넣어주는데, 사용법은 아래와 같다.\r\n      <div className=\"code\">name=std::make_pair(v1,v2);</div><br/><br/>\r\n      위의 알고리즘 문제에서는 벡터의 자료형을 pair 자체로 두어 좌표를 벡터의 하나의 저장공간에 넣는 것이다.<br/><br/>\r\n      여기서 벡터는 sort함수를 통해서 문제에서 원하는대로 정렬이 가능하다.<br/><br/> 이때 난 저번 포스팅에서는 알지 못했던 sort의 기능을 하나 알았다.<br/><br/>\r\n      그건 정렬하는 방법을 사용자가 직접 정해주는 방법이었는데, 함수를 새로 정의해서 sort의 세번째 parameter에 넣어주면 그 함수의 반환값에 <br/><br/>따라서 자동으로 정렬되는 기능이다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      이렇게 비교해주는 함수를 사용후에 다음과 같이 코드를 작성하면,\r\n      <div className=\"code\">std::sort(v.begin(),v.end(),cmp);</div>\r\n      문제에서 원하는 값이 나오게 된다. 이상 포스팅 끝.\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App\r\n",["132","133"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\3.js",["134","135"],"import React,{Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1018_1.PNG'\r\nimport Img2 from './img/1018_2.PNG'\r\nclass App extends Component{\r\n\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n        <h1>체스판 다시 칠하기<h3>(정답률 : 46.526%)</h3></h1>\r\n        <h4>\r\n        이번 문제는 단순 알고리즘 문제이다. 입력받은 체스판에서 8*8모양으로 추출한 후 체스판의 규격에 맞게<br/><br/>\r\n        색칠을 다시 해주고, 이렇게 색칠된 횟수를 계산하여 가장 적게 색칠할 수 있는 횟수를 찾는게 풀이이다.<br/><br/>\r\n        처음 문제를 보고, python을 활용하여 문제를 풀면 쉽게 풀릴 것으로 생각이 되었다.<br/><br/>\r\n        하지만 C++을 이용하여 문제를 풀어보았다.<br/><br/>\r\n        가장 먼저 떠오른 아이디어는 이미지처리에서 사용하는 필터의 개념이었다. 입력받은 값을 이미지의 값으로<br/><br/>\r\n        생각을 하고 필터가 돌면서 색칠해야하는 경우(처음이 검은색, 처음이 흰색)중 작은 값을 선택하고, 이전의<br/><br/>\r\n        최소값과 비교해 값을 가져가는 방식으로 해보았다.<br/><br/>\r\n        먼저 흰색, 검은색 보드를 선언해 주었다.<br/><br/>\r\n        <img src={Img1} className=\"code\"/><br/><br/>\r\n        이렇게 필터(보드)를 만들어 주고 각 이미지를 돌면서 비교를 한다.<br/><br/>\r\n        아래는 핵심 알고리즘이다.<br/><br/>\r\n        <img src={Img2} className=\"code\"/><br/><br/>\r\n        두가지 필터를 돌면서 최소값을 찾아주고, 이전의 최소값과 비교하여 최종값을 반환한다.<br/><br/>\r\n        문제 차제는 난이도가 어렵지않지많, 시간을 줄이기를 신경쓴다면 어렵게 풀수 있을것 같다.<br/><br/>\r\n        또 문제를 처음에 잘못읽어 어렵게 풀었는데, 다음부터는 문제를 잘 읽어야겠다. 이상 포스팅 끝<br/><br/>\r\n\r\n        </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\4.js",["136"],"import React,{Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1010.PNG'\r\n\r\nclass App extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>다리 놓기<h3>(정답률 : 48.517%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 다리놓기 문제로 양쪽에 목적지를 갖고, 다리가 겹치지 않게 놓을 때의 경우의 수를 구하는 문제이다.<br/><br/>\r\n      문제를 읽었을 때는 어려워 보이지만 조금만 생각해보면 순열공식을 이용한다면 금방 풀 수 있는 문제이다.<br/><br/>\r\n      문제 조건이 0 &lt; N &lt;=M &lt; 30 이므로 조합공식인 mPn을 이용한다.<br/><br/>\r\n      이를 간단하게 풀면 M!/(M-N)!N! 로 볼 수 있다.<br/><br/>\r\n      아래는 알고리즘이다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      단순히 M!, (M-N)!, N!를 각각 따로 계산하면 오버플로가 발생하기 때문에 반복문을 돌 때 값을 나누는 작업을 동시에 해줘야한다.<br/><br/>\r\n      반복문을 돌면서 1부터 M을 곱하는 동시에 1부터 N과 1부터 M-N을 나눠 주는 작업을 반복문 한번을 돌면서 실행한다.<br/><br/>\r\n      문제가 요구하는게 빠른 계산이기 때문에 재귀함수와 같이 시간이 오래 걸리는 알고리즘은 가급적 피해주었다. 이상 포스팅 끝 <br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n",["137","138"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\5.js",["139"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1051.PNG'\r\n\r\nclass App extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>숫자 정사각형<h3>(정답률 : 37.492%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 주어진 직사각형(N*M)안에 입력받은 정수가 모든 칸을 차지하고 있다.<br/><br/>\r\n      이 직사각형 안에서는 정사각형이 존재하는데, 이 정사각형의 꼭짓점에 숫자 4개가 모두 같은 정사각형 중에 가장 큰 정사각형의 크기를 구하면된다.<br/><br/>\r\n      예를 들어 다음과 같이 입력이 되었을 때, 9라는 값이 출력되어야 한다.<br/><br/>\r\n      <div className='code'>3 5<br/>42101<br/>22100<br/>22101</div>\r\n      이때 생각한 알고리즘은 이미지프로세싱에서 사용하는 필터의 개념을 생각 하였다.<br/><br/>\r\n      핵심 알고리즘의 코드는 다음과 같다.\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      N과 M 중 작은 숫자를 정사각형의 최대 크기로 잡고, 직사각형안을 순회한다.<br/><br/>\r\n      순회 후 조건에 맞는 정사각형이 없을 경우 변의 길이를 1씩 감소시키면서 처음부터 반복한다.<br/><br/>\r\n      이렇게 찾게되면 변의 길이를 제곱하여 반환을 하면, 원하는 값이 나온다.<br/><br/>\r\n      이번 문제는 어렵지는 않지만, 정사각형이 직사각형 안을 돌아 다닐때, 인덱스를 주의해야한다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\6.js",["140"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1037.PNG'\r\n\r\nclass App extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>약수<h3>(정답률 : 49.574%)</h3></h1>\r\n      <h4>이번 문제는 양수 A가 N의 진짜 약수가 되려면, N이 A의 배수이고, A가 1과 N이 아니어야 한다.<br/><br/>\r\n      어떤 수 N의 진짜 약수가 모두 주어질 때, N을 구하는 프로그램을 작성하시오.라는 문제이다. 생각해보면 매우 간단한 문제이다.<br/><br/>\r\n      약수의 개수가 짝수개 나오면 중간의 2개를 곱한 값이 N이 될것이고, 홀수일 경우 중간의 값을 제곱하면 N이 될것이다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      코드는 위와 같다.<br/><br/>\r\n      이 문제는 조금만 생각하면 금방 풀 수 있는 문제 코드만 봐도 금방 이해할 수 있다.<br/><br/>\r\n      이상 포스팅 끝\r\n\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n",["141","142"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\2.js",["143","144"],"import React,{Component} from 'react'\r\nimport Img1 from './img/react_start2.PNG'\r\nimport Img2 from './img/react_start3.PNG'\r\nclass App extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>리액트의 기본</h1>\r\n      <h4>이번 포스팅에서는 리액트의 기본적인 이해를 하기 위한 포스팅이다.<br/><br/>\r\n      리액트는 html과 js를 같이 사용할 수 있는 jsx를 사용하게 된다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      이와 같이 index.js에서 App이라는 컴포넌트를 불러와 랜더링하게 되는데, 이때 App의 코드는 아래와 같다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      여기서 return 부분에서 js와 html을 사용하게 되면 그에 맞게 렌더링을 하고 이를 index.js에서 다시 렌더링을 통해 웹페이지를 보여준다.<br/><br/>\r\n      리턴되는 컴포넌트는 하나여야하기 때문에 div태그와 같은 것으로 한번에 다 감싼후 그 안에서 코드를 짜는 것이 바람직한 것 같다.<br/><br/>\r\n      중괄호는 js코드나 문자열과 변수의 합과 같이 다양하게 사용할 수 있어 나중에 state나 props를 활용할때 유용하게 사용된다.<br/><br/>\r\n      이제부터 현재 보고있는 이 블로그를 개발하면서 공부하게된 내용들을 포스팅해 나갈 계획이다.<br/><br/> 이상 포스팅 끝<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n",["145","146"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\3.js",["147","148","149"],"import React,{Component} from 'react'\r\nimport '../App.js'\r\nimport Img1 from './img/study1_1.PNG'\r\nimport Img2 from './img/study1_2.PNG'\r\nimport Img3 from './img/study1_3.PNG'\r\n\r\nclass App extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>블로그 메뉴창 만들기</h1>\r\n      <h4>\r\n      가장 먼저 블로그를 구상하기 위해서 구조를 어떻게 할 것 인가를 생각해 보자.<br/><br/>\r\n      먼저 가장 먼저 생각한 것은 페이지 이동없이 한 페이지 안에서 모든 것을 볼 수 있는 블로그였다.<br/><br/>\r\n      이를 위해서는 리액트 라우터를 사용해야 한다. 하지만 최대한 리액트 자체만의 구현을 하기위해 사용하지않았다.<br/><br/>\r\n      구조는 다음과 같이 구상했다.\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      우선 index.js에서 app.js를 보여주고 app.js에서 모든 메뉴를 관리하는 구조로 구상이 되었다.<br/><br/>\r\n      이제 app.js에서 관리해주는 각각의 메뉴 페이지는 각자 자신의 리스트를 갖고 리스트를 관리한다.<br/><br/>\r\n      이를 수행하기 위해서는 기본적으로 리액트의 state를 이해해야 수행할 수 있다.<br/><br/>\r\n      <h3>state란?</h3>\r\n      state는 컴포넌트의 특성 상태를 화면에 동적으로 반영해주는 기능을 위한 객체이다. 컴포넌트가 독립적으로 갖는 상태인것인다.<br/><br/>\r\n      사용 예시는 다음과 같다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      이렇게 사용된 state는 setState함수를 통해 변경을 할 수 있는데, 변화되는 즉각 반응하여 웹사이트에 보여진다.<br/><br/>\r\n      이를 사용하여 메뉴를 클릭하면 클릭에 따라 각각에 맞는 state를 변화시켜 그 컴포넌트를 보여주는 작업을 하게 된다.<br/><br/>\r\n      이렇게 메뉴창을 클릭할 때 마다 그에 맞는 컴포넌트를 보여주도록 하면 되는데 state에 이동할 메뉴의 리스트와 현재 메뉴상태를 나타내는 정보를 준다.<br/><br/>\r\n      이후 map함수와 onClick을 통해서 메뉴를 바꿔주는 함수를 실행하고 클릭마다 상태를 변환해준다.<br/><br/>\r\n      위의 이미지가 첫번째 버튼은 버튼을 클릭하기전이고, 두번째 버튼이 버튼을 클릭한 후이다.<br/><br/>\r\n      구현된 메뉴창은 다음과 같고 map함수를 통해 상태에서 페이지 이름을 setState에 보내주어 클릭마다 상태를 변경해준다.<br/><br/>\r\n      render아래 두줄은 다음 포스팅때 설명하겠다.<br/><br/>\r\n      <img src={Img3} className=\"code\"/><br/><br/>\r\n      이렇게 구현된 페이지는 현재 보고있는 블로그의 메뉴처럼 작동하게 된다.<br/><br/>\r\n      이상 포스팅 끝\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\4.js",["150","151","152","153","154"],"import React,{Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/study2_1.PNG'\r\nimport Img2 from './img/study2_2.PNG'\r\nimport Img3 from './img/study2_3.PNG'\r\nimport Img4 from './img/study2_4.PNG'\r\nimport Img5 from './img/study2_5.PNG'\r\n\r\nclass App extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>Home_Page만들기</h1>\r\n      <h3>map함수와 페이지 제목바꾸기</h3>\r\n      <h4>\r\n      Home_Page만들기에 앞서서 Home_Page와 별개로 저번 포스팅의 map함수와 htmlTitle.innerText에 대해 설명하겠다.<br/><br/>\r\n      map함수의 경우 state에 list값이 많을 경우에 중복된 코드 방지에 사용하기에 적합하다.<br/><br/>\r\n      사용법은 다음과 같다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      이렇게 this.state.value의 값을 map함수를 통해 호출하는 것이다. 갯수가 적을 때는 문제가없지만, list가 셀수없이 늘어나면 아주 효율적인 코드이다.<br/><br/>\r\n      e가 value에 있는 리스트의 값을 하나씩 돌면서 모든 값을 호출해 주는것을 볼 수 있다.<br/><br/>\r\n      다음은 htmlTitle.innerText코드이다. 이는 메뉴창 이동마다 홈페이지 타이틀을 변경해주는 코드이고 사용법은 다음과 같다.<br/><br/>\r\n      <div className=\"code\">\r\n      const htmlTitle = document.querySelector(\"title\");<br/><br/>\r\n      htmlTitle.innerText = this.state.site;</div><br/><br/>\r\n      htmlTitle이라는 변수에 title아이디 값을 가진 쿼리 엘리먼트를 가져와 저장한다.<br/><br/>\r\n      그리고 htmlTitle.innerText를 이용해서 상태가 변할때마다 값을 변경해준다.<br/><br/>\r\n      다음은 홈페이지를 만드는 코드이다.<br/><br/>\r\n      <img src={Img3} className=\"code\"/><br/><br/>\r\n      먼저 블로그의 기본적인 설명으로 시작하여, 홈페이지에는 리액트에 여러가지 공부에서 활용할 것이며 My_Study와 연동하여 쓸 것으로 처음에는 props를 이해하기 위해\r\n      값을 props로 My_Study에 보내서 값을 확인 할 수 있게 하였다.<br/><br/>\r\n      <img src={Img4} className=\"code\"/><br/><br/>\r\n      getElementById함수로 title과 text부분의 값들을 가져와 주고, 이를 add_post함수를 통해 보내주게 되는것 이다. add_post의 경우 props를 통해 App.js에서 보내준 함수이다.<br/><br/>\r\n      <img src={Img5} className=\"code\"/><br/><br/>\r\n      App.js에서 데이터를 관리하며 이 데이터는 Home_Page에서 직접관리할 수 없다.<br/><br/>\r\n      이 데이터를 수정하기 위한 방법은 App.js에서 만든 add_post를 Home_Page에 보내서 관리를 해줘야한다.<br/><br/>\r\n      Home_Page에서 만든 함수는 App.js에서 받은 데이터를 직접 수정할 수 없기 때문에 App.js에서 데이터를 관리하는 함수를 받아 간접적으로 수정하는 방식이다.<br/><br/>\r\n      add_post함수는 App.js에 있는 state 값에 concat함수를 통해 리스트를 입력받는대로 늘려준다.<br/><br/>\r\n      이렇게 App.js에 추가된 데이터는 다시 props로 My_Study에 값을 보내준다.<br/><br/>\r\n      Home_Page.js에서 App.js로 App.js에서 My_Study.js로 입력한 값을 보내주게 된다.<br/><br/>\r\n      <div className=\"code\">&lt;Home_Page add_post=&#123;this.add_post&#125;state=&#123;this.state&#125;/&gt;</div>\r\n      이런 코드로 this.add_post를 My_Study컴포넌트에 메세지로 보내준다.<br/><br/>\r\n      다음 포스팅은 이렇게 보낸 데이터를 받아 My_Study에서 보여주고 관리하는 방법을 포스팅한다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\listOfContents.js",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\index.jsx",["155"],{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":26,"column":60,"nodeType":"162","messageId":"163","endLine":28,"endColumn":16},{"ruleId":"164","severity":1,"message":"165","line":37,"column":52,"nodeType":"166","endLine":37,"endColumn":124},{"ruleId":"167","severity":1,"message":"168","line":44,"column":23,"nodeType":"169","messageId":"170","endLine":44,"endColumn":25},{"ruleId":"171","severity":1,"message":"172","line":50,"column":11,"nodeType":"166","endLine":50,"endColumn":67},{"ruleId":"167","severity":1,"message":"168","line":54,"column":23,"nodeType":"169","messageId":"170","endLine":54,"endColumn":25},{"ruleId":"167","severity":1,"message":"168","line":64,"column":23,"nodeType":"169","messageId":"170","endLine":64,"endColumn":25},{"ruleId":"171","severity":1,"message":"173","line":70,"column":11,"nodeType":"166","endLine":70,"endColumn":72},{"ruleId":"167","severity":1,"message":"168","line":74,"column":23,"nodeType":"169","messageId":"170","endLine":74,"endColumn":25},{"ruleId":"164","severity":1,"message":"165","line":13,"column":58,"nodeType":"166","endLine":13,"endColumn":131},{"ruleId":"164","severity":1,"message":"165","line":13,"column":58,"nodeType":"166","endLine":13,"endColumn":131},{"ruleId":"167","severity":1,"message":"168","line":10,"column":50,"nodeType":"169","messageId":"170","endLine":10,"endColumn":52},{"ruleId":"167","severity":1,"message":"168","line":8,"column":50,"nodeType":"169","messageId":"170","endLine":8,"endColumn":52},{"ruleId":"171","severity":1,"message":"174","line":22,"column":50,"nodeType":"166","endLine":22,"endColumn":64},{"ruleId":"167","severity":1,"message":"168","line":10,"column":50,"nodeType":"169","messageId":"170","endLine":10,"endColumn":52},{"ruleId":"175","severity":1,"message":"176","line":6,"column":8,"nodeType":"177","messageId":"178","endLine":6,"endColumn":12},{"ruleId":"179","severity":1,"message":"180","line":19,"column":9,"nodeType":"166","endLine":19,"endColumn":26},{"ruleId":"179","severity":1,"message":"180","line":23,"column":9,"nodeType":"166","endLine":23,"endColumn":26},{"ruleId":"179","severity":1,"message":"180","line":27,"column":9,"nodeType":"166","endLine":27,"endColumn":26},{"ruleId":"179","severity":1,"message":"180","line":29,"column":9,"nodeType":"166","endLine":29,"endColumn":26},{"ruleId":"179","severity":1,"message":"180","line":30,"column":9,"nodeType":"166","endLine":30,"endColumn":26},{"ruleId":"179","severity":1,"message":"180","line":15,"column":7,"nodeType":"166","endLine":15,"endColumn":40},{"ruleId":"179","severity":1,"message":"180","line":13,"column":7,"nodeType":"166","endLine":13,"endColumn":40},{"ruleId":"179","severity":1,"message":"180","line":23,"column":7,"nodeType":"166","endLine":23,"endColumn":41},{"ruleId":"156","replacedBy":"181"},{"ruleId":"158","replacedBy":"182"},{"ruleId":"179","severity":1,"message":"180","line":21,"column":9,"nodeType":"166","endLine":21,"endColumn":43},{"ruleId":"179","severity":1,"message":"180","line":24,"column":9,"nodeType":"166","endLine":24,"endColumn":43},{"ruleId":"179","severity":1,"message":"180","line":16,"column":7,"nodeType":"166","endLine":16,"endColumn":41},{"ruleId":"156","replacedBy":"183"},{"ruleId":"158","replacedBy":"184"},{"ruleId":"179","severity":1,"message":"180","line":17,"column":7,"nodeType":"166","endLine":17,"endColumn":41},{"ruleId":"179","severity":1,"message":"180","line":13,"column":7,"nodeType":"166","endLine":13,"endColumn":41},{"ruleId":"156","replacedBy":"185"},{"ruleId":"158","replacedBy":"186"},{"ruleId":"179","severity":1,"message":"180","line":11,"column":7,"nodeType":"166","endLine":11,"endColumn":41},{"ruleId":"179","severity":1,"message":"180","line":13,"column":7,"nodeType":"166","endLine":13,"endColumn":41},{"ruleId":"156","replacedBy":"187"},{"ruleId":"158","replacedBy":"188"},{"ruleId":"179","severity":1,"message":"180","line":17,"column":7,"nodeType":"166","endLine":17,"endColumn":41},{"ruleId":"179","severity":1,"message":"180","line":24,"column":7,"nodeType":"166","endLine":24,"endColumn":41},{"ruleId":"179","severity":1,"message":"180","line":32,"column":7,"nodeType":"166","endLine":32,"endColumn":41},{"ruleId":"175","severity":1,"message":"189","line":4,"column":8,"nodeType":"177","messageId":"178","endLine":4,"endColumn":12},{"ruleId":"179","severity":1,"message":"180","line":19,"column":7,"nodeType":"166","endLine":19,"endColumn":41},{"ruleId":"179","severity":1,"message":"180","line":29,"column":7,"nodeType":"166","endLine":29,"endColumn":41},{"ruleId":"179","severity":1,"message":"180","line":32,"column":7,"nodeType":"166","endLine":32,"endColumn":41},{"ruleId":"179","severity":1,"message":"180","line":34,"column":7,"nodeType":"166","endLine":34,"endColumn":41},{"ruleId":"167","severity":1,"message":"168","line":7,"column":50,"nodeType":"169","messageId":"170","endLine":7,"endColumn":52},"no-native-reassign",["190"],"no-negated-in-lhs",["191"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-pascal-case","Imported JSX component Home_Page must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component My_Study must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component React_study must be in PascalCase or SCREAMING_SNAKE_CASE","no-unused-vars","'Img4' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["190"],["191"],["190"],["191"],["190"],["191"],["190"],["191"],"'Img2' is defined but never used.","no-global-assign","no-unsafe-negation"]