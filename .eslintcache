[{"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\index.js":"1","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\My_Study.js":"2","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting5.jsx":"3","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting3.jsx":"4","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting2.jsx":"5","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting1.jsx":"6","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\listOfContents.js":"7","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting16.jsx":"8","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Posting.js":"9","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting7.jsx":"10","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\index.jsx":"11","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Link.js":"12","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Home_Page.js":"13","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\index.js":"14","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\android_study\\index.js":"15","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\android_study\\listOfContents.js":"16","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\android_study\\Posting1.jsx":"17","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\index.jsx":"18","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting5.jsx":"19","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting2.jsx":"20","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting8.jsx":"21","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting11.jsx":"22","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting14.jsx":"23","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\listOfContents.jsx":"24","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting6.jsx":"25","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting6.jsx":"26","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting10.jsx":"27","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting4.jsx":"28","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting3.jsx":"29","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting7.jsx":"30","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting12.jsx":"31","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting13.jsx":"32","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting2.jsx":"33","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting3.jsx":"34"},{"size":150,"mtime":1611304067765,"results":"35","hashOfConfig":"36"},{"size":1327,"mtime":1613455619765,"results":"37","hashOfConfig":"36"},{"size":5990,"mtime":1615914504482,"results":"38","hashOfConfig":"36"},{"size":2108,"mtime":1613451231086,"results":"39","hashOfConfig":"36"},{"size":3258,"mtime":1615914507683,"results":"40","hashOfConfig":"36"},{"size":2154,"mtime":1613451406351,"results":"41","hashOfConfig":"36"},{"size":1834,"mtime":1616407228277,"results":"42","hashOfConfig":"36"},{"size":2408,"mtime":1616409760250,"results":"43","hashOfConfig":"36"},{"size":1519,"mtime":1618057522195,"results":"44","hashOfConfig":"36"},{"size":3002,"mtime":1615100633143,"results":"45","hashOfConfig":"36"},{"size":1108,"mtime":1616409275803,"results":"46","hashOfConfig":"36"},{"size":729,"mtime":1612687700904,"results":"47","hashOfConfig":"36"},{"size":1484,"mtime":1615477466152,"results":"48","hashOfConfig":"36"},{"size":1138,"mtime":1614837572742,"results":"49","hashOfConfig":"36"},{"size":1034,"mtime":1618057578074,"results":"50","hashOfConfig":"36"},{"size":110,"mtime":1618054531918,"results":"51","hashOfConfig":"36"},{"size":3283,"mtime":1618060092211,"results":"52","hashOfConfig":"36"},{"size":1059,"mtime":1614837932164,"results":"53","hashOfConfig":"36"},{"size":2884,"mtime":1615100606714,"results":"54","hashOfConfig":"36"},{"size":2402,"mtime":1613451407995,"results":"55","hashOfConfig":"36"},{"size":2870,"mtime":1614067704076,"results":"56","hashOfConfig":"36"},{"size":2497,"mtime":1614144188790,"results":"57","hashOfConfig":"36"},{"size":3870,"mtime":1615099723901,"results":"58","hashOfConfig":"36"},{"size":441,"mtime":1615809873653,"results":"59","hashOfConfig":"36"},{"size":1615,"mtime":1615100618358,"results":"60","hashOfConfig":"36"},{"size":1070,"mtime":1613451255250,"results":"61","hashOfConfig":"36"},{"size":1870,"mtime":1614144194423,"results":"62","hashOfConfig":"36"},{"size":6134,"mtime":1615303082477,"results":"63","hashOfConfig":"36"},{"size":3315,"mtime":1615477113763,"results":"64","hashOfConfig":"36"},{"size":1644,"mtime":1614065159152,"results":"65","hashOfConfig":"36"},{"size":2986,"mtime":1614147858179,"results":"66","hashOfConfig":"36"},{"size":1840,"mtime":1614419496382,"results":"67","hashOfConfig":"36"},{"size":1539,"mtime":1613451113715,"results":"68","hashOfConfig":"36"},{"size":3591,"mtime":1615103001788,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"151ouc9",{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"80"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"92"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"92"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"92"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"80"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"92"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"86"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"86"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"80"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"86"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\index.js",[],["161","162"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\My_Study.js",["163"],"import React, {Component} from 'react';\r\nimport './App.css'\r\nimport './bootstrap/css/bootstrap.css'\r\nclass My_Study extends Component{\r\n  remove_post=(title)=>{\r\n    this.props.remove_post(title.key)\r\n  }\r\n  change=(id,bid)=>{\r\n    if(document.getElementById(id).style.display ==\"block\"){\r\n      document.getElementById(id).style.display =\"none\";\r\n      document.getElementById(bid).innerText=\"보기\";\r\n    }\r\n    else{\r\n      document.getElementById(id).style.display =\"block\";\r\n      document.getElementById(bid).innerText=\"닫기\";\r\n    }\r\n  }\r\n\r\n  render(){\r\n      return (\r\n        <div className=\"My_Study\">\r\n          <p className=\"body\">\r\n          <div>웹페이지를 공부하는 메뉴입니다. 게시판을 만들 계획입니다.</div>\r\n          {this.props.state.title.map((key,index)=>{return (\r\n            <div className=\"list\">{key}\r\n              <button className=\"button_box\" id={key} onClick = {()=>{this.change(index,key)}}>보기</button>\r\n              <button className=\"button_box\" onClick={()=>{this.remove_post({key})}}>제거</button>\r\n              <div id={index} style={{display:\"none\"}}dangerouslySetInnerHTML={ {__html: this.props.state.text[index]} }>\r\n              </div>\r\n            </div>\r\n          )})}\r\n          </p>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default My_Study;\r\n",["164","165"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting5.jsx",["166","167","168","169","170","171","172","173","174","175","176","177"],"import React, {Component} from 'react'\r\nimport Img1 from './img/4-1.PNG'\r\nimport Img2 from './img/4-2.PNG'\r\nimport Img3 from './img/4-3.PNG'\r\nimport Img4 from './img/4-4.PNG'\r\nimport Img5 from './img/4-5.PNG'\r\nimport Img6 from './img/4-6.PNG'\r\nimport Img7 from './img/4-7.PNG'\r\nimport Img8 from './img/4-8.PNG'\r\nimport Img9 from './img/4-9.PNG'\r\nimport Img10 from './img/4-10.PNG'\r\nimport Img11 from './img/4-11.PNG'\r\nimport Img12 from './img/4-12.PNG'\r\n\r\nclass Posting3 extends Component{\r\n  render(){\r\n    return(\r\n      <div class=\"left\">\r\n      <h1>Decision Tree-실습</h1>\r\n      <h4>\r\n      사용된 패키지는 다음과 같다.<br/><br/>\r\n      <img src={Img1} class=\"code\"/><br/><br/>\r\n      우선 가장 먼저 해볼 분석은 아무것도 하지 않은 상태로 기본 DecisionTreeClassifier를 사용하는 것이다.<br/><br/>\r\n      <img src={Img2} class=\"code\"/><br/><br/>\r\n      위 처럼 train data에 대해서 정확도가 100%인 것을 보니 문제없이 overfitting을 한것을 알 수 있고, test data에 대해서는 99%의 정확도를 보인다.<br/><br/>\r\n      학습된 데이터를 시각화하면 다음과 같고 리프노드 즉, class의 분류 갯수는 207개 인것을 알 수 있다.<br/><br/>\r\n      <img src={Img3} class=\"code\"/><br/><br/>\r\n      다음으로 해볼 것은 feature_importance이다. feature_importance란?<br/><br/>\r\n      주어진 데이터는 한가지의 정보만 가지고 있는게 아니다. 여러가지 속성을 가지고 있고, 그중 중요한것과 중요하지 않은것이 나뉠 것이다.<br/><br/>\r\n      DecisionTreeClassifier에서는 이것을 비율로 정리해주는 퍼센트가 있고 그 함수는 feature_importances_이다. 이번에 해볼 것은 이 feature_importances_를 이용해 몇개의 속성만 가지고 해볼 것이다.<br/><br/>\r\n      <img src={Img4} class=\"code\"/><br/><br/>\r\n      이렇게 코드를 짜서 가장 중요한 3번째 순서까지 데이터를 다시 뽑아서 학습을 시켜봤다.<br/><br/>\r\n      학습시킨 트리를 시각화하면 아래와 같고, 정확도는 96%가 나왔다.<br/><br/>\r\n      아무런 조건없이 모든 속성을 사용한것 보다는 정확도가 조금 낫게 나왔지만, 적은 속성을 사용하고도 괜찮은 성능을 가질 수 있다는 것을 확인 할 수 있었다.<br/><br/>\r\n      처음에는 이렇게 하면 연산량에서도 낮게 나올 것이라고 생각을 했는데 그렇지는 못했다. 아래 그림을 보면 알겠지만, 훨씬더 많은 리프노드가 있는 것을 알 수 있고 실제로 1326개를 생성했다.<br/><br/>\r\n      <img src={Img5} class=\"code\"/><br/><br/>\r\n      전처리없이 사용한 데이터는 시각화하기 까다로웠지만, feature_importance를 통해 3차원으로 만든 데이터는 시각화를 하기 편리하다는 장점도 생겼다. 그렇게 시각화한 데이터는 아래처럼 나온다.<br/><br/>\r\n      <img src={Img6} class=\"code\"/><br/><br/>\r\n      데이터는 유방암 발병과 관련된 데이터이며, 실제로 DT의 경우 그렇게 성능이 좋은 편은 아니지만, 여기서는 좋게나온 이유를 데이터를 보면 알 수 있다.<br/><br/>\r\n      기본적으로 데이터가 한눈에 봐도 분류하기 좋게 나와있으며, 이것은 중요도가 가장높은 3가지를 추출한 것이고, 다른 추가적인 데이터가 주어지면 더 정확해 질수 밖에 없다.<br/><br/>\r\n      다음으로는 트리의 여러가지 조건을 부여하여 분석해 보겠다.<br/><br/>\r\n      <h3>ccp_alpha</h3>\r\n      처음에는 ccp알파를 이용해서 해보았다.<br/><br/>\r\n      <img src={Img7} class=\"code\"/><br/><br/>\r\n      cost_complexity_pruning_path를 이용하면 inpurity와 ccp_alpha를 구할 수 있다. 여기서 ccp_alpha는 pruning하는 과정에서 cost함수의 &alpha;를 의미한다.<br/><br/>\r\n      비교는 class에 weight를 주어 비교를 해보았다. 가지를 뻗어가는 과정에서는 비중을 주어 비교해보고, pruning과정에서는 ccp_alpha의 변화를 주어 비교해 보았다.<br/><br/>\r\n      <img src={Img8} class=\"code\"/><br/><br/>\r\n      ccp_alpha의 경우 사용자가 직접 설정을 해주면서 찾아봐야하는데, 그래프를 볼때 0.0002740688정도가 가장 적합했다.<br/><br/>\r\n      그리고 class에 weight 부여했을 때 거의 모든 경우에서 정확도가 높게 나왔다.<br/><br/>\r\n      <h3>max_leaf_nodes</h3>\r\n      이번에는 리프노드에 제한을 주어서 비교를 해보았다. 코드는 아래와 같다.<br/><br/>\r\n      <img src={Img9} class=\"code\"/><br/><br/>\r\n      코드를 보면 알겠지만, DT의 리프노드를 구한뒤에 제한을 10개부터 기본 DT의 리프노드 갯수까지 10개씩 늘려가면서 비교를하게된다.<br/><br/>\r\n      추가로 weight를 비교해본다.<br/><br/>\r\n      <img src={Img10} class=\"code\"/><br/><br/>\r\n      리프노드의 경우는 갯수가 어느정도 올라가면 큰 차이를 보이지 못한다. weight는 초반에는 차이가 있지만 나중에가면 거의 차이가 없는것을 볼 수 있다.<br/><br/>\r\n      class_weight를 설정한게 더 정확도가 낮게나오다가 리프노드가 많아지면 점차 비슷해지거나 더 높게 나오는 것을 알 수있다.<br/><br/>\r\n      <h3>max_depth</h3>\r\n      이번에는 깊이를 비교하면서 해보았다.<br/><br/>\r\n      <img src={Img12} class=\"code\"/><br/><br/>\r\n\r\n      <img src={Img11} class=\"code\"/><br/><br/>\r\n      깊이가 깊어질수록 정확도는 올라가며 적정수준이 되면 큰 변화가 없는 것을 확인할 수 있었고, 동시에 weight도 초반에만 영향을 주고 거의 영향이 없는것을 볼 수 있었다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      <a href=\"https://github.com/jae-yong-2/ML_STUDY/blob/main/DT.ipynb\">github</a>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting3\r\n",["178","179"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting3.jsx",["180","181"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting2.jsx",["182","183","184","185","186","187","188"],"import React, {Component} from 'react'\r\nimport Img5 from './img/1_5.PNG'\r\nimport Img6 from './img/1_6.PNG'\r\nimport Img7 from './img/1_7.PNG'\r\nimport Img8 from './img/1_8.PNG'\r\nimport Img9 from './img/1_9.PNG'\r\nimport Img10 from './img/1_10.PNG'\r\nimport Img11 from './img/1_11.PNG'\r\n\r\nclass Posting2 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>kNN-실습</h1>\r\n      <h4>\r\n      실습을 통해서 kNN을 사용해보자.\r\n      우선 사용된 패키지는 다음과 같다.<br/><br/>\r\n      <img src={Img5}className=\"code\"/><br/><br/>\r\n      iris는 불꽃 데이터로 sklearn에서 기본적으로 제공해주는 데이터이다. 아래처럼 호출후에 split함수를 이용해 랜덤으로 train과 test를 분류해 준다.<br/><br/>\r\n      <img src={Img6}className=\"code\"/><br/><br/>\r\n      아래는 k를 1~99까지 변경해가면서 kNN모델을 생성하고, 그 모델에 학습을 시켜 train과 test set에 대한 R^2를 score이라는 pd객체에 저장을 한다.<br/><br/>\r\n      <img src={Img7}className=\"code\"/><br/><br/>\r\n      이렇게 나온 k에 따른 R^2는 아래와 같은 그래프를 보이는데, 파란색이 train 빨간색이 test에 대한 결과이다.<br/><br/>\r\n      <img src={Img8}className=\"code\"/><br/><br/>\r\n      파란색과 빨간색 모두 처음에는 높게 나오다가 나중에 k가 커질수록 낮게 나오는 데, 이것은 생각해보면 당연한 결과이다.<br/><br/>\r\n      파란색의 경우는 맨처음 1일때 1에 가까운 R^2를 보여주는데, 이건 학습된 데이터를 그대로 사용했기 때문에 당연한 결과이고 갈수록 R^2가 낮아지는 것을 볼 수 있다.<br/><br/>\r\n      k가 1에 가까울 수록 overfitting으로 볼 수 있고, k가 커질수록 underfitting으로 볼 수 있다.<br/><br/>\r\n      빨간색의 경우 처음에는 1일때 좀 낮다가 9~12사이 쯤에 높은 R^2를 볼 수 있는데, 이 상황에서 train보다 R^이 높기 때문에 underfitting되었을 가능성이 크다.<br/><br/>\r\n      그럼 k는 몇일때 좋은 모델이라고 생각할 수 있을까? 개인적인 생각으로는 train과 test에 대한 R^2가 가장 비슷한 3~5일때 좋은 모델이라고 생각이 된다.<br/><br/>\r\n      그럼 실제로 예측 정확도는 어떻게 되었을까?<br/><br/>\r\n      <img src={Img9}className=\"code\"/><br/><br/>\r\n      위처럼 나온다. 위 그래프에서는 k가 1~5일때가 상당히 높은 정확도를 보이고, 그 뒤는 R^2를 고려했을 때 높더라도 그렇게 잘 학습됐다고 판단은 되지않는다.<br/><br/>\r\n      그럼 R^2과 예측 정확도를 고려해 볼때, 실제로 사용을 해야한다면 k를 3~4정도로 두고 사용할 것을 추천할 것 같다.<br/><br/>\r\n      아래는 정규화를 했을때이다. 확실히 많이 개선된 모습을 보이니 참고하자. 각각 R^2와 예측정확도이다.<br/><br/>\r\n      <img src={Img10}className=\"code\"/><br/><br/>\r\n      <img src={Img11}className=\"code\"/><br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      <a href=\"https://github.com/jae-yong-2/ML_STUDY/blob/main/kNN.ipynb\">github</a>\r\n\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting2\r\n",["189","190"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting1.jsx",["191"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport Img from './img/4344.PNG'\r\n\r\nclass Posting1 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>평균은 넘겠지<h3>(정답률 : 37.470%)</h3></h1>\r\n      <h4>\r\n      백준 4344번 문제로 평균을 넘는 학생의 수를 구하는 것이다.<br/><br/>\r\n      이 문제는 배열로 간단히 풀 수 있지만 C++에서 사용하는 vector기능을 이용하여 풀어 보았다.<br/><br/>\r\n      코드는 다음과 같다.\r\n      <br/><br/>\r\n      <img src={Img} className='code'/>\r\n      <br/><br/>\r\n      vector는\r\n      <div className=\"code\">#include &lt;vector&gt;</div>\r\n      <br/><br/>\r\n      이렇게 불러와야 사용할 수 있고\r\n      <div className=\"code\">\r\n      std::vector&lt;vector&gt; v(number);\r\n      </div>\r\n      <br/><br/>\r\n      이렇게 선언했을 때, v는 변수명, number은 백터의 사이즈 int는 자료형에 해당한다.<br/><br/>\r\n      가장 많이 쓰이는 함수 위주로 정리를 하자면<br/><br/>\r\n      <div className=\"code\">\r\n      v.front();<br/><br/>\r\n      v.back();<br/><br/>\r\n      v.push_back(number);<br/><br/>\r\n      v.pop_back();<br/><br/>\r\n      v.begin();<br/><br/>\r\n      v.end();<br/><br/>\r\n      v.size();<br/><br/>\r\n      </div><br/><br/>\r\n      위주로 사용하고, 각각 벡터의 맨처음, 마지막 잠초, 마지막 원소뒤에 number삽입, 마지막 원소 제거,\r\n      벡터 처음과 마지막 가르키기(iterater), 벡터의 사이즈반환이다.<br/><br/>\r\n      <div className=\"code\">std::accumulate(start,end,0);</div><br/><br/>\r\n      의 경우에는 벡터의 평균을 구할 때, 총합을 구하기 위해서 사용하는 코드로\r\n      <div className=\"code\">#include&lt;numeric&gt;</div><br/><br/>\r\n      에서 불러와 사용하며, 백터의 시작, 끝, 자료형으로 생각하여 사용하면 된다.\r\n      이상 벡터에 대해 알아보았다.<br/><br/>이 문제의 경우 알고리즘적으로 어려운 것은 없으니 풀이는 생략한다.\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting1;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\listOfContents.js",[],["192","193"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting16.jsx",["194","195"],"import React, {Component} from 'react'\r\nimport Img1 from './img/1012_1.PNG'\r\nimport Img2 from './img/1012_2.PNG'\r\n\r\nclass Posting15 extends Component{\r\n  render(){\r\n    return(\r\n      <div class=\"left\">\r\n      <h1>유기농 배추</h1><h3>35.745%</h3>\r\n      <h4>\r\n      이번 문제는 그래프 탐색문제로 생각할 수 있다.<br/><br/>\r\n      문제는 이차원 배열이 주어졌을 때, 0으로 기본값을 주고 배추가 심어진 부분은 1의 값을 부여한다.<br/><br/>\r\n      여기서 배추의 영역이 몇개인지 구하는 문제이다. 배추의 영역을 나누는 기준은 배추가 바로 옆칸에 연결이 연속적으로 되있는 부분을 뜻하며, 연결의 기준은 대각선을 제외한 1칸까지를 말한다. 예시로<br/><br/>\r\n      <div className=\"code\">00000101<br/><br/>00000111<br/><br/>11000000<br/><br/>01111001</div>\r\n      이런 식으로 그래프가 나오면, 3개의 영역이 존재하는 것이다.<br/><br/>\r\n      가장 먼저 생각해낸 아이디어는 \"모든 배열을 돌면서 재귀적으로 탐색하는 방법\"을 떠올렸다.<br/><br/>\r\n      인덱스를 하나하나 돌면서 지금 해당하는 배열의 값이 1일 경우 그것과 연결된 영역을 재귀로 돌면서 일일이 모두 찾아주는 방법이다.<br/><br/>\r\n      메인 코드는 다음과 같다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      배열의 타입은 pair을 사용하여 정의하였고, 이렇게 한 이유는 이미 탐색한 공간인지도 조건을 걸어주기 위함이다. second에서 탐색 유무를 정의해 주었다.<br/><br/>\r\n      이후 모든 배열을 돌면서 현재 공간에 배추가 있고, 탐색한 적이 없으면 find라는 함수를 실행해서 같은 영역의 배추를 찾아 그 영역을 모두 탐색했다고 표시해준다.<br/><br/>\r\n      find함수는 다음과 같다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      인접한 값이 비어있거나 탐색을 했을 경우 탈출을 하고, 아닌 경우 탐색을 했다고 표시를 한다. 이후 좌우 위아래를 재귀적으로 돌면서 탐색을 진행한다.<br/><br/>\r\n      이번 문제는 재귀로 접근하면 어려움없이 풀 수 있는 문제이다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Posting15\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Posting.js",["196","197"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting7.jsx",["198","199","200","201","202","203"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport Img1 from './img/study6_1.PNG'\r\nimport Img2 from './img/study6_2.PNG'\r\nimport Img3 from './img/study6_3.PNG'\r\nimport Img4 from './img/study6_4.PNG'\r\nimport Img5 from './img/study6_5.PNG'\r\nimport Img6 from './img/study6_6.PNG'\r\n\r\nclass Posting1 extends Component{\r\n    render(){\r\n      return(\r\n        <div className=\"left\">\r\n        <h1>묘듈화해보기</h1>\r\n        <h4>\r\n        이번 포스팅에서는 메뉴창이 여러개 늘어났을 때 코드가 쓸대없이 많이 늘어나는 것을 방지하기 위해서 모듈화를 해볼것이다.<br/><br/>\r\n        우선 이 블로그 기본구조가 모든 창은 컴포넌트로 각각의 jsx파일을 갖고있기 때문에 모든 jsx파일을 불러올때 한번에 묶어서 불러올수 있도록 다음과 같이 listOfContents.jsx파일을 생성해 준다.<br/><br/>\r\n        <img src={Img1} className=\"code\"/><br/><br/>\r\n        이렇게 생성한 파일안에 모든 포스팅.jsx파일을 import후에 List로 묶어서 export해준다. 코드는 다음과 같다.<br/><br/>\r\n        <img src={Img2} className=\"code\"/><br/><br/>\r\n        이제 listOfContents파일을 import하게되면 List부분이 모두 호출하게 된다. List는 모든 포스팅을 컴포넌트 형식으로 갖고있다.<br/><br/>\r\n        이를 활용하면 아래처럼 필요없는 코드를 수정할 수 있다. 두 코드는 같은 코드이다.\r\n        <div style={{display:\"flex\"}}><br/><br/>\r\n        <img src={Img3} className=\"code\"/>\r\n        <div className=\"code\">import &#123; List &#125; from './listOfContents'</div>\r\n        </div>\r\n        다음은 List를 호출한 후 활용하면 끝이나게 된다.<br/><br/>\r\n        활용법은 간단하다. 그냥 List가 listOfContents에서 불러온 List그대로 생각하여 map함수를 사용하면 코드를 줄일 수 있다.<br/><br/>\r\n        아래는 수정 전 코드와 수정 후 코드이며, 둘다 똑같이 작동을 한다.<br/><br/>\r\n        <img src={Img5} className=\"code\"/><br/><br/>\r\n        <img src={Img6} className=\"code\"/><br/><br/>\r\n        여기서 주의할 점은 id값을 잘 줘야한다는 것이다.<br/><br/>\r\n        처음에 map함수에서 부여해주는 index값을 그대로 사용했다가 알고리즘에서 사용한 id값이 겹친다는 것을 알았다. 코드상에서는 id가 떨저여있어 문제가 없다고 생각하여 사용했지만\r\n        실제로는 같은 페이지에서 작동을 하기때문에 id값의 충돌이 일어난 것이다. 다음에는 이런 실수가 없도록 하자.<br/><br/>\r\n        이제 listOfContents에서 import만 해주면 생성한 페이지를 바로 렌더링할 수 있다.<br/><br/>\r\n        다음 포스팅은 리액트앱을 깃허브에 배포하는 방법을 포스팅 하겠다.<br/><br/>\r\n        이상 포스팅 끝<br/><br/>\r\n\r\n        </h4>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nexport default Posting1;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\index.jsx",["204"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport { List } from './listOfContents';\r\n\r\nclass App extends Component{\r\n  change=(id,bid)=>{\r\n    if(document.getElementById(id).style.display ==\"block\"){\r\n      document.getElementById(id).style.display =\"none\";\r\n      document.getElementById(bid).innerText=\"보기\";\r\n    }\r\n    else{\r\n      document.getElementById(id).style.display =\"block\";\r\n      document.getElementById(bid).innerText=\"닫기\";\r\n    }\r\n  }\r\n    render(){\r\n      return(\r\n        <div>\r\n        <a href=\"https://github.com/jae-yong-2/Algorithm\">github</a>\r\n            {List.map((i,idx)=>{return(\r\n              <div>\r\n                <li className=\"list\">\r\n                  {i.title}\r\n                  <button className=\"button_box\" id={i.title} onClick = {()=>{this.change(`algorithm${idx}`, i.title)}}>\r\n                    보기\r\n                  </button>\r\n                </li>\r\n                <div id={`algorithm${idx}`} className=\"post_list\">{i.content}</div>\r\n              </div>\r\n            )})}\r\n        </div>\r\n      );\r\n    }\r\n}\r\nexport default App;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Link.js",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\Home_Page.js",["205"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\index.js",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\android_study\\index.js",["206"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\android_study\\listOfContents.js",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\android_study\\Posting1.jsx",["207","208","209","210","211","212"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\index.jsx",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting5.jsx",["213","214","215"],"import React,{Component} from 'react'\r\nimport Img1 from './img/study3_1.PNG'\r\nimport Img2 from './img/study5_2.PNG'\r\nimport Img3 from './img/study3_2.PNG'\r\n\r\nclass Posting6 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>My_Study 페이지 만들기</h1>\r\n      <h4>\r\n      이번에는 저번 시간에 이어서 My_Study페이지를 생성해본다. 이전에 props로 My_Study에 state를 전달했었다.<br/><br/>\r\n      이 데이터를 활용해보기 위해 게시판처럼 만들었고 return 하는 코드는 다음과 같다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      <div className=\"code\">&lt;Parent data=&#123;this.state&#125;/&gt;</div>\r\n      만약 부모 컴포넌트에서 위와 같이 값을 전달했을 경우<br/><br/>\r\n      <div className=\"code\">this.props.data</div>\r\n      이런 식으로 데이터 사용이 가능하다.<br/><br/>\r\n      이렇게 전달 받은 state와 map함수를 통해서 title배열을 돌면서 전달 받은 값을 보여준다.<br/><br/>\r\n      key값은 제목을 this.state.state.text[index]로 내용을 보여준다. style은 display:\"none\"을 하여 보기 버튼을 누를때만 보이게 설정을 해둔다.<br/><br/>\r\n      보기와 제거 함수는 아래와 같다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      보기 함수의 경우 클릭마다 내용을 보여주고 가려주고를 하게 한다. 이는 id를 index나 key을 주어 그에 해당하는 div나 button이 반응하게 했다.<br/><br/>\r\n      remove함수의 경우 App.js에서 상태를 갖고있기 때문에 이벤트를 가져와서 사용한다. 코드는 다음과 같다.<br/><br/>\r\n      <img src={Img3} className=\"code\"/><br/><br/>\r\n      여기서는 데이터를 지울때 slice와 concat함수를 사용해 봤다.<br/><br/>\r\n      slice함수는 매개변수 2개를 사용하는데, 첫번째 인덱스에서 두번째 인덱스까지의 데이터를 가져오는 것이다.<br/><br/>\r\n      예를 들어 slice(0,10)일경우 배열 인덱스 0에서 9까지의 값을 가져온다.<br/><br/>\r\n      concat함수의 경우 뒤에 값을 붙혀주는 함수이다.<br/><br/>\r\n      이 두가지를 합쳐 slice(0,index)와 slice(index+1,array.length)를 concat으로 합쳐주면 index의 위치에 있는 값이 지워지게 되는것이다.<br/><br/>\r\n      indexOf 함수는 그 배열에 같은 값을 가진 위치의 인덱스를 반환한다.<br/><br/>\r\n      이렇게 My_Study페이지를 구현하였고, 이후에 추가적인 내용은 컴포넌트를 생성하여 import하는 식으로 진행할 계획이다.<br/><br/>\r\n      다음 포스팅은 Posting페이지를 만드는 과정을 설명해 본다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Posting6;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting2.jsx",["216","217"],"import React, {Component} from 'react';\r\nimport '../App.css'\r\nimport Img1 from './img/11650.PNG'\r\nimport Img2 from './img/11650_1.PNG'\r\nclass Posting2 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>좌표 정렬하기<h3>(정답률 : 48.847%)</h3></h1>\r\n      <h4>백준 11650번 문제로 주어진 좌표를 정렬하는 문제이다. 이 문제는 여러 방법으로 풀 수 있지만<br/><br/>\r\n      c++언어에서 제공해주는 vector와 pair기능 그리고 sort기능을 이용하면 아주 간단하게 풀 수 있다.<br/><br/>\r\n      코드는 다음과 같다.<br/><br/>\r\n      <img src={Img1}className=\"code\"/><br/><br/>\r\n      여기서 vector는 저번 포스팅에서 이미한 상태로 no.4344를 참고하면 된다. 이번 포스팅은 pair를 위주로 포스팅을 한다.<br/><br/>\r\n      pair는 header 파일이 utility이며 서로다른 자료형을 묶어두는 구조체이다.<br/><br/>\r\n      <div className=\"code\">#include&lt;utility&gt;</div><br/><br/> 이렇게 호출하여 사용하며 선언은 아래와 같다.\r\n      <div className=\"code\">std::pair&lt;&lt;Class T&gt;,&lt;Class T&gt;&gt; name;</div>\r\n      pair의 경우는 좀 특이하게 std::make_pair()라는 함수를 사용하여 값을 넣어주는데, 사용법은 아래와 같다.\r\n      <div className=\"code\">name=std::make_pair(v1,v2);</div><br/><br/>\r\n      위의 알고리즘 문제에서는 벡터의 자료형을 pair 자체로 두어 좌표를 벡터의 하나의 저장공간에 넣는 것이다.<br/><br/>\r\n      여기서 벡터는 sort함수를 통해서 문제에서 원하는대로 정렬이 가능하다.<br/><br/> 이때 난 저번 포스팅에서는 알지 못했던 sort의 기능을 하나 알았다.<br/><br/>\r\n      그건 정렬하는 방법을 사용자가 직접 정해주는 방법이었는데, 함수를 새로 정의해서 sort의 세번째 parameter에 넣어주면 그 함수의 반환값에 <br/><br/>따라서 자동으로 정렬되는 기능이다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      이렇게 비교해주는 함수를 사용후에 다음과 같이 코드를 작성하면,\r\n      <div className=\"code\">std::sort(v.begin(),v.end(),cmp);</div>\r\n      문제에서 원하는 값이 나오게 된다. 이상 포스팅 끝.\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting2\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting8.jsx",["218","219","220","221"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from \"./img/11729.PNG\"\r\nimport Img2 from \"./img/11729_1.PNG\"\r\nimport Img3 from \"./img/11729_2.PNG\"\r\nimport Img4 from \"./img/11729_3.PNG\"\r\nclass Posting8 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>하노이탑 이동 순서<h3>(정답률 : 48.601%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 재귀를 활용한 하노이탑 이동순서를 맞추는 문제이다.<br/><br/>\r\n      <h3>재귀함수란?</h3>\r\n      재귀함수란 자기 자신을 호출하는 함수의 형태로 그 중 대표적인 예제로 하노이탑이 사용되곤 한다.<br/><br/>\r\n      재귀로 문제를 풀때는 '큰 문제롤 작은 문제로 나눠서 푼다'는 개념을 갖고 풀게 된다.<br/><br/>\r\n      코드는 다음과 같다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      우선 vector를 통해 재귀함수를 들어가서 이동할 때 마다 이동순서를 저장하게 된다.<br/><br/>\r\n      함수에는 탑의 층수(num), 현재위치(from), 통로(by), 최종위치(to) 총 네가지 매개변수를 갖는다.<br/><br/>\r\n      탈출 조건으로는 num이 1이되었을 때, 마지막으로 이동한 후에 함수를 종료 시킨다.<br/><br/>\r\n      탈출 상황이 아닐 때 생각이 여기서 핵심인데, 만약 탑이 5층이 있다고 가정을 하자.<br/><br/>\r\n      그럼 가장 큰원반이 중앙으로 가야한다. 그럴려면 남은 4개의 원반이 오른쪽으로 가야할 것이다.<br/><br/>\r\n      그럼다시 4개의 원반이 오른쪽으로 가려면 어떻게 해야할까?<br/><br/>\r\n      답은 다시 3개의 원반이 중앙에가 있고 4개의 원반중 가장큰 원반이 오른쪽에 있어야 할 것이다.<br/><br/>\r\n      이것을 계속 반복하다보면 결국 탑이 몇층인 것 과는 상관없이 옮길 수 있다.<br/><br/>\r\n      위의 함수를 보면 첫번째 (n-1,from, by, to)는 n-1개를 가장 오른쪽에 옮기는 코드<br/><br/>\r\n      <img src={Img2} className='code'/><br/><br/>\r\n      두번때 출력문은 마지막 제일큰 원반을 다른 기둥에 옮기는 코드<br/><br/>\r\n      <img src={Img3} className='code'/><br/><br/>\r\n      이후 마지막 (n-1,by,to,from)은 다른 곳으로 옮겼던 n-1개의 원반을 가장큰 원반에 들어가있던 기둥으로 옮겨주는 코드이다.<br/><br/>\r\n      <img src={Img4} className='code'/><br/><br/>\r\n      이와 같은 형태가 된다.<br/><br/>\r\n      재귀는 이렇게 복잡한 문제를 큰 틀로 봐서 간단하게 풀수있어 아주 강력한 무기가 된다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      <a href=\"https://www.youtube.com/watch?v=aPYE0anPZqI\">사진 출처</a>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting8;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting11.jsx",["222","223"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1072.PNG'\r\nimport Img2 from './img/1072_1.PNG'\r\nclass Posting11 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>게임<h3>(정답률 : 21.094%)</h3></h1>\r\n      <h4>\r\n      이 문제는 이분탐색을 하는 문제이다. 문제는 간단한 예시로 50판중에 25판을 이겼다고 가정하자. 이때 승률이 1%가 오를려면 몇판을 최소 이겨야하는지 찾는 문제이다.<br/><br/>\r\n      처음에는 단순히 모든 반복문을 돌면서 계산을 했고 당연하게 시간초과가 나왔다.<br/><br/>\r\n      시간 초과가 계속해서 나와 시간을 줄이기 위해서 이분 탐색을 생각해냈다.<br/><br/>\r\n      <h2>이분 탐색이란?</h2>\r\n      이분 탐색이란 탐색 범위를 두부분으로 나눠서 찾는 방식이다. 이렇게 하면 전부 탐색하는 것보다 훨씬 짧은 시간으로 값을 찾을 수 있다.<br/><br/>\r\n      다음은 이분 탐색을 하는 방법이다.<br/><br/>\r\n      <div className=\"code\">\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      <a href=\"https://velog.io/@ming/%EC%9D%B4%EB%B6%84%ED%83%90%EC%83%89Binary-Search\">사진출처</a><br/><br/>\r\n      1. 찾고자 하는 데이터가 정렬되어 있어야한다.<br/><br/>\r\n      2. begin값과 end값을 정의해준다.<br/><br/>\r\n      3. begin과 end의 중간인 mid값을 잡아준다.<br/><br/>\r\n      4. mid값과 구하고자하는 값을 비교한다.<br/><br/>\r\n         &nbsp;&nbsp;&nbsp;(이때 비교하는 값은 조건으로 코드상으로 볼때 정답 값과 비교하는 것이 아닌 조건문으로 조건에 맞게 찾아가는것이다.)<br/><br/>\r\n      5. mid보다 크면 begin = mid + 1을 해준다. 반대로 값이 낮으면 end = mid - 1을 해준다.<br/><br/>\r\n      6. 이렇게 값을 찾을때까지 2~4를 반복해 준다.<br/><br/>\r\n      </div><br/><br/>\r\n      코드는 다음과 같다.<br/><br/>\r\n      mid값을 end값을 수정하는 부분에 둔 이유는 퍼센트값이 넘어가는 지점에서 정답이 나오기 때문에 begin부분의 조건문에서가 아닌 end에서 넣어준다.<br/><br/>\r\n      이렇게 O(n)시간이 걸리는 문제를 O(log n)으로 시간을 단축하여 풀었다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      이상 포스팅 끝\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting11;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting14.jsx",["224","225","226","227","228"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1991_1.PNG'\r\nimport Img2 from './img/1991_2.PNG'\r\nimport Img3 from './img/1991_3.PNG'\r\nimport Img4 from './img/1991_4.PNG'\r\nimport Img5 from './img/1991_5.PNG'\r\nclass Posting12 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>트리 순회<h3>(정답률 : 63.457%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 자료구조인 트리를 구현하는 문제이다.<br/><br/>\r\n      각 트리의 자식이 왼쪽 오른쪽이 주어지고, 전위, 중위, 후위 순회를 돌면서 탐색한 순서를 출력하는 문제이다.<br/><br/>\r\n      <h3>트리 구조란?</h3>\r\n      트리 구조의 기본 구성은 다음과 같다.\r\n      <div className=\"code\">\r\n      루트(root) 노드 : 부모가 없는 노드, 트리는 루트 노드가 하나이다.<br/><br/>\r\n      리프(leaf) 노드 : 자식이 없는 노드, '단말 노드'또는 '잎 노드'라고 부른다.<br/><br/>\r\n      내부(internal) 노드 : 리프 노드가 아닌 노드이다.<br/><br/>\r\n      </div>\r\n      가장 기본 구성은 위 세가지이며, 이렇게 뻗어 나가는 노드는 마치 나무가 뻗아가는 모양과 닮아있다.<br/><br/>\r\n      <img src={Img1} class=\"code\"/><br/><br/>\r\n      이런 형태가 가장 일반적으로 자식노드의 경우 여러개가 될 수 있지만, 2개를 사용하는 이진트리가 가장 많이 쓰인다.<br/><br/>\r\n      그림처럼 연결리스트를 이용하여 완벽하게 저런 구조를 사용할 수는 있지만, 배열을 이용해서도 충분히 구현을 할 수가 있다.<br/><br/>\r\n      이번 문제는 배열로 구현을 해보았다.<br/><br/>\r\n      각각 전위, 중위, 후위 순회를 재귀적으로 코드를 작성하였다.<div/><div/>\r\n      <h3>순회란?</h3>\r\n      기본적으로 이진트리에서 순회를 하는 순서가 전위 중위 후위 순회로 나뉘는데, 먼저 전위 순회란 노드를 방문하고 왼쪽 서브 트리를 방문, 오른쪽 서브 트리를 방문하는 순이다.<div/><div/>\r\n      보기쉽게하면<div/><div/>\r\n      <h2>전위 순회</h2>\r\n      <div className=\"code\">\r\n      1. 노드를 방문한다.<div/><div/>\r\n      2. 왼쪽 서브트리를 방문한다.<div/><div/>\r\n      3. 오른쪽 서브트리를 방문한다.<div/><div/>\r\n      </div>\r\n      <div/><div/>\r\n      이런 구조가 되며, 중위, 후위의 경우 순서만 다르고 큰 차이는 없다.<div/><div/>\r\n      <h2>중위 순회</h2>\r\n      <div className=\"code\">\r\n      1. 왼쪽 서브트리를 방문한다.<div/><div/>\r\n      2. 노드를 방문한다.<div/><div/>\r\n      3. 오른쪽 서브트리를 방문한다.<div/><div/>\r\n      </div>\r\n      <h2>후위 순회</h2>\r\n      <div className=\"code\">\r\n      1. 왼쪽 서브트리를 방문한다.<div/><div/>\r\n      2. 오른쪽 서브트리를 방문한다.<div/><div/>\r\n      3. 노드를 방문한다.<div/><div/>\r\n      </div>\r\n      위의 세가지 순회를 잘보면 재귀적으로 순회를 한다는 것을 알수있으며, 아래와 같이 코드가 나올수 있다.<div/><div/>\r\n      <div class='code' style={{display:\"flex\"}}>\r\n      <img src={Img2} class=\"code\"/>\r\n      <img src={Img3} class=\"code\"/>\r\n      </div>\r\n      <div class='code' style={{display:\"flex\"}}>\r\n      <img src={Img4} class=\"code\"/>\r\n      <img src={Img5} class=\"code\"/>\r\n      </div>\r\n      일단 트리배열의 경우 아스키코드로 값을 받아서 저장공간을 최소화하기 위해서 생성과 입력, 참조에서 -65 를 해주었다.<div/><div/>\r\n      이차원 배열에서 row부분을 부모노드로, col부분을 자식노드로 생각하여 코드를 작성하였다.<div/><div/>\r\n      이상 포스팅 끝\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting12;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\listOfContents.jsx",[],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting6.jsx",["229","230","231"],"import React,{Component} from 'react'\r\nimport Img1 from './img/study4_1.PNG'\r\nimport Img2 from './img/study4_2.PNG'\r\nimport Img3 from './img/study5_1.PNG'\r\n\r\nclass Posting6 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>Posting 페이지 만들기</h1>\r\n      <h4>\r\n      이번에는 Posting페이지를 만들어본다. posting 페이지는 이전에 홈페이지와 My_Study페이지를 만들때 사용했던 코드들을 활용하여 쉽게 만들었다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      이렇게 각 항목에 대한 버튼들을 생성하고 버튼을 누르면 컴포넌트를 보여준다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      알고리즘 항목은 다음과같은 파일 구조를 갖고있다. index.jsx에서 컴포넌트를 export하고 그 값을 받아서 posting페이지에서 보여준다.<br/><br/>\r\n      알고리즘 폴더의 index.jsx는 다음과 같은 코드를 가지고 있다.<br/><br/>\r\n      이렇게 다시한번 컴포넌트들을 항목으로 만들어 보기/닫기 버튼을 이용해 포스팅한 것들을 보여준다.<br/><br/>\r\n      <img src={Img3} className=\"code\"/><br/><br/>\r\n      posting페이지는 이렇게 새로운 내용없이 기존에 공부했던 내용으로 만들 수 있었다.<br/><br/>\r\n      다음 포스팅때는 메뉴가 여러개로 늘어났을 경우, 코드 관리를 위한 모듈화를 포스팅할 것이다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Posting6;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting6.jsx",["232"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1037.PNG'\r\n\r\nclass Posting6 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>약수<h3>(정답률 : 49.574%)</h3></h1>\r\n      <h4>이번 문제는 양수 A가 N의 진짜 약수가 되려면, N이 A의 배수이고, A가 1과 N이 아니어야 한다.<br/><br/>\r\n      어떤 수 N의 진짜 약수가 모두 주어질 때, N을 구하는 프로그램을 작성하시오.라는 문제이다. 생각해보면 매우 간단한 문제이다.<br/><br/>\r\n      약수의 개수가 짝수개 나오면 중간의 2개를 곱한 값이 N이 될것이고, 홀수일 경우 중간의 값을 제곱하면 N이 될것이다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      코드는 위와 같다.<br/><br/>\r\n      이 문제는 조금만 생각하면 금방 풀 수 있는 문제 코드만 봐도 금방 이해할 수 있다.<br/><br/>\r\n      이상 포스팅 끝\r\n\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting6;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting10.jsx",["233","234"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1225.PNG'\r\nimport Img2 from './img/1225_1.PNG'\r\nclass Posting10 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>이상한 곱셈<h3>(정답률 : 37.947%)</h3></h1>\r\n      <h4>\r\n      이 문제는 A,B가 주어지면 A의 자리수하나를 B의 모든 자리수와 곱한값을 더하고 모든 A자리수에 대해서 반복을 해준다.<br/><br/>\r\n      알고리즘 자체는 단순하지만, A와 B의 자리수가 10000자리수로 int형의 범위를 넘어간다는 문제점이 발생하게된다.<br/><br/>\r\n      이를 해결하기위해 코드를 다음과 같이 짰다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      값을 문자열 형태로 받는 것이다.<br/><br/>이렇게 받게되면, 자리수와 상관없이 값을 계산할 수 있으며 주의할 점으로는 char형으로 나타나는 문자는\r\n       아스키코드값으로 받기때문에 계산하기전에 -48을 해주는 것을 잊지말자.\r\n       <br/><br/> 그리고 문자를 계산하다보면 int값을 넘어가게 되는데, 배열을 생성해주고\r\n       처음에는 인덱스 0번째에 값을 넣다가 10억을 넘어가게되면 인덱스 1번째에 넣어준다. 출력은 이 두 값을 이어서 출력해주면 해결이된다.<br/><br/>\r\n       <h3>아스키코드란?</h3>\r\n       아스키코드란 미국정보교환표준부호를 말하며 영문 알파벳을 사용하는 대표적인 문자 인코딩이다.<br/><br/>\r\n       <h2>아스키코드 표</h2>\r\n       <img src={Img2} className=\"code\"/><br/><br/>\r\n        위는 아스키코드 표로 문자와 대응되는 표기법들이다.<br/><br/>\r\n        이상 포스팅 끝\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting10;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting4.jsx",["235","236"],"import React, {Component} from 'react'\r\nimport Img1 from './img/3-1.PNG'\r\nimport Img2 from './img/3-2.PNG'\r\nclass Posting3 extends Component{\r\n  render(){\r\n    return(\r\n      <div class=\"left\">\r\n      <h1>Decision Tree-2</h1>\r\n      <h4>\r\n      결정트리는 기본적으로 Full Tree를 바탕으로 한다. Full Tree는 모든 클래스의 inpurity가 0이 되도록 만든 트리이다.<br/><br/>\r\n      다른 의미로 training error가 0인 상태로 만든다.<br/><br/>\r\n      full tree로 만들면 training error가 0이 되기 때문에 학습이 잘됐다고 생각할 수 있지만 전혀 그렇지않다. overfitting 되었기 때문이다.<br/><br/>\r\n      무조건 overfitting이 안좋다고 할 수는 없지만 세로운 데이터에 대해서 정확도가 일반적인 경우에 별로 좋게 나오지 않을 가능성이 크다.<br/><br/>\r\n      그럼 이렇게 overfitting이 나지않게 하려면 어떻게 해야할까? 너무 split을 하지않으면 반대로 underfitting이 발생할 수 있다.<br/><br/>\r\n      다음 표를 보자<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      training data의 정확도가 높아질수록 class분류가 많아지고, validation data의 정확도는 특정 수준이후로는 낮아지는 것을 볼 수있다.<br/><br/>\r\n      validation data란 기존에 가지고 있는 데이터에서 학습이 잘 이뤄지는 지를 체크하기 위해서 training 데이터의 일부를 테스트 데이터로 두고 사용하는 개념이다.<br/><br/>\r\n      그래프에서 보면 알지만, 중간에 가장 적절한 지점이 있는데 이 지점을 잘 찾아주는게 결정트리의 핵심이라고 볼 수 있다.<br/><br/>\r\n      그럼 split은 Entropy와 Gini 방식을 이용해서 split하지만 이 방식은 split을 하는 기준이고, 실제로 분류는 기준을 어떻게 활용을 할까?<br/><br/>\r\n      기본적으로 Greedy 방식으로 분류를 한다.<br/><br/> Greedy방식이란 현재 상황에서 가장 좋은 inpurity를 만들기 위해서 구간을 나누는 것이다.<br/><br/>\r\n      이렇게 split할 경우 이전의 상황으로 돌아갈 수 없으며 아래와 같이 결과적으로는 더 안좋은 경우가 나타날 수 있다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      하지만 나중의 경우를 모두 예측하기란 매우 어려운 일이고 할수 있더라도 너무많은 연산이 필요하기 때문에 Greedy방식을 사용한다.\r\n      split을 하는 방식은 Greedy 방식이라고 하면, 도중에 멈추는 방법은 어떤게 있을까? 여러가지 방법이 있겠지만 대표적으로는 hyperparameter를 조정하는 법으로\r\n      <div className='code'>\r\n      1. Max depth<br/><br/>\r\n      2. Max leaf nodes<br/><br/>\r\n      3. Max data for split\r\n      </div>\r\n      이 세가지가 기본적이고 이외에 Regularization을 하는 방법도 있다. 트리의 크기를 제한하는 방법이다.\r\n      <div className='code'>\r\n      &alpha;*size+&Sigma;i(N)\r\n      </div>\r\n      식이 최대한 낮은 수치를 가질 수 있게 한다.<br/><br/>\r\n      &alpha;*size부분은 comlpexity부분으로 얼마나 가지가 많이 뻗어 갔는지를 보여주며 뒤에 &Sigma;i(N)부분은 training error부분이다.<br/><br/>\r\n      가지가 많이 뻗어갈수록 training error는 감소할 것이고, 반대로 가지가 적게 뻗어갈수록 training error가 증가할 것이다.<br/><br/>\r\n      이 두가지 수치를 적절하게 조합해 최대한 낮게 값을 유지해줘야한다.<br/><br/>\r\n      마지막으로는 pruning이라는 방법이있다. 해석하면 가지치기로 너무 많은 클래스 분류가 일어나지 않게 도중에 가지치기처럼 Cost Funtion에 맞춰 끊어주는것이다.<br/><br/>\r\n      이 Cost Function이 최소로 하는 구간에서 가지를 치는 것이다. 이런 pruning의 특징은 최소한의 inpurity를 갖게 되며, validation data가 필요없으며 동시에 그만큼 연산량이 증가한다.<br/><br/>\r\n      Cost Funtion은 다음과 같다.\r\n      <div class=\"code\">Cost(T) = Err(T) + &alpha;*L(T) = Err(T) + &alpha;*(leaf_nodes(T))</div>\r\n      여기서 &alpha;의 경우는 hyperparameter로 사용자가 직접 설정해주는 값이다. 알파의 값이 크게되면 나뉘는 클래스(leaf)의 비중이 높게나오고, 알파의 값이 작으면 나뉘는 클래스(leaf)의 비중이 낮아진다.<br/><br/>\r\n      기본적인 pruning 알고리즘은 다음과 같다.\r\n      <div class=\"code\">\r\n      1. Full Tree를 생성한다.<br/><br/>\r\n      2. pruning을 한다.<br/><br/>\r\n      2-1. sub-tree를 찾는다.<br/><br/>\r\n      2-2. Full_tree와 Sub_tree의 Cost Function을 계산한다.<br/><br/>\r\n      2-3. 만약 Cost(Full_tree)&gt;Cost(Sub_tree)면 Sub_tree를 선택한다.\r\n      </div>\r\n      이렇게 적절한 pruning이나 split을 통해서 가장 효율적인 트리를 찾아 주어야한다.<br/><br/>\r\n      <h3>Decision Tree의 특징</h3>\r\n      결정트리의 특징으로 가장 큰 세가지는 숫자가아닌 단어로된 변수, outliers, Missing Values모두 학습에 있어서 큰 개입이 없다는 것이다.<br/><br/>\r\n      단어로된 일반 변수의 경우 오히려 더 강력한 설명력을 가지기 때문에 있으면 좋은 경우가 많다.<br/><br/>\r\n      outliers(비정상적인 수치)와 Missing Values(누락된 데이터)의 경우 일반적인 결정트리는 Full Tree를 사용하지 않고 적당한 pruning과 split을 하기 때문에 애초에 거의 영향이 없는 경우가 많다.<br/><br/>\r\n      마지막으로 결정트리는 Nonlinear Split를 보통 사용하지않고, 이것과 별개로 Regression으로도 사용을 한다.<br/><br/>\r\n      결정트리는 Nonlinear Split을 하지않는 이유는 결정트리는 설명력이 강하다는 장점을 가지고있는데, Nonlinear split은 설명력을 잃기 때문에 사용하지않는다.<br/><br/>\r\n      이상 포스팅 끝\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting3\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting3.jsx",["237","238","239","240","241"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting7.jsx",["242"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from \"./img/18258_1.PNG\"\r\nclass Posting7 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>큐 2<h3>(정답률 : 30.82%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 라이브러리 큐를 사용하는 문제이다. 제한 시간이 1초이기 때문에 구현으로 답을 맞추기에는 시간초과가 뜨기 때문이다.<br/><br/>\r\n      문제에서 사용하는 명령어는 \"push\", \"pop\", \"size\", \"empty\", \"empty\", \"front\", \"back\"이렇게 6가지로 구현이 된다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/>\r\n      여기서 문자를 전부 비교해서 하는것은 속도를 느리게 하기때문에 문자열을 입력받으면 특정문자열의 문자를 비교하여 이런 식으로 명령어를 실행한다.<br/><br/>\r\n      이 문제에 사용된 queue의 명령어는 다음과 같다.<br/><br/>\r\n      <div className=\"code\">\r\n      queue.front();<br/><br/>\r\n      queue.back();<br/><br/>\r\n      queue.pop();<br/><br/>\r\n      queue.size();<br/><br/>\r\n      queue.empty();<br/><br/>\r\n      </div>\r\n      front()와 back()은 각각 큐의 맨 앞부분과 맨 뒷부분의 값을 참조하는 함수이고 pop()은 맨 앞의 값을 없애주는 함수이다.<br/><br/>\r\n      size()는 큐의 사이즈를 나타내고 empty()는 큐가 비어있으면 true, 차있으면 false를 반환한다.<br/><br/>\r\n      이를 적절히 활용하여 문제를 풀 수 있다.<br/><br/>\r\n      이상 포스팅 끝<br/><br/>\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting7;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting12.jsx",["243","244","245","246","247"],"import React, {Component} from 'react'\r\nimport '../App.css'\r\nimport Img1 from './img/1260.png'\r\nimport Img2 from './img/1260_1.png'\r\nimport Img3 from './img/1260_2.png'\r\nimport Img4 from './img/1260_3.png'\r\nimport Img5 from './img/1260_4.png'\r\nclass Posting12 extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"left\">\r\n      <h1>DFS와 BFS<h3>(정답률 : 33.430%)</h3></h1>\r\n      <h4>\r\n      이번 문제는 DFS와 BFS를 구현하는 문제이다.<br/><br/>\r\n      주어진 값에 숫자가 작은 순서로 탐색을 하면되는 조건으로 문제를 풀면된다.<br/><br/>\r\n      코드만 보면 DFS와 BFS는 다음과 같다.<br/><br/>\r\n      <img src={Img1} className=\"code\"/><br/><br/><br/><br/>\r\n      <h3>DFS란?</h3>\r\n      DFS는 Depth First Search의 약자로 해석하면 깊이우선탐색이라고 볼 수 있다.<br/><br/>\r\n      그래프가 주어지면 가장 깊은곳으로 들어가 탐색을 하고, 그다음 깊은곳, 그다음 깊은곳 ... 이렇게 반복하여 찾는것이다.<br/><br/>\r\n      <img src={Img2} className=\"code\"/><br/><br/>\r\n      첫번째 시작 지점을 루트노드로 지정하고 시작노드에서 가장 멀리 떨어진 구간의 노드를 리프노드로하면 트리구조로 쉽게 이해할 수 있다.<br/><br/>\r\n      위 그림과 같이 깊은곳부터 탐색을 하게된다.<br/><br/>\r\n      이렇게 탐색된 그래프는 stack구조를 이용해서 순회를 하게 된다.<br/><br/>\r\n      순회를 하면 stack에 들어가는 순서 자체는 1-5-2-4-3-6로 들어가게된다.<br/><br/>\r\n      하지만 stack을 pop할때 순회로 인정되기때문에 1-2-3-4-5-6순으로 순회하게 되는 것이다.<br/><br/>\r\n      이를 스택구조로 보게 된다면 다음과 같다.<br/><br/>\r\n      <img src={Img3} className=\"code\"/><br/><br/>\r\n      <h3>BFS란?</h3>\r\n      BFS는 Breadth-first search의 약자로 DFS와는 약간의 차이가 있는데, 해석하면 넓이우선탐색이다.<br/><br/>\r\n      <img src={Img4} className=\"code\"/><br/><br/>\r\n      트리 구조로 놓았을 때, 넓이 부분을 순차적으로 탐색하면서 깊이를 내려가는 탐색방법이다.<br/><br/>\r\n      DFS에서 Stack을 사용한다면 BFS에서는 Queue를 사용하는데, 재밌는점은 알고리즘은 완전 같지만 단지 큐를 사용한다는 점이다.<br/><br/>\r\n      큐는 선입선출이기떄문에 큐에 들어가는 순서와 pop의 순서가 1-5-2-4-6-3으로 같다.<br/><br/>\r\n      그림으로 보면 다음과 같다.<br/><br/>\r\n      <img src={Img5} className=\"code\"/><br/><br/>\r\n      DFS와 BFS에서 스택과 큐에 값이 남았음에도 순회로 인정되지 않는 이유는 이미 이전에 방문한적이 있기 때문이다.<br/><br/>\r\n      이점은 코드를 짤때도 유의해서 꼭 visit부분을 체크해줘야한다.<br/><br/>\r\n      이상 포스팅 끝\r\n\r\n      </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posting12;\r\n","C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\algorithm\\Posting13.jsx",["248","249"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\React_study\\Posting2.jsx",["250","251"],"C:\\Users\\ljy89\\Desktop\\GLOG\\blog\\src\\ML\\Posting3.jsx",["252","253"],{"ruleId":"254","replacedBy":"255"},{"ruleId":"256","replacedBy":"257"},{"ruleId":"258","severity":1,"message":"259","line":9,"column":50,"nodeType":"260","messageId":"261","endLine":9,"endColumn":52},{"ruleId":"254","replacedBy":"262"},{"ruleId":"256","replacedBy":"263"},{"ruleId":"264","severity":1,"message":"265","line":22,"column":7,"nodeType":"266","endLine":22,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":24,"column":7,"nodeType":"266","endLine":24,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":27,"column":7,"nodeType":"266","endLine":27,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":31,"column":7,"nodeType":"266","endLine":31,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":36,"column":7,"nodeType":"266","endLine":36,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":38,"column":7,"nodeType":"266","endLine":38,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":44,"column":7,"nodeType":"266","endLine":44,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":47,"column":7,"nodeType":"266","endLine":47,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":52,"column":7,"nodeType":"266","endLine":52,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":55,"column":7,"nodeType":"266","endLine":55,"endColumn":38},{"ruleId":"264","severity":1,"message":"265","line":60,"column":7,"nodeType":"266","endLine":60,"endColumn":38},{"ruleId":"264","severity":1,"message":"265","line":62,"column":7,"nodeType":"266","endLine":62,"endColumn":38},{"ruleId":"254","replacedBy":"267"},{"ruleId":"256","replacedBy":"268"},{"ruleId":"264","severity":1,"message":"265","line":21,"column":9,"nodeType":"266","endLine":21,"endColumn":43},{"ruleId":"264","severity":1,"message":"265","line":24,"column":9,"nodeType":"266","endLine":24,"endColumn":43},{"ruleId":"264","severity":1,"message":"265","line":18,"column":7,"nodeType":"266","endLine":18,"endColumn":40},{"ruleId":"264","severity":1,"message":"265","line":20,"column":7,"nodeType":"266","endLine":20,"endColumn":40},{"ruleId":"264","severity":1,"message":"265","line":22,"column":7,"nodeType":"266","endLine":22,"endColumn":40},{"ruleId":"264","severity":1,"message":"265","line":24,"column":7,"nodeType":"266","endLine":24,"endColumn":40},{"ruleId":"264","severity":1,"message":"265","line":31,"column":7,"nodeType":"266","endLine":31,"endColumn":40},{"ruleId":"264","severity":1,"message":"265","line":35,"column":7,"nodeType":"266","endLine":35,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":36,"column":7,"nodeType":"266","endLine":36,"endColumn":41},{"ruleId":"254","replacedBy":"269"},{"ruleId":"256","replacedBy":"270"},{"ruleId":"264","severity":1,"message":"265","line":15,"column":7,"nodeType":"266","endLine":15,"endColumn":40},{"ruleId":"254","replacedBy":"271"},{"ruleId":"256","replacedBy":"272"},{"ruleId":"264","severity":1,"message":"265","line":19,"column":7,"nodeType":"266","endLine":19,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":23,"column":7,"nodeType":"266","endLine":23,"endColumn":41},{"ruleId":"258","severity":1,"message":"259","line":11,"column":50,"nodeType":"260","messageId":"261","endLine":11,"endColumn":52},{"ruleId":"273","severity":1,"message":"274","line":25,"column":50,"nodeType":"266","endLine":25,"endColumn":64},{"ruleId":"275","severity":1,"message":"276","line":6,"column":8,"nodeType":"277","messageId":"278","endLine":6,"endColumn":12},{"ruleId":"264","severity":1,"message":"265","line":18,"column":9,"nodeType":"266","endLine":18,"endColumn":43},{"ruleId":"264","severity":1,"message":"265","line":20,"column":9,"nodeType":"266","endLine":20,"endColumn":43},{"ruleId":"264","severity":1,"message":"265","line":24,"column":9,"nodeType":"266","endLine":24,"endColumn":43},{"ruleId":"264","severity":1,"message":"265","line":30,"column":9,"nodeType":"266","endLine":30,"endColumn":43},{"ruleId":"264","severity":1,"message":"265","line":31,"column":9,"nodeType":"266","endLine":31,"endColumn":43},{"ruleId":"258","severity":1,"message":"259","line":7,"column":50,"nodeType":"260","messageId":"261","endLine":7,"endColumn":52},{"ruleId":"279","severity":1,"message":"280","line":26,"column":60,"nodeType":"281","messageId":"282","endLine":28,"endColumn":16},{"ruleId":"258","severity":1,"message":"259","line":7,"column":50,"nodeType":"260","messageId":"261","endLine":7,"endColumn":52},{"ruleId":"275","severity":1,"message":"283","line":7,"column":8,"nodeType":"277","messageId":"278","endLine":7,"endColumn":12},{"ruleId":"275","severity":1,"message":"284","line":8,"column":8,"nodeType":"277","messageId":"278","endLine":8,"endColumn":12},{"ruleId":"264","severity":1,"message":"265","line":19,"column":7,"nodeType":"266","endLine":19,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":23,"column":7,"nodeType":"266","endLine":23,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":25,"column":7,"nodeType":"266","endLine":25,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":28,"column":7,"nodeType":"266","endLine":28,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":14,"column":7,"nodeType":"266","endLine":14,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":22,"column":7,"nodeType":"266","endLine":22,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":25,"column":7,"nodeType":"266","endLine":25,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":13,"column":7,"nodeType":"266","endLine":13,"endColumn":40},{"ruleId":"264","severity":1,"message":"265","line":23,"column":7,"nodeType":"266","endLine":23,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":18,"column":7,"nodeType":"266","endLine":18,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":28,"column":7,"nodeType":"266","endLine":28,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":30,"column":7,"nodeType":"266","endLine":30,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":32,"column":7,"nodeType":"266","endLine":32,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":18,"column":7,"nodeType":"266","endLine":18,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":31,"column":7,"nodeType":"266","endLine":31,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":24,"column":7,"nodeType":"266","endLine":24,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":54,"column":7,"nodeType":"266","endLine":54,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":55,"column":7,"nodeType":"266","endLine":55,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":58,"column":7,"nodeType":"266","endLine":58,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":59,"column":7,"nodeType":"266","endLine":59,"endColumn":37},{"ruleId":"264","severity":1,"message":"265","line":13,"column":7,"nodeType":"266","endLine":13,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":15,"column":7,"nodeType":"266","endLine":15,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":19,"column":7,"nodeType":"266","endLine":19,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":13,"column":7,"nodeType":"266","endLine":13,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":14,"column":7,"nodeType":"266","endLine":14,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":22,"column":8,"nodeType":"266","endLine":22,"endColumn":42},{"ruleId":"264","severity":1,"message":"265","line":16,"column":7,"nodeType":"266","endLine":16,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":23,"column":7,"nodeType":"266","endLine":23,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":19,"column":7,"nodeType":"266","endLine":19,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":26,"column":7,"nodeType":"266","endLine":26,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":34,"column":7,"nodeType":"266","endLine":34,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":36,"column":7,"nodeType":"266","endLine":36,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":39,"column":7,"nodeType":"266","endLine":39,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":12,"column":7,"nodeType":"266","endLine":12,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":17,"column":7,"nodeType":"266","endLine":17,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":21,"column":7,"nodeType":"266","endLine":21,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":28,"column":7,"nodeType":"266","endLine":28,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":31,"column":7,"nodeType":"266","endLine":31,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":36,"column":7,"nodeType":"266","endLine":36,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":17,"column":7,"nodeType":"266","endLine":17,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":20,"column":7,"nodeType":"266","endLine":20,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":11,"column":7,"nodeType":"266","endLine":11,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":13,"column":7,"nodeType":"266","endLine":13,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":15,"column":7,"nodeType":"266","endLine":15,"endColumn":41},{"ruleId":"264","severity":1,"message":"265","line":24,"column":7,"nodeType":"266","endLine":24,"endColumn":41},"no-native-reassign",["285"],"no-negated-in-lhs",["286"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["285"],["286"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["285"],["286"],["285"],["286"],["285"],["286"],"react/jsx-pascal-case","Imported JSX component React_study must be in PascalCase or SCREAMING_SNAKE_CASE","no-unused-vars","'Img4' is defined but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'Img5' is defined but never used.","'Img6' is defined but never used.","no-global-assign","no-unsafe-negation"]